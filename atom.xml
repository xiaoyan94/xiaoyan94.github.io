<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>空城盼故人</title>
  
  <subtitle>许嵩老公的博客</subtitle>
  <link href="https://xiaoyan94.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaoyan94.github.io/"/>
  <updated>2025-02-25T03:23:25.720Z</updated>
  <id>https://xiaoyan94.github.io/</id>
  
  <author>
    <name>许嵩老公</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql数据库表自增ID跳跃不连续的问题</title>
    <link href="https://xiaoyan94.github.io/2025/02/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%87%AA%E5%A2%9EID%E8%B7%B3%E8%B7%83%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://xiaoyan94.github.io/2025/02/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%87%AA%E5%A2%9EID%E8%B7%B3%E8%B7%83%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2025-02-25T02:25:44.000Z</published>
    <updated>2025-02-25T03:23:25.720Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E9%97%AE%E9%A2%98%E7%8E%B0%E8%B1%A1">问题现象</a></li><li><a href="#%E9%97%AE%E9%A2%98%E5%AE%9A%E4%BD%8D">问题定位</a><ul><li><a href="#%E5%8E%9Fsql">原sql</a></li><li><a href="#%E5%8E%9F%E5%9B%A0">原因</a></li><li><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">解决方法</a></li></ul></li></ul><h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p><img src="/2025/02/25/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%87%AA%E5%A2%9EID%E8%B7%B3%E8%B7%83%E4%B8%8D%E8%BF%9E%E7%BB%AD%E7%9A%84%E9%97%AE%E9%A2%98/2025-02-25-10-28-27.png" alt="问题现象"></p><ul><li>业务表记录为从SRM同步的送货单相关数据</li><li>业务表只做插入和更新，没有删除逻辑</li><li>业务表主键ID自增，<code>AUTO_INCREMENT</code>字段</li><li>业务表出现ID增长不连续、跳跃式增长的现象</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) <span class="keyword">from</span> biz_wms_delivery_order_barcode;</span><br><span class="line"><span class="comment">-- 913293</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> biz_wms_delivery_order_barcode;</span><br><span class="line"><span class="comment">-- 49314</span></span><br></pre></td></tr></table></figure></div><p>才几万行数据，表ID已经增长到快100万了</p><h2 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h2><h3 id="原sql"><a href="#原sql" class="headerlink" title="原sql"></a>原sql</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"insertDeliveryOrder"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"dataList != null and dataList.size() &gt; 0"</span>&gt;</span></span><br><span class="line">        insert into biz_wms_delivery_order(</span><br><span class="line">        factoryid, deliveryno, deliverytype, purchasetype, status, innervendorcode, lastoperatetime, updatetime, maintainer, createtime)</span><br><span class="line">        values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"dataList"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">""</span> <span class="attr">close</span>=<span class="string">""</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            (#&#123;factoryid&#125;,#&#123;item.deliveryno&#125;,#&#123;item.deliverytype&#125;,#&#123;item.purchasetype&#125;,#&#123;item.status&#125;,#&#123;item.innervendorcode&#125;,#&#123;item.lastoperatetime&#125;, #&#123;maintaintime&#125;,'sys', #&#123;maintaintime&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        on duplicate key update deliverytype=values(deliverytype),purchasetype=values(purchasetype),status=values(status),innervendorcode=values(innervendorcode),lastoperatetime=values(lastoperatetime),updatetime=values(updatetime),maintainer=values(maintainer)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"insertDeliveryOrderDetails"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"linelist != null and linelist.size() &gt; 0"</span>&gt;</span></span><br><span class="line">     insert into biz_wms_delivery_order_detail(</span><br><span class="line">        factoryid, deliveryno, innervendorcode, innervendorname, lineno, poerpno, polineno, requirementorderno, productcode, productname, productscale,</span><br><span class="line">        deliveryqty, remark, totalpackingqty, packingqty, sendverifystatus, createtime, maintainer, updatetime, status)</span><br><span class="line">        values</span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"linelist"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">""</span> <span class="attr">close</span>=<span class="string">""</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">         (#&#123;factoryid&#125;,#&#123;deliveryno&#125;,#&#123;innervendorcode&#125;,#&#123;innervendorname&#125;,#&#123;item.lineno&#125;,#&#123;item.poerpno&#125;,#&#123;item.polineno&#125;, #&#123;item.requirementorderno&#125;,#&#123;item.productcode&#125;,#&#123;item.productname&#125;,#&#123;item.productscale&#125;,</span><br><span class="line">            #&#123;item.deliveryqty&#125;,#&#123;item.remark&#125;,#&#123;totalpackingqty&#125;,#&#123;item.packingqty&#125;,#&#123;item.sendverifystatus&#125;, #&#123;maintaintime&#125;,'sys', #&#123;maintaintime&#125;, #&#123;item.status&#125;)</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        on duplicate key update innervendorcode=values(innervendorcode),innervendorname=values(innervendorname),poerpno=values(poerpno),polineno=values(polineno), requirementorderno=values(requirementorderno),productcode=values(productcode),productname=values(productname),productscale=values(productscale),</span><br><span class="line">        deliveryqty=values(deliveryqty),remark=values(remark),totalpackingqty=values(totalpackingqty),packingqty=values(packingqty),sendverifystatus=values(sendverifystatus),updatetime=values(updatetime),maintainer=values(maintainer), status=values(status)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"insertDeliveryOrderBarcodes"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"dataList != null and dataList.size() &gt; 0"</span>&gt;</span></span><br><span class="line">     insert into biz_wms_delivery_order_barcode(</span><br><span class="line">        factoryid, deliveryno, productcode, productname, productscale, lineno, smallbarcode, includeqty, createtime, maintainer, updatetime)</span><br><span class="line">        values</span><br><span class="line">     <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"dataList"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">open</span>=<span class="string">""</span> <span class="attr">close</span>=<span class="string">""</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">         (#&#123;factoryid&#125;,#&#123;deliveryno&#125;,#&#123;item.productcode&#125;,#&#123;item.productname&#125;,#&#123;item.productscale&#125;, ifnull(#&#123;item.dynamicdata.lineNo&#125;, 1) ,#&#123;item.smallbarcode&#125;,#&#123;item.includeqty&#125;, #&#123;maintaintime&#125;,'sys', #&#123;maintaintime&#125;)</span><br><span class="line">     <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        on duplicate key update productname=values(productname), productscale=values(productscale)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>三个表同样的现象，自增ID不连续。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>使用 <code>INSERT INTO ... ON DUPLICATE KEY UPDATE</code> 或 <code>INSERT IGNORE INTO</code> 语句的坑。</p><ol><li><p>使用 <code>INSERT INTO ... ON DUPLICATE KEY UPDATE</code> 语句：</p><p>即使在唯一键冲突时执行更新操作，没有实际插入数据库，<code>AUTO_INCREMENT</code> 计数器仍会递增，导致ID值跳跃。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> biz_wms_delivery_order(</span><br><span class="line">factoryid, deliveryno, deliverytype, purchasetype, <span class="keyword">status</span>, innervendorcode, lastoperatetime, updatetime, maintainer, createtime)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="number">414</span>, <span class="string">'22241217838N'</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4.018</span>, <span class="string">'2024-12-31 10:53:01'</span>, <span class="string">'2025-01-02 11:43:11'</span>, <span class="string">'sys'</span>, <span class="string">'2024-12-27 15:58:07'</span>)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">duplicate</span> <span class="keyword">key</span> <span class="keyword">update</span> deliverytype=<span class="keyword">values</span>(deliverytype),purchasetype=<span class="keyword">values</span>(purchasetype),<span class="keyword">status</span>=<span class="keyword">values</span>(<span class="keyword">status</span>),innervendorcode=<span class="keyword">values</span>(innervendorcode),lastoperatetime=<span class="keyword">values</span>(lastoperatetime),updatetime=<span class="keyword">values</span>(updatetime),maintainer=<span class="keyword">values</span>(maintainer)</span><br></pre></td></tr></table></figure></div><p>尤其是在批量操作的时候，假设批量插入100条数据，其中5条插入成功，95条已存在执行更新操作，自增主键ID会在此次语句执行完后增大100而不是5，即使实际上只插入了5条新数据。</p><p>可以手动多执行几次同样的SQL，通过 <code>show create table</code> 语句查看表的 <code>AUTO_INCREMENT</code> 属性验证。</p></li><li><p>使用 <code>INSERT IGNORE INTO</code> 语句，也是一样。假设批量插入100条数据，其中5条插入成功，另外95条由于主键冲突被忽略，实际 <code>AUTO_INCREMENT</code> 增大了100。</p></li></ol><p>表结构，查看 <code>AUTO_INCREMENT</code></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> biz_wms_delivery_order_barcode;</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`biz_wms_delivery_order_barcode`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`factoryid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="comment">-- ...其他字段</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">15713</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'送货单标签'</span></span><br></pre></td></tr></table></figure></div><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><blockquote><p>网上查询可知以上是mysql默认的自增ID分配策略导致的问题，会直接预先分配ID，导致 <code>AUTO_INCREMENT</code> 增长。虽然调整 <code>innodb_autoinc_lock_mode</code> 配置，可以修改该策略，但是修改该参数会影响并发性能。</p></blockquote><p>因为需要定时从SRM同步，每次执行 <code>INSERT INTO ... ON DUPLICATE KEY UPDATE</code> 会有大量已存在的数据需要更新，导致ID跳跃的非常大。</p><p>最终还是要修改业务表的插入逻辑，不使用 <code>INSERT INTO ... ON DUPLICATE KEY UPDATE</code> ，将其拆分为插入和更新两部分。</p><p><strong>方案</strong>： 在插入前先执行查询，判断记录是否存在；如果存在，则执行更新；如果不存在，则执行插入。</p><p><strong>优点</strong>： 避免了自增ID的跳跃。</p><p><strong>缺点</strong>： 增加了查询和判断的开销，增加了代码，可能影响性能，但影响不大可以接受。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="SQL" scheme="https://xiaoyan94.github.io/tags/SQL/"/>
    
    <category term="数据库" scheme="https://xiaoyan94.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>mysqldump备份还原相关</title>
    <link href="https://xiaoyan94.github.io/2025/02/25/mysqldump%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F%E7%9B%B8%E5%85%B3/"/>
    <id>https://xiaoyan94.github.io/2025/02/25/mysqldump%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F%E7%9B%B8%E5%85%B3/</id>
    <published>2025-02-25T01:46:26.000Z</published>
    <updated>2025-02-25T01:55:23.624Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#mysqldump%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F%E7%9B%B8%E5%85%B3">mysqldump备份还原相关</a><ul><li><a href="#%E4%BD%BF%E7%94%A8mysqldump%E5%A4%87%E4%BB%BD">使用mysqldump备份</a><ul><li><a href="#%E5%A4%87%E4%BB%BD%E5%89%8D%E5%8F%AF%E6%9F%A5%E8%AF%A2%E8%A1%A8%E5%A4%A7%E5%B0%8F">备份前可查询表大小</a></li><li><a href="#%E5%A4%87%E4%BB%BD%E6%97%B6%E5%8F%AF%E5%BF%BD%E7%95%A5%E6%8C%87%E5%AE%9A%E8%A1%A8">备份时可忽略指定表</a></li><li><a href="#%E5%A4%87%E4%BB%BD%E6%97%B6%E5%8F%AA%E5%A4%87%E4%BB%BD%E8%A1%A8%E7%BB%93%E6%9E%84">备份时只备份表结构</a></li><li><a href="#%E5%A4%87%E4%BB%BD%E6%97%B6%E5%8F%AF%E5%90%8C%E6%97%B6%E5%A4%87%E4%BB%BD%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B">备份时可同时备份存储过程</a></li><li><a href="#%E5%A4%87%E4%BB%BD%E6%97%B6%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9Awhere%E6%9D%A1%E4%BB%B6">备份时可以指定where条件</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E8%BF%98%E5%8E%9F">数据库备份文件还原</a><ul><li><a href="#%E8%BF%98%E5%8E%9F%E6%8C%87%E5%AE%9A%E8%A1%A8">还原指定表</a></li></ul></li></ul></li></ul><h2 id="mysqldump备份还原相关"><a href="#mysqldump备份还原相关" class="headerlink" title="mysqldump备份还原相关"></a>mysqldump备份还原相关</h2><h3 id="使用mysqldump备份"><a href="#使用mysqldump备份" class="headerlink" title="使用mysqldump备份"></a>使用mysqldump备份</h3><h4 id="备份前可查询表大小"><a href="#备份前可查询表大小" class="headerlink" title="备份前可查询表大小"></a>备份前可查询表大小</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">as</span> <span class="string">'表名'</span>,</span><br><span class="line">       <span class="keyword">round</span>((data_length + index_length) / <span class="number">1024</span> / <span class="number">1024</span>, <span class="number">2</span>) <span class="keyword">as</span> <span class="string">'表大小(MB)'</span></span><br><span class="line"><span class="keyword">from</span> information_schema.tables</span><br><span class="line"><span class="keyword">where</span> table_schema = <span class="string">'alpsmes'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">round</span>((data_length + index_length) / <span class="number">1024</span> / <span class="number">1024</span>, <span class="number">2</span>) <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure></div><h4 id="备份时可忽略指定表"><a href="#备份时可忽略指定表" class="headerlink" title="备份时可忽略指定表"></a>备份时可忽略指定表</h4><p>  使用 <code>--ignore-table</code> 选项</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uzy_mes -p12345 alpsmes \</span><br><span class="line">--ignore-table=alpsmes.biz_electr_inspection_data \</span><br><span class="line">--ignore-table=alpsmes.tmp_biz_electr_inspection_data \</span><br><span class="line">--ignore-table=alpsmes.sys_log_his \</span><br><span class="line">--ignore-table=alpsmes.act_ru_meter_log \</span><br><span class="line">--ignore-table=alpsmes.biz_technics_opc_quality \</span><br><span class="line">--ignore-table=alpsmes.sys_log \</span><br><span class="line">--ignore-table=alpsmes.biz_3rd_andon_api_log \</span><br><span class="line">--ignore-table=alpsmes.biz_order_report_record_bak \</span><br><span class="line">&gt; alpsmes20240306.sql</span><br></pre></td></tr></table></figure></div><h4 id="备份时只备份表结构"><a href="#备份时只备份表结构" class="headerlink" title="备份时只备份表结构"></a>备份时只备份表结构</h4><p>  使用 <code>--no-data</code> 选项</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uzy_mes -p122345 alpsmes \</span><br><span class="line">biz_electr_inspection_data \</span><br><span class="line">tmp_biz_electr_inspection_data \</span><br><span class="line">sys_log_his \</span><br><span class="line">act_ru_meter_log \</span><br><span class="line">biz_technics_opc_quality \</span><br><span class="line">sys_log \</span><br><span class="line">biz_3rd_andon_api_log \</span><br><span class="line">biz_order_report_record_bak \</span><br><span class="line">--no-data \</span><br><span class="line">&gt; alpsmes_no_data_20240306.sql</span><br></pre></td></tr></table></figure></div><h4 id="备份时可同时备份存储过程"><a href="#备份时可同时备份存储过程" class="headerlink" title="备份时可同时备份存储过程"></a>备份时可同时备份存储过程</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uzy_mes -p12345 --routines --no-data --databases dengqimes &gt; /tmp/dengqimes_structure.sql</span><br></pre></td></tr></table></figure></div><h4 id="备份时可以指定where条件"><a href="#备份时可以指定where条件" class="headerlink" title="备份时可以指定where条件"></a>备份时可以指定where条件</h4><p>  使用 <code>--where</code> 选项</p><ul><li><p>备份时只备份数据不备份表结构</p><p>使用 <code>--no-create-info</code> 选项</p></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uzy_mes -p122345 dengqimes biz_technics_opc_quality --<span class="built_in">where</span>=<span class="string">"factoryid=3 and deviceid between 88 and 91"</span> --no-create-info &gt; output_technics_91.sql</span><br></pre></td></tr></table></figure></div><h3 id="数据库备份文件还原"><a href="#数据库备份文件还原" class="headerlink" title="数据库备份文件还原"></a>数据库备份文件还原</h3><h4 id="还原指定表"><a href="#还原指定表" class="headerlink" title="还原指定表"></a>还原指定表</h4><ul><li><p>mysqldump备份的历史数据库文件(.sql)，不想恢复整个数据库，只想取出其中一张表</p><p>原理是使用 <code>sed</code> 工具</p></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n -e <span class="string">'/CREATE TABLE `biz_order_child`/,/UNLOCK TABLES/p'</span> dengqimes20240118000001.sql &gt; orderchild.sql</span><br></pre></td></tr></table></figure></div><p>或者</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n -e <span class="string">'/Table structure for.*`biz_order_child/,/Table structure for/p'</span> dengqimes20250207000001.sql &gt; biz_order_child.sql</span><br></pre></td></tr></table></figure></div><p>或者</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n -e <span class="string">'/DROP TABLE IF EXISTS `biz_product`/,/UNLOCK TABLES/p'</span> cloudmes20241121000001.sql &gt; biz_product.sql</span><br></pre></td></tr></table></figure></div><ul><li><p>mysql还原备份的sql时，可能由于字符集编码和转义问题会报错</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql --database=dengqimesprod --user=root --host=127.0.0.1 --port=3306 &lt; C:\Users\zhiyin\Downloads\dengqimes20240311.sql</span><br><span class="line">ERROR at line 33162: Unknown <span class="built_in">command</span> <span class="string">'\"'</span>.</span><br></pre></td></tr></table></figure></div><p>需要指定字符集和数据库的字符集一样</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --database=dengqimes --user=root -p --host=127.0.0.1 --port=3306  --default-character-set=utf8mb4 &lt; C:\Users\zhiyin\Downloads\dengqimes20240413.sql</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="SQL" scheme="https://xiaoyan94.github.io/tags/SQL/"/>
    
    <category term="数据库" scheme="https://xiaoyan94.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>使用Node.js后台读取串口数据并通过WebSocket实时显示在网页上</title>
    <link href="https://xiaoyan94.github.io/2023/02/13/%E4%BD%BF%E7%94%A8Node-js%E5%90%8E%E5%8F%B0%E8%AF%BB%E5%8F%96%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE%E5%B9%B6%E9%80%9A%E8%BF%87WebSocket%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%8A/"/>
    <id>https://xiaoyan94.github.io/2023/02/13/%E4%BD%BF%E7%94%A8Node-js%E5%90%8E%E5%8F%B0%E8%AF%BB%E5%8F%96%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE%E5%B9%B6%E9%80%9A%E8%BF%87WebSocket%E5%AE%9E%E6%97%B6%E6%98%BE%E7%A4%BA%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%8A/</id>
    <published>2023-02-13T07:27:39.000Z</published>
    <updated>2023-02-25T00:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下使用 Node.js 后台读取串口数据并通过 WebSocket 实时显示在网页上的方法，可以使用以下步骤：</p><ol><li>使用第三方库 serialport 读取串口数据</li><li>安装 WebSocket 服务器，例如 ws 库</li><li>创建 WebSocket 服务器，并监听客户端连接</li><li>在每次读取到串口数据时，通过 WebSocket 发送数据到客户端</li><li>在客户端，使用 JavaScript 更新 HTML 元素的属性值</li></ol><p>以下是一个简单的示例：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Node.js 后台代码</span></span><br><span class="line"><span class="keyword">const</span> SerialPort = <span class="built_in">require</span>(<span class="string">'serialport'</span>);</span><br><span class="line"><span class="keyword">const</span> ReadLine = <span class="built_in">require</span>(<span class="string">'@serialport/parser-readline'</span>);</span><br><span class="line"><span class="keyword">const</span> WebSocket = <span class="built_in">require</span>(<span class="string">'ws'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个串口解析器</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="keyword">new</span> SerialPort(<span class="string">'COM3'</span>, &#123; <span class="attr">baudRate</span>: <span class="number">9600</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> parser = port.pipe(<span class="keyword">new</span> ReadLine(&#123; <span class="attr">delimiter</span>: <span class="string">'\r\n'</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 WebSocket 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="keyword">new</span> WebSocket.Server(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听客户端连接</span></span><br><span class="line">server.on(<span class="string">'connection'</span>, (socket) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在读取到串口数据时，发送数据到客户端</span></span><br><span class="line">  parser.on(<span class="string">'data'</span>, (data) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 解析读取到的数据</span></span><br><span class="line">    <span class="keyword">const</span> target = data.split(<span class="string">'  '</span>)[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 通过 WebSocket 发送数据到客户端</span></span><br><span class="line">    socket.send(target);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端 JavaScript 代码</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://localhost:8080'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 WebSocket 接收到的数据</span></span><br><span class="line">socket.onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 更新 HTML 元素的属性值</span></span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'test'</span>).value = event.data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>注意：在这个示例代码中，我们假设“数据格式为文本字符，形如0  00   xxx  00，获取其中的xxx”</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="WebSocket" scheme="https://xiaoyan94.github.io/tags/WebSocket/"/>
    
    <category term="Node.js" scheme="https://xiaoyan94.github.io/tags/Node-js/"/>
    
    <category term="Serial Port" scheme="https://xiaoyan94.github.io/tags/Serial-Port/"/>
    
  </entry>
  
  <entry>
    <title>作为用户，修改Cookie有效期，延长Cookie期限</title>
    <link href="https://xiaoyan94.github.io/2023/02/09/%E4%BD%9C%E4%B8%BA%E7%94%A8%E6%88%B7%EF%BC%8C%E4%BF%AE%E6%94%B9Cookie%E6%9C%89%E6%95%88%E6%9C%9F%EF%BC%8C%E5%BB%B6%E9%95%BFCookie%E6%9C%9F%E9%99%90/"/>
    <id>https://xiaoyan94.github.io/2023/02/09/%E4%BD%9C%E4%B8%BA%E7%94%A8%E6%88%B7%EF%BC%8C%E4%BF%AE%E6%94%B9Cookie%E6%9C%89%E6%95%88%E6%9C%9F%EF%BC%8C%E5%BB%B6%E9%95%BFCookie%E6%9C%9F%E9%99%90/</id>
    <published>2023-02-09T03:21:12.000Z</published>
    <updated>2023-02-09T04:43:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浏览器中手动修改cookie的有效期"><a href="#浏览器中手动修改cookie的有效期" class="headerlink" title="浏览器中手动修改cookie的有效期"></a>浏览器中手动修改cookie的有效期</h2><p>网站可以使用Cookie验证身份，从而可以实现关闭游客访问。</p><p>作为用户，若网站关闭了游客访问，且Cookie到期以后，就无法继续访问该网站。</p><p>可以在浏览器客户端手动设置Cookie的过期时间，从而延长登录有效期。</p><p>以Chrome浏览器为例，按<code>F12</code>打开开发者工具，找到网站Cookie手动修改过期时间。</p><p><img src="/2023/02/09/%E4%BD%9C%E4%B8%BA%E7%94%A8%E6%88%B7%EF%BC%8C%E4%BF%AE%E6%94%B9Cookie%E6%9C%89%E6%95%88%E6%9C%9F%EF%BC%8C%E5%BB%B6%E9%95%BFCookie%E6%9C%9F%E9%99%90/2023-02-09-12-19-19.png" alt="按`F12`打开开发者工具，找到网站Cookie手动修改过期时间。"></p><h2 id="相关知识之会话cookie"><a href="#相关知识之会话cookie" class="headerlink" title="相关知识之会话cookie"></a>相关知识之会话cookie</h2><a id="more"></a><p>HTTP响应标头 <strong><code>Set-Cookie</code></strong> 字段被用来由服务器端向用户代理发送 cookie，所以用户代理可在后续的请求中将其发送回服务器。</p><p>PS：服务器要发送多个 cookie，则应该在同一响应中发送多个 <strong><code>Set-Cookie</code></strong> 标头。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie#%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener">HTTP响应头中设置Cookie的语法:</a></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="HTTP"><figure class="iseeu highlight /http"><figcaption><span>response header</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;</span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Expires=&lt;date&gt;</span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Max-Age=&lt;number&gt;</span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;</span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Path=&lt;path-value&gt;</span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Secure</span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; HttpOnly</span><br><span class="line"></span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; SameSite=Strict</span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; SameSite=Lax</span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; SameSite=None; Secure</span><br><span class="line"></span><br><span class="line">// Multiple attributes are also possible, for example:</span><br><span class="line"><span class="attribute">Set-Cookie</span>: &lt;cookie-name&gt;=&lt;cookie-value&gt;; Domain=&lt;domain-value&gt;; Secure; HttpOnly</span><br></pre></td></tr></table></figure></div><p><strong>Cookie有效期</strong>相关属性的介绍：</p><ul><li><p><code>Expires=&lt;date&gt;</code> <em>可选</em></p><ul><li><p>: cookie 的最长有效时间，形式为符合 HTTP-date 规范的时间戳。参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Date" target="_blank" rel="noopener"><code>Date</code></a> 可以获取详细信息。</p><p>如果没有设置这个属性，那么表示这是一个<strong>会话期 cookie</strong>。一个会话结束于客户端被关闭时，这意味着会话期 cookie 在彼时会被移除。</p><p><strong>警告：</strong> 然而，很多 Web 浏览器支持会话恢复功能，这个功能可以使浏览器保留所有的 tab 标签，然后在重新打开浏览器的时候将其还原。与此同时，cookie 也会恢复，就跟从来没有关闭浏览器一样。</p><p>如果设置了 <code>Expires</code> 属性，其截止时间与<em>客户端</em>相关，而非服务器的时间。</p></li></ul></li><li><p><code>Max-Age=&lt;number&gt;</code> <em>可选</em></p><ul><li>: 在 cookie 失效之前需要经过的秒数。秒数为 0 或 -1 将会使 cookie 直接过期。假如 <code>Expires</code> 和 <code>Max-Age</code> 属性均存在，那么 <code>Max-Age</code> 的优先级更高。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;浏览器中手动修改cookie的有效期&quot;&gt;&lt;a href=&quot;#浏览器中手动修改cookie的有效期&quot; class=&quot;headerlink&quot; title=&quot;浏览器中手动修改cookie的有效期&quot;&gt;&lt;/a&gt;浏览器中手动修改cookie的有效期&lt;/h2&gt;&lt;p&gt;网站可以使用Cookie验证身份，从而可以实现关闭游客访问。&lt;/p&gt;
&lt;p&gt;作为用户，若网站关闭了游客访问，且Cookie到期以后，就无法继续访问该网站。&lt;/p&gt;
&lt;p&gt;可以在浏览器客户端手动设置Cookie的过期时间，从而延长登录有效期。&lt;/p&gt;
&lt;p&gt;以Chrome浏览器为例，按&lt;code&gt;F12&lt;/code&gt;打开开发者工具，找到网站Cookie手动修改过期时间。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/02/09/%E4%BD%9C%E4%B8%BA%E7%94%A8%E6%88%B7%EF%BC%8C%E4%BF%AE%E6%94%B9Cookie%E6%9C%89%E6%95%88%E6%9C%9F%EF%BC%8C%E5%BB%B6%E9%95%BFCookie%E6%9C%9F%E9%99%90/2023-02-09-12-19-19.png&quot; alt=&quot;按`F12`打开开发者工具，找到网站Cookie手动修改过期时间。&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;相关知识之会话cookie&quot;&gt;&lt;a href=&quot;#相关知识之会话cookie&quot; class=&quot;headerlink&quot; title=&quot;相关知识之会话cookie&quot;&gt;&lt;/a&gt;相关知识之会话cookie&lt;/h2&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://xiaoyan94.github.io/tags/JavaScript/"/>
    
    <category term="Cookie" scheme="https://xiaoyan94.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>终端命令网络设置</title>
    <link href="https://xiaoyan94.github.io/2023/02/08/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E4%BB%A3%E7%90%86/"/>
    <id>https://xiaoyan94.github.io/2023/02/08/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E4%BB%A3%E7%90%86/</id>
    <published>2023-02-08T06:17:51.000Z</published>
    <updated>2023-02-08T07:32:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="终端设置代理"><a href="#终端设置代理" class="headerlink" title="终端设置代理"></a>终端设置代理</h2><ol><li><p>Linux&#x2F;macOS bash&#x2F;Windows Git Bash终端</p><ol><li>使用 <code>export https_proxy=http://127.0.0.1:7890;export http_proxy=http://127.0.0.1:7890;export all_proxy=socks5://127.0.0.1:7890</code> 设置环境变量</li><li>使用 <code>curl -verbose ip.gs</code> 命令进行检查是否设置成功。</li></ol><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> https_proxy=http://127.0.0.1:7890;<span class="built_in">export</span> http_proxy=http://127.0.0.1:7890;<span class="built_in">export</span> all_proxy=socks5://127.0.0.1:7890</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -verbose ip.gs</span></span><br><span class="line">* Uses proxy env variable http_proxy == 'http://127.0.0.1:7890'</span><br><span class="line">*   Trying 127.0.0.1:7890...</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 7890 (#0)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> GET http://ip.gs/ HTTP/1.1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Host: ip.gs</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> User-Agent: curl/7.84.0</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Accept: */*</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Referer: rbose</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> Proxy-Connection: Keep-Alive</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Cache-Control: no-cache</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; Content-Type: text/plain</span><br><span class="line">&lt; Date: Wed, 08 Feb 2023 06:01:21 GMT</span><br><span class="line">&lt; Keep-Alive: timeout=4</span><br><span class="line">&lt; Proxy-Connection: keep-alive</span><br><span class="line">&lt; Server: nginx</span><br><span class="line">&lt; Vary: Accept-Encoding</span><br><span class="line">&lt;</span><br><span class="line">2607:f130:0:手动马赛克::d891:eccc</span><br><span class="line">* Connection #0 to host 127.0.0.1 left intact</span><br></pre></td></tr></table></figure></div></li><li><p>Windows CMD终端</p><ol><li>使用 <code>set http_proxy=http://127.0.0.1:7890 &amp; set https_proxy=http://127.0.0.1:7890</code> 设置环境变量</li><li>使用 <code>curl -vvvk https://google.com</code> 命令进行检查是否设置成功。 <a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">R00004050</span>&gt;<span class="title">set</span> <span class="title">http_proxy</span>=<span class="title">http</span>://127.0.0.1:7890 &amp; <span class="title">set</span> <span class="title">https_proxy</span>=<span class="title">http</span>://127.0.0.1:7890</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">R00004050</span>&gt;<span class="title">curl</span> -<span class="title">vvvk</span> <span class="title">https</span>://<span class="title">google.com</span></span></span><br><span class="line"><span class="function">* <span class="title">Uses</span> <span class="title">proxy</span> <span class="title">env</span> <span class="title">variable</span> <span class="title">https_proxy</span> == '<span class="title">http</span>://127.0.0.1:7890'</span></span><br><span class="line"><span class="function">*   <span class="title">Trying</span> 127.0.0.1:7890...</span></span><br><span class="line"><span class="function">* <span class="title">Connected</span> <span class="title">to</span> 127.0.0.1 (127.0.0.1) <span class="title">port</span> 7890 (#0)</span></span><br><span class="line"><span class="function">* <span class="title">allocate</span> <span class="title">connect</span> <span class="title">buffer</span></span></span><br><span class="line"><span class="function">* <span class="title">Establish</span> <span class="title">HTTP</span> <span class="title">proxy</span> <span class="title">tunnel</span> <span class="title">to</span> <span class="title">google.com</span>:443</span></span><br><span class="line"><span class="function">&gt; <span class="title">CONNECT</span> <span class="title">google.com</span>:443 <span class="title">HTTP</span>/1.1</span></span><br><span class="line"><span class="function">&gt; <span class="title">Host</span>: <span class="title">google.com</span>:443</span></span><br><span class="line"><span class="function">&gt; <span class="title">User</span>-<span class="title">Agent</span>: <span class="title">curl</span>/7.83.1</span></span><br><span class="line"><span class="function">&gt; <span class="title">Proxy</span>-<span class="title">Connection</span>: <span class="title">Keep</span>-<span class="title">Alive</span></span></span><br><span class="line"><span class="function">&gt;</span></span><br><span class="line"><span class="function">&lt; <span class="title">HTTP</span>/1.1 200 <span class="title">Connection</span> <span class="title">established</span></span></span><br><span class="line"><span class="function">&lt;</span></span><br><span class="line"><span class="function">* <span class="title">Proxy</span> <span class="title">replied</span> 200 <span class="title">to</span> <span class="title">CONNECT</span> <span class="title">request</span></span></span><br><span class="line"><span class="function">* <span class="title">CONNECT</span> <span class="title">phase</span> <span class="title">completed</span></span></span><br><span class="line"><span class="function">* <span class="title">schannel</span>: <span class="title">disabled</span> <span class="title">automatic</span> <span class="title">use</span> <span class="title">of</span> <span class="title">client</span> <span class="title">certificate</span></span></span><br><span class="line"><span class="function">* <span class="title">ALPN</span>: <span class="title">offers</span> <span class="title">http</span>/1.1</span></span><br><span class="line"><span class="function">* <span class="title">ALPN</span>: <span class="title">server</span> <span class="title">accepted</span> <span class="title">http</span>/1.1</span></span><br><span class="line"><span class="function">&gt; <span class="title">GET</span> / <span class="title">HTTP</span>/1.1</span></span><br><span class="line"><span class="function">&gt; <span class="title">Host</span>: <span class="title">google.com</span></span></span><br><span class="line"><span class="function">&gt; <span class="title">User</span>-<span class="title">Agent</span>: <span class="title">curl</span>/7.83.1</span></span><br><span class="line"><span class="function">&gt; <span class="title">Accept</span>: */*</span></span><br><span class="line"><span class="function">&gt;</span></span><br><span class="line"><span class="function">* <span class="title">Mark</span> <span class="title">bundle</span> <span class="title">as</span> <span class="title">not</span> <span class="title">supporting</span> <span class="title">multiuse</span></span></span><br><span class="line"><span class="function">&lt; <span class="title">HTTP</span>/1.1 301 <span class="title">Moved</span> <span class="title">Permanently</span></span></span><br><span class="line"><span class="function">&lt; <span class="title">Location</span>: <span class="title">https</span>://<span class="title">www.google.com</span>/</span></span><br><span class="line"><span class="function">&lt; <span class="title">Content</span>-<span class="title">Type</span>: <span class="title">text</span>/<span class="title">html</span>; <span class="title">charset</span>=<span class="title">UTF</span>-8</span></span><br><span class="line"><span class="function">&lt; <span class="title">Date</span>: <span class="title">Wed</span>, 08 <span class="title">Feb</span> 2023 06:52:11 <span class="title">GMT</span></span></span><br><span class="line"><span class="function">&lt; <span class="title">Expires</span>: <span class="title">Fri</span>, 10 <span class="title">Mar</span> 2023 06:52:11 <span class="title">GMT</span></span></span><br><span class="line"><span class="function">&lt; <span class="title">Cache</span>-<span class="title">Control</span>: <span class="title">public</span>, <span class="title">max</span>-<span class="title">age</span>=2592000</span></span><br><span class="line"><span class="function">&lt; <span class="title">Server</span>: <span class="title">gws</span></span></span><br><span class="line"><span class="function">&lt; <span class="title">Content</span>-<span class="title">Length</span>: 220</span></span><br><span class="line"><span class="function">&lt; <span class="title">X</span>-<span class="title">XSS</span>-<span class="title">Protection</span>: 0</span></span><br><span class="line"><span class="function">&lt; <span class="title">X</span>-<span class="title">Frame</span>-<span class="title">Options</span>: <span class="title">SAMEORIGIN</span></span></span><br><span class="line"><span class="function">&lt; <span class="title">Alt</span>-<span class="title">Svc</span>: <span class="title">h3</span>=":443"; <span class="title">ma</span>=2592000,<span class="title">h3</span>-29=":443"; <span class="title">ma</span>=2592000</span></span><br><span class="line"><span class="function">&lt;</span></span><br><span class="line"><span class="function">&lt;<span class="title">HTML</span>&gt;&lt;<span class="title">HEAD</span>&gt;&lt;<span class="title">meta</span> <span class="title">http</span>-<span class="title">equiv</span>="<span class="title">content</span>-<span class="title">type</span>" <span class="title">content</span>="<span class="title">text</span>/<span class="title">html</span>;<span class="title">charset</span>=<span class="title">utf</span>-8"&gt;</span></span><br><span class="line"><span class="function">&lt;<span class="title">TITLE</span>&gt;301 <span class="title">Moved</span>&lt;/<span class="title">TITLE</span>&gt;&lt;/<span class="title">HEAD</span>&gt;&lt;<span class="title">BODY</span>&gt;</span></span><br><span class="line"><span class="function">&lt;<span class="title">H1</span>&gt;301 <span class="title">Moved</span>&lt;/<span class="title">H1</span>&gt;</span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">document</span> <span class="title">has</span> <span class="title">moved</span></span></span><br><span class="line"><span class="function">&lt;<span class="title">A</span> <span class="title">HREF</span>="<span class="title">https</span>://<span class="title">www.google.com</span>/"&gt;<span class="title">here</span>&lt;/<span class="title">A</span>&gt;.</span></span><br><span class="line"><span class="function">&lt;/<span class="title">BODY</span>&gt;&lt;/<span class="title">HTML</span>&gt;</span></span><br><span class="line"><span class="function">* <span class="title">Connection</span> #0 <span class="title">to</span> <span class="title">host</span> 127.0.0.1 <span class="title">left</span> <span class="title">intact</span></span></span><br></pre></td></tr></table></figure></div></li></ol><p> 一些参数解释</p><ul><li>-v verbose (print errors&#x2F;warnings while in event loop)</li><li>-vv very verbose (also print client commands&#x2F;reponses)</li><li>-vvv extremely verbose (also print internal state transitions)</li><li>-k 关闭SSL证书检查</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;终端设置代理&quot;&gt;&lt;a href=&quot;#终端设置代理&quot; class=&quot;headerlink&quot; title=&quot;终端设置代理&quot;&gt;&lt;/a&gt;终端设置代理&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Linux&amp;#x2F;macOS bash&amp;#x2F;Windows Git Bash终端&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;export https_proxy=http://127.0.0.1:7890;export http_proxy=http://127.0.0.1:7890;export all_proxy=socks5://127.0.0.1:7890&lt;/code&gt; 设置环境变量&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;curl -verbose ip.gs&lt;/code&gt; 命令进行检查是否设置成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; &lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; https_proxy=http://127.0.0.1:7890;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; http_proxy=http://127.0.0.1:7890;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; all_proxy=socks5://127.0.0.1:7890&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; curl -verbose ip.gs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Uses proxy env variable http_proxy == &#39;http://127.0.0.1:7890&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*   Trying 127.0.0.1:7890...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Connected to 127.0.0.1 (127.0.0.1) port 7890 (#0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; GET http://ip.gs/ HTTP/1.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; Host: ip.gs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; User-Agent: curl/7.84.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; Accept: */*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; Referer: rbose&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; Proxy-Connection: Keep-Alive&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Mark bundle as not supporting multiuse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; HTTP/1.1 200 OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Transfer-Encoding: chunked&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Cache-Control: no-cache&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Connection: keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Content-Type: text/plain&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Date: Wed, 08 Feb 2023 06:01:21 GMT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Keep-Alive: timeout=4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Proxy-Connection: keep-alive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Server: nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Vary: Accept-Encoding&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2607:f130:0:手动马赛克::d891:eccc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* Connection #0 to host 127.0.0.1 left intact&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows CMD终端&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 &lt;code&gt;set http_proxy=http://127.0.0.1:7890 &amp;amp; set https_proxy=http://127.0.0.1:7890&lt;/code&gt; 设置环境变量&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;curl -vvvk https://google.com&lt;/code&gt; 命令进行检查是否设置成功。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Git Bash" scheme="https://xiaoyan94.github.io/tags/Git-Bash/"/>
    
    <category term="终端" scheme="https://xiaoyan94.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Windows系统C盘清理工具FreeMove及文件占用进程查看软件LockHunter配合使用</title>
    <link href="https://xiaoyan94.github.io/2023/01/18/Windows%E7%B3%BB%E7%BB%9FC%E7%9B%98%E6%B8%85%E7%90%86%E5%B7%A5%E5%85%B7FreeMove%E5%8F%8A%E6%96%87%E4%BB%B6%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E6%9F%A5%E7%9C%8B%E8%BD%AF%E4%BB%B6LockHunter%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaoyan94.github.io/2023/01/18/Windows%E7%B3%BB%E7%BB%9FC%E7%9B%98%E6%B8%85%E7%90%86%E5%B7%A5%E5%85%B7FreeMove%E5%8F%8A%E6%96%87%E4%BB%B6%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E6%9F%A5%E7%9C%8B%E8%BD%AF%E4%BB%B6LockHunter%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/</id>
    <published>2023-01-18T01:32:29.000Z</published>
    <updated>2023-01-18T03:27:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>三款软件、按顺序使用即可，无损移动C盘文件至其他盘，不影响使用。</p><ol><li><a href="http://www.uderzo.it/main_products/space_sniffer/download.html" target="_blank" rel="noopener">SpaceSniffer 磁盘文件大小可视化分析，找到大文件夹</a></li><li><a href="https://lockhunter.com/download.htm" target="_blank" rel="noopener">LockHunter 解除文件进程占用</a></li><li><a href="https://github.com/imDema/FreeMove/releases" target="_blank" rel="noopener">FreeMove 建立软链接的方式移动C盘大文件夹至其他盘</a></li></ol><p><img src="/2023/01/18/Windows%E7%B3%BB%E7%BB%9FC%E7%9B%98%E6%B8%85%E7%90%86%E5%B7%A5%E5%85%B7FreeMove%E5%8F%8A%E6%96%87%E4%BB%B6%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E6%9F%A5%E7%9C%8B%E8%BD%AF%E4%BB%B6LockHunter%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/2023-01-18-11-02-47.png" alt="SpaceSniffer软件截图"></p><a id="more"></a><p><img src="/2023/01/18/Windows%E7%B3%BB%E7%BB%9FC%E7%9B%98%E6%B8%85%E7%90%86%E5%B7%A5%E5%85%B7FreeMove%E5%8F%8A%E6%96%87%E4%BB%B6%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E6%9F%A5%E7%9C%8B%E8%BD%AF%E4%BB%B6LockHunter%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/2023-01-18-11-24-09.png" alt="LockHunter查看文件被进程占用情况"></p><p><img src="/2023/01/18/Windows%E7%B3%BB%E7%BB%9FC%E7%9B%98%E6%B8%85%E7%90%86%E5%B7%A5%E5%85%B7FreeMove%E5%8F%8A%E6%96%87%E4%BB%B6%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E6%9F%A5%E7%9C%8B%E8%BD%AF%E4%BB%B6LockHunter%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/2023-01-18-11-25-53.png" alt="解除进程占用后，使用FreeMove移动文件夹"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;三款软件、按顺序使用即可，无损移动C盘文件至其他盘，不影响使用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.uderzo.it/main_products/space_sniffer/download.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SpaceSniffer 磁盘文件大小可视化分析，找到大文件夹&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lockhunter.com/download.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LockHunter 解除文件进程占用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/imDema/FreeMove/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FreeMove 建立软链接的方式移动C盘大文件夹至其他盘&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;/2023/01/18/Windows%E7%B3%BB%E7%BB%9FC%E7%9B%98%E6%B8%85%E7%90%86%E5%B7%A5%E5%85%B7FreeMove%E5%8F%8A%E6%96%87%E4%BB%B6%E5%8D%A0%E7%94%A8%E8%BF%9B%E7%A8%8B%E6%9F%A5%E7%9C%8B%E8%BD%AF%E4%BB%B6LockHunter%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8/2023-01-18-11-02-47.png&quot; alt=&quot;SpaceSniffer软件截图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="电脑" scheme="https://xiaoyan94.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>检测断网自动重连WiFi脚本</title>
    <link href="https://xiaoyan94.github.io/2023/01/14/AutoReconnectWiFi/"/>
    <id>https://xiaoyan94.github.io/2023/01/14/AutoReconnectWiFi/</id>
    <published>2023-01-14T00:46:32.000Z</published>
    <updated>2023-01-14T00:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司网络出毛病老是隔段时间就自动断开连接，写了这个批处理脚本可以自动检测网络状态、断网自动重连WiFi，并记录断网重连日志。</p><a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BAT"><figure class="iseeu highlight /bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> "%<span class="number">1</span>"=="h" <span class="keyword">goto</span> begin</span><br><span class="line"><span class="built_in">start</span> mshta vbscript:createobject("wscript.shell").run("""%~nx0"" h",<span class="number">0</span>)(window.close)&amp;&amp;<span class="keyword">exit</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%DATE%</span><span class="variable">%TIME%</span></span><br><span class="line"><span class="built_in">echo</span> WIFI自动重连服务正在进行中.......</span><br><span class="line"><span class="built_in">echo</span> 停止服务请按 Ctrl+C</span><br><span class="line">:begin</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%date%</span> <span class="variable">%time%</span></span><br><span class="line"><span class="built_in">ping</span> google.com</span><br><span class="line"><span class="comment">rem echo %errorlevel%</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">1</span> <span class="keyword">goto</span> flushdns</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">0</span> <span class="built_in">echo</span> DNS google.com 解析正常...</span><br><span class="line"><span class="keyword">goto</span> loop</span><br><span class="line"></span><br><span class="line">:flushdns</span><br><span class="line"><span class="built_in">echo</span> 尝试刷新DNS.......</span><br><span class="line"><span class="built_in">ipconfig</span> /flushdns</span><br><span class="line"><span class="comment">rem echo %errorlevel%</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">0</span> <span class="keyword">goto</span> ping2</span><br><span class="line"><span class="keyword">goto</span> loop</span><br><span class="line"></span><br><span class="line">:ping2</span><br><span class="line"><span class="comment">@REM ping 10.20.30.40</span></span><br><span class="line"><span class="built_in">ping</span> baidu.com</span><br><span class="line"><span class="comment">rem echo %errorlevel%</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">1</span> <span class="keyword">goto</span> reconnect</span><br><span class="line"><span class="keyword">if</span> <span class="variable">%errorlevel%</span>==<span class="number">0</span> <span class="built_in">echo</span> baidu.com 连接检测正常...</span><br><span class="line"><span class="keyword">goto</span> loop</span><br><span class="line"></span><br><span class="line">:reconnect</span><br><span class="line"><span class="built_in">echo</span> ------------------------------------------------------------------ &gt;&gt; log.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%date%</span> <span class="variable">%time%</span> 检测到断网状态，尝试重连中... &gt;&gt; log.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%date%</span> <span class="variable">%time%</span> 执行网络主动断开命令 &gt;&gt; log.txt</span><br><span class="line">netsh wlan disconnect</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%date%</span> <span class="variable">%time%</span> 正在重新连接中.... &gt;&gt; log.txt</span><br><span class="line">netsh wlan connect ssid=Google name=Google</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%date%</span> <span class="variable">%time%</span> 已发送连接请求....ssid=Google &gt;&gt; log.txt</span><br><span class="line"><span class="keyword">goto</span> loop</span><br><span class="line"> </span><br><span class="line">:loop</span><br><span class="line">timeout <span class="number">60</span></span><br><span class="line"><span class="built_in">cls</span></span><br><span class="line"><span class="keyword">goto</span> begin</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近公司网络出毛病老是隔段时间就自动断开连接，写了这个批处理脚本可以自动检测网络状态、断网自动重连WiFi，并记录断网重连日志。&lt;/p&gt;</summary>
    
    
    
    
    <category term="脚本" scheme="https://xiaoyan94.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript使用 Web Serial API获取串行设备端口数据(地磅串口数据)</title>
    <link href="https://xiaoyan94.github.io/2022/11/18/JavaScript%E4%BD%BF%E7%94%A8-Web-Serial-API%E8%8E%B7%E5%8F%96%E4%B8%B2%E8%A1%8C%E8%AE%BE%E5%A4%87%E7%AB%AF%E5%8F%A3%E6%95%B0%E6%8D%AE-%E5%9C%B0%E7%A3%85%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE/"/>
    <id>https://xiaoyan94.github.io/2022/11/18/JavaScript%E4%BD%BF%E7%94%A8-Web-Serial-API%E8%8E%B7%E5%8F%96%E4%B8%B2%E8%A1%8C%E8%AE%BE%E5%A4%87%E7%AB%AF%E5%8F%A3%E6%95%B0%E6%8D%AE-%E5%9C%B0%E7%A3%85%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE/</id>
    <published>2022-11-18T13:10:15.000Z</published>
    <updated>2023-02-08T05:39:24.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87">前期准备</a></li><li><a href="#%E8%B5%84%E6%BA%90%E9%93%BE%E6%8E%A5">资源链接</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B">代码示例</a><ul><li><a href="#%E6%A3%80%E6%9F%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81">检查浏览器是否支持</a></li><li><a href="#%E6%89%93%E5%BC%80%E4%B8%B2%E8%A1%8C%E7%AB%AF%E5%8F%A3">打开串行端口</a></li></ul></li><li><a href="#%E5%9C%B0%E7%A3%85%E8%AF%BB%E6%95%B0%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B">地磅读数代码示例</a></li><li><a href="#chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%85%8D%E7%BD%AE%E5%9C%A8http%E5%8D%8F%E8%AE%AE%E4%BD%BF%E7%94%A8web%E4%B8%B2%E8%A1%8Capi">chrome浏览器配置在http协议使用web串行api</a></li></ul><a id="more"></a><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><ol><li>学习 <strong>Web Serial API</strong></li><li>下载串口模拟工具 VSPD，用于建立虚拟串口对</li><li>下载串口调试精灵，用于调试，包括打开、关闭串口，发送、接收数据等</li><li>编写 js 代码，读取串口数据</li></ol><h2 id="资源链接"><a href="#资源链接" class="headerlink" title="资源链接"></a>资源链接</h2><ol><li><a href="https://cn.bing.com/search?q=VSPD" target="_blank" rel="noopener">VSPD</a></li><li><a href="https://cn.bing.com/search?q=%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95%E7%B2%BE%E7%81%B5" target="_blank" rel="noopener">串口调试精灵</a></li><li><a href="https://cn.bing.com/search?q=Chrome%20Web%20Serial%20API" target="_blank" rel="noopener">Web Serial API</a></li></ol><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="检查浏览器是否支持"><a href="#检查浏览器是否支持" class="headerlink" title="检查浏览器是否支持"></a>检查浏览器是否支持</h3><p>只有浏览器支持 <strong>Web Serial API</strong> 才能通过 JavaScript 代码访问串口设备。要检查是否支持 Web Serial API，请使用：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"serial"</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="comment">// 支持 Web 串行 API。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="打开串行端口"><a href="#打开串行端口" class="headerlink" title="打开串行端口"></a>打开串行端口</h3><p>Web Serial API 在设计上是异步的。这可以防止网站 UI 在等待输入时阻塞。要打开串行端口，首先访问一个 SerialPort 对象。为此，可以通过调用 <code>navigator.serial.requestPort()</code> 以响应用户手势（例如触摸或鼠标单击）来提示用户选择单个串行端口，或者从返回的 <code>navigator.serial.getPorts()</code> 中选择一个网站已被授予访问权限的串行端口列表。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'button'</span>).addEventListener(<span class="string">'click'</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 提示用户选择任意串口。</span></span><br><span class="line">  <span class="keyword">const</span> port = <span class="keyword">await</span> navigator.serial.requestPort();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取用户之前授予网站访问权限的所有串行端口。</span></span><br><span class="line"><span class="keyword">const</span> ports = <span class="keyword">await</span> navigator.serial.getPorts();</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提示用户选择任意串口。</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="keyword">await</span> navigator.serial.requestPort();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待串口打开。波特率 9600</span></span><br><span class="line"><span class="keyword">await</span> port.open(&#123; <span class="attr">baudRate</span>: <span class="number">9600</span> &#125;);</span><br></pre></td></tr></table></figure></div><p>还可以在打开串行端口时指定以下任何选项。这些选项是可选的，<a href="https://wicg.github.io/serial/#serialoptions-dictionary" target="_blank" rel="noopener">查看默认值</a>。</p><ul><li><code>dataBits</code>: 每帧的数据位数（7 或 8）。</li><li><code>stopBits</code>: 帧末尾的停止位数（1 或 2）。</li><li><code>parity</code>: 奇偶校验模式（<code>&quot;none&quot;</code>, <code>&quot;even&quot;</code> 或者 <code>&quot;odd&quot;</code>）。</li><li><code>bufferSize</code>: 应创建的读写缓冲区的大小（必须小于 16MB）。</li><li><code>flowControl</code>：流量控制模式（<code>&quot;none&quot;</code> 或 <code>&quot;hardware&quot;</code>）。</li></ul><h2 id="地磅读数代码示例"><a href="#地磅读数代码示例" class="headerlink" title="地磅读数代码示例"></a>地磅读数代码示例</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = <span class="built_in">window</span>.$;</span><br><span class="line">$find = <span class="built_in">window</span>.$find;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">"serial"</span> <span class="keyword">in</span> navigator)) &#123;</span><br><span class="line">        alertError(<span class="string">"无法使用"</span>, <span class="string">"该浏览器不支持读取串口设备，请更换Chrome浏览器！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置全局变量</span></span><br><span class="line">    <span class="built_in">window</span>.weightValues = []; <span class="comment">//存储最近三次称重值</span></span><br><span class="line">    <span class="built_in">window</span>.sameCount = <span class="number">3</span>; <span class="comment">//3 // weightValues数组的大小</span></span><br><span class="line">    <span class="built_in">window</span>.r1 = <span class="regexp">/\)0\s&#123;1,9&#125;(\d*)\s&#123;1,9&#125;\d\d/g</span>; <span class="comment">//使用正则表达式匹配读数</span></span><br><span class="line"></span><br><span class="line">    setRadRadioButtonList();</span><br><span class="line">    setHideOrShow();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRadRadioButtonList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//if ($find("RadRadioButtonList").get_selectedIndex() === -1) &#123;</span></span><br><span class="line">    <span class="comment">//    //若未选，则选中第一次称重</span></span><br><span class="line">    <span class="comment">//    //$find("RadRadioButtonList").set_selectedIndex(0);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">////添加切换事件</span></span><br><span class="line">    <span class="comment">//$find("RadRadioButtonList").add_selectedIndexChanged(setHideOrShow);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断第几次称重要显示的控件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHideOrShow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*const label = $("#RadLabelReadingTip")[0];*/</span></span><br><span class="line">    <span class="comment">//console.log(i.get_selectedIndex());</span></span><br><span class="line">    <span class="comment">//switch ($find("RadRadioButtonList").get_selectedIndex()) &#123;</span></span><br><span class="line">    <span class="comment">//    case 0:</span></span><br><span class="line">    <span class="comment">//        //第一次称重 毛重读数</span></span><br><span class="line">    <span class="comment">//        //label.setHTML(label.getInnerHTML().replace("皮重", "毛重"));</span></span><br><span class="line">    <span class="comment">//        $("#carNumberDiv").show();</span></span><br><span class="line">    <span class="comment">//        $("#containerDeductionDiv").show();</span></span><br><span class="line">    <span class="comment">//        $("#trayDeductionDiv").hide();</span></span><br><span class="line">    <span class="comment">//        $("#InputArea").css("background-color", "orange");</span></span><br><span class="line">    <span class="comment">//        $("#tareWeightDiv").hide();</span></span><br><span class="line">    <span class="comment">//        $("#grossWeightDiv").show();</span></span><br><span class="line">    <span class="comment">//        break;</span></span><br><span class="line">    <span class="comment">//    case 1:</span></span><br><span class="line">    <span class="comment">//        //第二次称重 皮重</span></span><br><span class="line">    <span class="comment">//        //label.setHTML(label.getInnerHTML().replace("毛重", "皮重"));</span></span><br><span class="line">    <span class="comment">//        $("#carNumberDiv").hide();</span></span><br><span class="line">    <span class="comment">//        $("#containerDeductionDiv").hide();</span></span><br><span class="line">    <span class="comment">//        $("#trayDeductionDiv").show();</span></span><br><span class="line">    <span class="comment">//        $("#InputArea").css("background-color", "lightcoral");</span></span><br><span class="line">    <span class="comment">//        $("#tareWeightDiv").show();</span></span><br><span class="line">    <span class="comment">//        $("#grossWeightDiv").hide();</span></span><br><span class="line">    <span class="comment">//        break;</span></span><br><span class="line">    <span class="comment">//    default:</span></span><br><span class="line">    <span class="comment">//        break;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">savePounds</span>(<span class="params">saveBtn</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(saveBtn.name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第几次称重</span></span><br><span class="line">    <span class="comment">//const times = $find("RadRadioButtonList").get_selectedIndex();</span></span><br><span class="line">    <span class="keyword">const</span> times = $(<span class="string">"#HiddenFieldTimes"</span>).val();</span><br><span class="line">    <span class="comment">//if (times === -1) &#123;</span></span><br><span class="line">    <span class="comment">//    //若未选，则选中第一次称重</span></span><br><span class="line">    <span class="comment">//    alertBasic("请选择第几次称重");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    return false;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="comment">/*readPounds();*/</span></span><br><span class="line">    <span class="comment">//集装箱号</span></span><br><span class="line">    <span class="comment">/*const containerNumber = $find("RadTextBoxContainerNumber").get_value().trim();*/</span></span><br><span class="line">    <span class="keyword">const</span> containerNumber = (<span class="keyword">new</span> URL(<span class="built_in">window</span>.location)).searchParams.get(<span class="string">"ContainerNumber"</span>)?.trim();</span><br><span class="line">    <span class="comment">//车牌号</span></span><br><span class="line">    <span class="keyword">const</span> carNumber = $find(<span class="string">"RadTextBoxCarNumber"</span>).get_value().trim();</span><br><span class="line">    <span class="keyword">if</span> (!carNumber) &#123;</span><br><span class="line">        alertError(<span class="string">"输入有误"</span>, <span class="string">"车牌号不能为空！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//if (!</span></span><br><span class="line">        <span class="comment">//    /^([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[a-zA-Z](([DF]((?![IO])[a-zA-Z0-9](?![IO]))[0-9]&#123;4&#125;)|([0-9]&#123;5&#125;[DF]))|[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;)$/</span></span><br><span class="line">        <span class="comment">//        .test(carNumber)) &#123;</span></span><br><span class="line">        <span class="comment">//    alertError("输入有误", "请重新输入有效的车牌号！");</span></span><br><span class="line">        <span class="comment">//    return false;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (carNumber.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            alertError(<span class="string">"输入有误"</span>, <span class="string">"请重新输入有效的车牌号！"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//集装箱扣重</span></span><br><span class="line">    <span class="keyword">const</span> containerDeduction = $find(<span class="string">"RadNumericTextBoxContainerDeduction"</span>).get_value();</span><br><span class="line">    <span class="comment">//集装箱重范围检查</span></span><br><span class="line">    <span class="keyword">if</span> (times === <span class="string">"1"</span> &amp;&amp; !containerDeduction) &#123;</span><br><span class="line">        alertError(<span class="string">"输入有误"</span>, <span class="string">"集装箱扣重不能为空！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//干货箱（钢）                     门尺寸(mm)             内部尺寸(mm)     载重(Kg)                 体积(m3)</span></span><br><span class="line">        <span class="comment">//箱型     尺寸                 宽度     高度     长度     宽度     高度     最大重量 自重     最大载重 最大装载体积</span></span><br><span class="line">        <span class="comment">//20"普柜 20' x 8' x 8' 6" 2, 340 2, 274 5, 896 2, 350 2, 385 27, 000 2, 150 24, 850 33</span></span><br><span class="line">        <span class="comment">//40"普柜 40' x 8' x 8' 6" 2, 339 2, 274 12, 035 2, 350 2, 393 32, 500 3, 700 28, 800 67</span></span><br><span class="line">        <span class="comment">//40" 高柜 40' x 8' x 9' 6" 2, 340 2, 577 12, 035 2, 350 2, 697 34, 000 3, 800 30, 200 76</span></span><br><span class="line">        <span class="comment">//45" 高柜 45' x 8' x 9' 6" 2, 340 2, 585 13, 556 2, 352 2, 697 32, 500 4, 800 27, 820 86</span></span><br><span class="line">        <span class="comment">//柜型</span></span><br><span class="line">        <span class="built_in">window</span>.params = (<span class="keyword">new</span> URL(<span class="built_in">document</span>.location)).searchParams; <span class="comment">// URL接口的searchParams只读属性返回URLSearchParams对象，允许访问URL中包含的GET解码查询参数。</span></span><br><span class="line">        <span class="built_in">window</span>.containerType = params.get(<span class="string">"ContainerType"</span>);</span><br><span class="line">        <span class="keyword">switch</span> (containerType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`20'GP`</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(containerDeduction - <span class="number">2150</span>) &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                    alertError(<span class="string">"集装箱重范围检查"</span>, <span class="string">"请检查输入的集装箱扣重！"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`40'GP`</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(containerDeduction - <span class="number">3700</span>) &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                    alertError(<span class="string">"集装箱重范围检查"</span>, <span class="string">"请检查输入的集装箱扣重！"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`40'HQ`</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(containerDeduction - <span class="number">3800</span>) &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                    <span class="comment">// 40'HQ自重3.8吨 允许输入误差范围1000kg</span></span><br><span class="line">                    alertError(<span class="string">"集装箱重范围检查"</span>, <span class="string">"请检查输入的集装箱扣重！"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`45'HQ`</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(containerDeduction - <span class="number">4800</span>) &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                    alertError(<span class="string">"集装箱重范围检查"</span>, <span class="string">"请检查输入的集装箱扣重！"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">`53'HQ`</span>:</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(containerDeduction - <span class="number">5380</span>) &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">                    alertError(<span class="string">"集装箱重范围检查"</span>, <span class="string">"请检查输入的集装箱扣重！"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//托盘扣重</span></span><br><span class="line">    <span class="keyword">const</span> trayDeduction = $find(<span class="string">"RadNumericTextBoxTrayDeduction"</span>).get_value();</span><br><span class="line">    <span class="keyword">if</span> (times === <span class="string">"2"</span> &amp;&amp; !trayDeduction) &#123;</span><br><span class="line">        alertError(<span class="string">"输入有误"</span>, <span class="string">"托盘扣重不能为空！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!containerNumber) &#123;</span><br><span class="line">        alertError(<span class="string">"输入有误"</span>, <span class="string">"集装箱号不能为空！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//(async function() &#123;</span></span><br><span class="line">    <span class="comment">//    const result = await readPounds();</span></span><br><span class="line">    <span class="comment">//    return result;</span></span><br><span class="line">    <span class="comment">//&#125;)();</span></span><br><span class="line">    <span class="keyword">const</span> isSuccess = readPounds();</span><br><span class="line">    isSuccess.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Promise</span>.resolve(res)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//毛重读数</span></span><br><span class="line">            <span class="keyword">const</span> grossWeight = $(<span class="string">"#RadLabelGrossWeight2"</span>)[<span class="number">0</span>].innerText;</span><br><span class="line">            <span class="keyword">if</span> (times === <span class="string">"1"</span> &amp;&amp; !grossWeight) &#123;</span><br><span class="line">                alertError(<span class="string">"读数有误"</span>, <span class="string">"毛重读数不能为空！"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//皮重读数</span></span><br><span class="line">            <span class="comment">//const tareWeight = $find("RadNumericTextBoxTareWeight").get_textBoxValue();</span></span><br><span class="line">            <span class="keyword">const</span> tareWeight = $(<span class="string">"#RadLabelTareWeight2"</span>)[<span class="number">0</span>].innerText;</span><br><span class="line">            <span class="keyword">if</span> (times === <span class="string">"2"</span> &amp;&amp; !tareWeight) &#123;</span><br><span class="line">                alertError(<span class="string">"读数有误"</span>, <span class="string">"皮重读数不能为空！"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// TODO 异步请求：保存</span></span><br><span class="line">            <span class="comment">//window.$find("BtnSave").set_enabled(false);</span></span><br><span class="line">            $(<span class="string">`#<span class="subst">$&#123;saveBtn.name&#125;</span>`</span>)[<span class="number">0</span>].disabled = <span class="literal">false</span>;</span><br><span class="line">            $.ajax(</span><br><span class="line">                &#123;</span><br><span class="line">                    type: <span class="string">"POST"</span>,</span><br><span class="line">                    url: <span class="string">"MLWeightReadPounds.aspx/AjaxSavePounds"</span>,</span><br><span class="line">                    data: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                        containerNumber: containerNumber,</span><br><span class="line">                        times: times,</span><br><span class="line">                        grossWeight: grossWeight,</span><br><span class="line">                        tareWeight: tareWeight,</span><br><span class="line">                        value: times === <span class="string">"1"</span> ? grossWeight : tareWeight,</span><br><span class="line">                        userId: $(<span class="string">"#HiddenFieldUserId"</span>).val(),</span><br><span class="line">                        carNumber: carNumber,</span><br><span class="line">                        containerType: containerType,</span><br><span class="line">                        containerDeduction: containerDeduction,</span><br><span class="line">                        trayDeduction: trayDeduction,</span><br><span class="line">                        purchaseOrder: params.get(<span class="string">"PurchaseOrder"</span>),</span><br><span class="line">                        declarationId: params.get(<span class="string">"DeclarationId"</span>)</span><br><span class="line">                    &#125;),</span><br><span class="line">                    dataType: <span class="string">"json"</span>,</span><br><span class="line">                    <span class="comment">// async: false,</span></span><br><span class="line">                    contentType: <span class="string">"application/json; charset=utf-8"</span>,</span><br><span class="line">                    success: <span class="function"><span class="keyword">function</span> (<span class="params">infos</span>) </span>&#123;</span><br><span class="line">                        <span class="keyword">const</span> jsonRes = <span class="built_in">JSON</span>.parse(infos.d);</span><br><span class="line">                        <span class="built_in">console</span>.log(jsonRes);</span><br><span class="line">                        <span class="keyword">if</span> (jsonRes.status === <span class="string">"200"</span>) &#123;</span><br><span class="line">                            alertSuccess(<span class="string">"保存成功！"</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//alert(infos.d.errMsg);</span></span><br><span class="line">                            <span class="built_in">console</span>.log(jsonRes);</span><br><span class="line">                            alertError(jsonRes.errMsg, jsonRes.exception);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="built_in">window</span>.location.reload();</span><br><span class="line">                        <span class="comment">//window.$find("BtnSave").set_enabled(true);</span></span><br><span class="line">                        $(<span class="string">`#<span class="subst">$&#123;saveBtn.name&#125;</span>`</span>)[<span class="number">0</span>].disabled = <span class="literal">false</span>;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: <span class="function"><span class="keyword">function</span> (<span class="params">exception</span>) </span>&#123;</span><br><span class="line">                        alertError(<span class="string">"浏览器Ajax请求错误"</span>, exception.responseText);</span><br><span class="line">                        <span class="comment">//window.$find("BtnSave").set_enabled(true);</span></span><br><span class="line">                        $(<span class="string">`#<span class="subst">$&#123;saveBtn.name&#125;</span>`</span>)[<span class="number">0</span>].disabled = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 临时保存读数至会话存储</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">savePoundsToLocalStorage</span>(<span class="params">weightValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> userId = $(<span class="string">"#HiddenFieldUserId"</span>)[<span class="number">0</span>].value; <span class="comment">// 工号</span></span><br><span class="line">    <span class="keyword">const</span> containerId = $(<span class="string">"#HiddenFieldContainerId"</span>)[<span class="number">0</span>].value; <span class="comment">// 集装箱Id</span></span><br><span class="line">    <span class="comment">//第几次称重</span></span><br><span class="line">    <span class="comment">//const times = $find("RadRadioButtonList").get_selectedIndex();</span></span><br><span class="line">    <span class="keyword">const</span> times = $(<span class="string">"#HiddenFieldTimes"</span>).val();</span><br><span class="line">    sessionStorage.setItem(<span class="string">"ML_WEIGHT_USERID"</span>, userId);</span><br><span class="line">    sessionStorage.setItem(<span class="string">"ML_WEIGHT_CONTAINER_ID"</span>, containerId);</span><br><span class="line">    sessionStorage.setItem(<span class="string">`ML_WEIGHT_VALUE_<span class="subst">$&#123;times&#125;</span>`</span>, weightValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">readPounds</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断是否支持Web串行API。</span></span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">"serial"</span> <span class="keyword">in</span> navigator)) &#123;</span><br><span class="line">        alertError(<span class="string">"Web串行接口无法使用"</span>, <span class="string">"该浏览器不支持读取串口设备，请更换Chrome浏览器！"</span>);</span><br><span class="line">        <span class="comment">//alert("该浏览器不支持读取串口设备，请更换Chrome浏览器！");</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取用户之前授予网站访问权限的所有串行端口。</span></span><br><span class="line">        <span class="keyword">const</span> ports = <span class="keyword">await</span> navigator.serial.getPorts();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`已授权的串行端口：<span class="subst">$&#123;ports.length&#125;</span> 个`</span>);</span><br><span class="line">        ports.forEach(<span class="function"><span class="params">p</span> =&gt;</span> <span class="built_in">console</span>.log(p));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> port;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 闫伟明 串行端口选错连接不上异常处理；串行端口选择过滤</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ports.length === <span class="number">1</span>) &#123;</span><br><span class="line">            port = ports[<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"选择第一个端口打开"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"请选择一个端口打开"</span>);</span><br><span class="line">            <span class="comment">// 提示用户选择任意串口。</span></span><br><span class="line">            port = <span class="keyword">await</span> navigator.serial.requestPort();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待串口打开。</span></span><br><span class="line">            <span class="keyword">await</span> port.open(&#123;</span><br><span class="line">                baudRate: <span class="number">9600</span>,<span class="comment">/*建立串行通信的波特率*/</span></span><br><span class="line">                dataBits: <span class="number">8</span>,<span class="comment">/*每帧的数据位数*/</span></span><br><span class="line">                stopBits: <span class="number">1</span>,<span class="comment">/*帧末尾的停止位数*/</span></span><br><span class="line">                parity: <span class="string">"even"</span>,<span class="comment">/*奇偶校验模式*/</span></span><br><span class="line">                bufferSize: <span class="number">255</span>,<span class="comment">/*缓冲区大小*/</span></span><br><span class="line">                flowControl: <span class="string">"none"</span><span class="comment">/*流量控制模式*/</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`等待串口打开中...<span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"端口打开成功！"</span>);</span><br><span class="line"></span><br><span class="line">        toast(<span class="string">"打开串口"</span>, <span class="string">`<span class="subst">$&#123;port&#125;</span>端口打开成功！`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.weightValues = []; <span class="comment">//存储最近三次称重值</span></span><br><span class="line">        <span class="comment">//window.sameCount = 10; //3 // weightValues数组的大小</span></span><br><span class="line">        <span class="comment">//window.r1 = /\)0\s&#123;5&#125;(\d*)\s&#123;5&#125;00/g; //使用正则表达式匹配读数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">String</span>(); <span class="comment">// 储存地磅串行接口传来的数据 一个完整的数据是十六进制字符串</span></span><br><span class="line">        <span class="keyword">while</span> (port.readable) &#123;</span><br><span class="line">            <span class="keyword">const</span> reader = port.readable.getReader();</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`获取到串行输出流：<span class="subst">$&#123;reader&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"开始监听串行流..."</span>);</span><br><span class="line">                <span class="comment">// 监听来自串行设备的数据。</span></span><br><span class="line">                outerWhileLoop: <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"正等待读取串行输出流..."</span>);</span><br><span class="line">                    <span class="keyword">const</span> &#123; value, done &#125; = <span class="keyword">await</span> reader.read();</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"读取串行输出流..."</span>);</span><br><span class="line">                    <span class="keyword">if</span> (done) &#123;</span><br><span class="line">                        <span class="comment">// 允许稍后关闭串口。</span></span><br><span class="line">                        reader.releaseLock();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 值是一个 Uint8Array.</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`接收数据 Uint8Array 中...<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`转换数据 Uint8ArrayToString 中...<span class="subst">$&#123;Uint8ArrayToString(value)&#125;</span>`</span>);</span><br><span class="line">                    <span class="built_in">console</span>.log(s);</span><br><span class="line">                    s += Uint8ArrayToString(value);</span><br><span class="line">                    <span class="keyword">if</span> (s.length &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"累计收到字符串长度小于200，继续读取..."</span>);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.length &gt; <span class="number">10000</span>) &#123;</span><br><span class="line">                        s = <span class="string">""</span>;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"累计收到字符串长度大于10000，清空..."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 2022年12月16日13:32:54 新数据格式解析 -- START</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`使用 <span class="subst">$&#123;r1&#125;</span> 进行正则匹配...`</span>);</span><br><span class="line">                    <span class="keyword">while</span> (r1.exec(s)) &#123;</span><br><span class="line">                        <span class="keyword">const</span> curWeight = <span class="built_in">RegExp</span>.$<span class="number">1</span>;</span><br><span class="line">                        <span class="built_in">console</span>.log(curWeight + <span class="string">" "</span> + <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">                        <span class="built_in">window</span>.showWeight(curWeight);</span><br><span class="line">                        <span class="comment">// 取值3次，3次相等即为结果</span></span><br><span class="line">                        <span class="keyword">if</span> (weightValues.length &lt; sameCount) &#123;</span><br><span class="line">                            <span class="comment">//称重值小于3个，入队</span></span><br><span class="line">                            weightValues.push(curWeight);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//称重值3个，先出队再入队</span></span><br><span class="line">                            weightValues.shift();</span><br><span class="line">                            weightValues.push(curWeight);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">`weightValues:<span class="subst">$&#123;weightValues&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (weightValues.length === sameCount) &#123;</span><br><span class="line">                            <span class="comment">//判断最近三次值是否相等</span></span><br><span class="line">                            <span class="keyword">const</span> elementsAreEqual = weightValues.every(<span class="function"><span class="params">weightValue</span> =&gt;</span> weightValue === weightValues[<span class="number">0</span>]);</span><br><span class="line">                            <span class="keyword">if</span> (elementsAreEqual) &#123;</span><br><span class="line">                                <span class="comment">//三次值相等 确定称重结果</span></span><br><span class="line">                                <span class="comment">//console.log(`weightValues:$&#123;weightValues&#125;`);</span></span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">`weightValues[0]:<span class="subst">$&#123;weightValues[<span class="number">0</span>]&#125;</span>`</span>);</span><br><span class="line">                                <span class="comment">//window.setWeight(weightValues[0]);</span></span><br><span class="line">                                <span class="keyword">const</span> times = $(<span class="string">"#HiddenFieldTimes"</span>).val();</span><br><span class="line">                                <span class="keyword">switch</span> (times) &#123;</span><br><span class="line">                                    <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">                                        <span class="comment">//第一次称重 毛重读数</span></span><br><span class="line">                                        <span class="comment">//$("#RadNumericTextBoxGrossWeight").val(weightValues[0]);</span></span><br><span class="line">                                        $(<span class="string">"#RadLabelGrossWeight2"</span>)[<span class="number">0</span>].innerText = weightValues[<span class="number">0</span>];</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">                                        <span class="comment">//第二次称重 皮重</span></span><br><span class="line">                                        <span class="comment">//$("#RadNumericTextBoxTareWeight").val(weightValues[0]);</span></span><br><span class="line">                                        $(<span class="string">"#RadLabelTareWeight2"</span>)[<span class="number">0</span>].innerText = weightValues[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    <span class="keyword">default</span>:</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                toast(<span class="string">`读数成功：<span class="subst">$&#123;weightValues[<span class="number">0</span>]&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 存储至localstorage</span></span><br><span class="line">                                <span class="comment">//savePoundsToLocalStorage(weightValues[0]);</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 清空接收到的数据，准备下次读取</span></span><br><span class="line">                                s = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">                                <span class="comment">//若要停止读数</span></span><br><span class="line">                                <span class="comment">//允许稍后关闭串口。</span></span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"releasing Lock"</span>);</span><br><span class="line">                                reader.releaseLock();</span><br><span class="line">                                <span class="comment">//关闭串口</span></span><br><span class="line">                                <span class="keyword">await</span> port.close();</span><br><span class="line">                                <span class="comment">//跳出监听循环，退出读磅函数</span></span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"已经关闭串口"</span>);</span><br><span class="line">                                <span class="keyword">break</span> outerWhileLoop;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">//三次值不等 继续</span></span><br><span class="line">                                <span class="comment">//console.log(`weightValues:$&#123;weightValues&#125;`);</span></span><br><span class="line">                                <span class="built_in">console</span>.log(<span class="string">"weightMsg三次值不相等"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (weightValues.length &gt; sameCount) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.error(<span class="string">"执行错误，队列溢出"</span>);</span><br><span class="line">                            <span class="built_in">window</span>.weightValues = [];</span><br><span class="line">                            <span class="built_in">console</span>.error(<span class="string">"已重置队列为空"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 实时显示本次称重值</span></span><br><span class="line">                        <span class="comment">// 因为$("#&lt;%=ReadingPounds.ClientID %&gt;").text(`$&#123;weightMsg&#125;`);只能在aspx文件中，放在独立js文件中无法正确编译，故抽取成方法，使用windows对象调用。</span></span><br><span class="line">                        <span class="built_in">window</span>.showWeight(weightValues[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// -- END 新数据格式解析</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// START T800数据帧解析</span></span><br><span class="line">                    <span class="comment">/*//s1储存地磅传来一个完整数据帧的数据部分，应是15个字节</span></span><br><span class="line"><span class="comment">                    const s1 = s.substring(s.lastIndexOf("02") + 2, s.lastIndexOf("0D"));</span></span><br><span class="line"><span class="comment">                    if (s1.length === 30) &#123;</span></span><br><span class="line"><span class="comment">                        //转换过程：十六进制字符串-- &gt; 十进制int数-- &gt; 二进制表示字符串</span></span><br><span class="line"><span class="comment">                        const dec = parseInt(s1.substring(0, 2), 16).toString(2);</span></span><br><span class="line"><span class="comment">                        //状态字A部分</span></span><br><span class="line"><span class="comment">                        console.log(dec);</span></span><br><span class="line"><span class="comment">                        //状态字A的Bits 0,1,2 小数点位</span></span><br><span class="line"><span class="comment">                        const flag = dec.substring(dec.length - 3);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        // 用于确定小数点位置</span></span><br><span class="line"><span class="comment">                        let flag2 = "";</span></span><br><span class="line"><span class="comment">                        for (let k = flag.length - 1; k &gt;= 0; k--) &#123;</span></span><br><span class="line"><span class="comment">                            flag2 += flag[k];</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        //显示重量、毛重或者净重</span></span><br><span class="line"><span class="comment">                        //共6个字节，表示6位不带符号不带小数点的数字</span></span><br><span class="line"><span class="comment">                        //转换过程：十六进制字符串 --&gt; 十进制整数int（Unicode值） --&gt; 数字（ascii字符）</span></span><br><span class="line"><span class="comment">                        const ss = s1.substring(6, 18);</span></span><br><span class="line"><span class="comment">                        console.log(`ss:$&#123;ss&#125;`);</span></span><br><span class="line"><span class="comment">                        // 临时存储最终结果的6位数字</span></span><br><span class="line"><span class="comment">                        let buffer = "";</span></span><br><span class="line"><span class="comment">                        for (let i = 0; i &lt; ss.length; i += 2) &#123;</span></span><br><span class="line"><span class="comment">                            console.log(`十六进制字符串 --&gt; 十进制整数int（Unicode值）：$&#123;ss.substring(i, i + 2)&#125; --&gt; $&#123;parseInt(ss.substring(i, i + 2), 16)&#125;`);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                            //先十六进制字符串 --&gt; 十进制整数int（Unicode值），再将 Unicode 值转换为字符:</span></span><br><span class="line"><span class="comment">                            buffer += String.fromCharCode(parseInt(ss.substring(i, i + 2), 16));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                            console.log(`buffer:$&#123;buffer&#125;`);</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        console.log(`buffer 临时存储最终结果的6位数字:$&#123;buffer&#125;`);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        let weightMsg = "";</span></span><br><span class="line"><span class="comment">                        // 判断小数点的位置</span></span><br><span class="line"><span class="comment">                        switch (flag) &#123;</span></span><br><span class="line"><span class="comment">                            case "111":</span></span><br><span class="line"><span class="comment">                                weightMsg = `$&#123;buffer.substring(0, 1)&#125;.$&#123;buffer.substring(1, 6)&#125;`;</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            case "011":</span></span><br><span class="line"><span class="comment">                                weightMsg = `$&#123;buffer.substring(0, 2)&#125;.$&#123;buffer.substring(2, 6)&#125;`;</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            case "101":</span></span><br><span class="line"><span class="comment">                                weightMsg = `$&#123;buffer.substring(0, 3)&#125;.$&#123;buffer.substring(3, 6)&#125;`;</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            case "001":</span></span><br><span class="line"><span class="comment">                                weightMsg = `$&#123;buffer.substring(0, 4)&#125;.$&#123;buffer.substring(4, 6)&#125;`;</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            case "110":</span></span><br><span class="line"><span class="comment">                                weightMsg = `$&#123;buffer.substring(0, 5)&#125;.$&#123;buffer.substring(5, 6)&#125;`;</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            case "010":</span></span><br><span class="line"><span class="comment">                                weightMsg = `$&#123;buffer.substring(0, 6)&#125;`;</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            case "100":</span></span><br><span class="line"><span class="comment">                                weightMsg = `$&#123;buffer.substring(1, 6)&#125;0`;</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            case "000":</span></span><br><span class="line"><span class="comment">                                weightMsg = `$&#123;buffer.substring(2, 6)&#125;00`;</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        // 取值3次，3次相等即为结果</span></span><br><span class="line"><span class="comment">                        if (weightValues.length &lt; 3) &#123;</span></span><br><span class="line"><span class="comment">                            //称重值小于3个，入队</span></span><br><span class="line"><span class="comment">                            weightValues.push(weightMsg);</span></span><br><span class="line"><span class="comment">                        &#125; else &#123;</span></span><br><span class="line"><span class="comment">                            //称重值3个，先出队再入队</span></span><br><span class="line"><span class="comment">                            weightValues.shift();</span></span><br><span class="line"><span class="comment">                            weightValues.push(weightMsg);</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                        console.log(`weightValues:$&#123;weightValues&#125;`);</span></span><br><span class="line"><span class="comment">                        </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        if (weightValues.length === 3) &#123;</span></span><br><span class="line"><span class="comment">                            //判断最近三次值是否相等</span></span><br><span class="line"><span class="comment">                            const elementsAreEqual = weightValues.every(weightValue =&gt; weightValue === weightValues[0]);</span></span><br><span class="line"><span class="comment">                            if (elementsAreEqual) &#123;</span></span><br><span class="line"><span class="comment">                                //三次值相等 确定称重结果</span></span><br><span class="line"><span class="comment">                                //console.log(`weightValues:$&#123;weightValues&#125;`);</span></span><br><span class="line"><span class="comment">                                console.log(`weightValues[0]:$&#123;weightValues[0]&#125;`);</span></span><br><span class="line"><span class="comment">                                alert("读数成功！");</span></span><br><span class="line"><span class="comment">                                window.setWeight(weightValues[0]);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                                // 存储至localstorage</span></span><br><span class="line"><span class="comment">                                //savePoundsToLocalStorage(weightValues[0]);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                                //若要停止读数</span></span><br><span class="line"><span class="comment">                                //允许稍后关闭串口。</span></span><br><span class="line"><span class="comment">                                console.log("releasing Lock");</span></span><br><span class="line"><span class="comment">                                reader.releaseLock();</span></span><br><span class="line"><span class="comment">                                //关闭串口</span></span><br><span class="line"><span class="comment">                                await port.close();</span></span><br><span class="line"><span class="comment">                                //跳出监听循环，退出读磅函数</span></span><br><span class="line"><span class="comment">                                console.log("已经关闭串口");</span></span><br><span class="line"><span class="comment">                                break;</span></span><br><span class="line"><span class="comment">                            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                                //三次值不等 继续</span></span><br><span class="line"><span class="comment">                                //console.log(`weightValues:$&#123;weightValues&#125;`);</span></span><br><span class="line"><span class="comment">                                console.log("weightMsg三次值不相等");</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        &#125; else if (weightValues.length &gt; 3) &#123;</span></span><br><span class="line"><span class="comment">                            alert("执行错误，队列溢出");</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        // 实时显示本次称重值</span></span><br><span class="line"><span class="comment">                        // 因为$("#&lt;%=ReadingPounds.ClientID %&gt;").text(`$&#123;weightMsg&#125;`);只能在aspx文件中，放在独立js文件中无法正确编译，故抽取成方法，使用windows对象调用。</span></span><br><span class="line"><span class="comment">                        window.showWeight(weightValues[0]);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        // 清空接收到的数据，准备下次读取</span></span><br><span class="line"><span class="comment">                        s = "";</span></span><br><span class="line"><span class="comment">                    &#125;*/</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(error);</span><br><span class="line">                alertError(<span class="string">"监听串行流输出遇到错误"</span>, error);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                reader.releaseLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取用户之前授予网站访问权限的所有串行端口。</span></span><br><span class="line">        <span class="comment">//const ports = await navigator.serial.getPorts();</span></span><br><span class="line">        <span class="comment">//alert(ports);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Uint8ArrayToString</span>(<span class="params">fileData</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dataString = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fileData.length; i++) &#123;</span><br><span class="line">        dataString += <span class="built_in">String</span>.fromCharCode(fileData[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查浏览器版本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkBrowserVersion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> browserName = getBrowserName(navigator.userAgent);</span><br><span class="line">    <span class="keyword">const</span> protocol = <span class="built_in">window</span>.location.protocol;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`You are using: <span class="subst">$&#123;browserName&#125;</span> over <span class="subst">$&#123;protocol&#125;</span> protocol.`</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="string">"serial"</span> <span class="keyword">in</span> navigator)) &#123;</span><br><span class="line">        alertError(<span class="string">"无法使用"</span>, <span class="string">"请更换Chrome或Edge浏览器访问此页面（该浏览器不支持读取串口设备）！"</span>);</span><br><span class="line">        <span class="comment">//$("body").html(`&lt;div class="container"&gt;&lt;h1&gt;$&#123;`You are using: $&#123;browserName&#125; over $&#123;protocol&#125;// protocol.`</span></span><br><span class="line">        <span class="comment">//    &#125;&lt;/h1&gt;&lt;hr/&gt;&lt;h2&gt;检测到该浏览器不支持读取串口设备！&lt;/h2&gt;&lt;h3&gt;Please change your Chrome or Edge browser to visit this page (as this browser does not support accessing and reading serial port devices)!&lt;/h3&gt;&lt;/div&gt;`);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBrowserName</span>(<span class="params">userAgent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The order matters here, and this may report false positives for unlisted browsers.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userAgent.includes(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">        <span class="comment">// "Mozilla/5.0 (X11; Linux i686; rv:104.0) Gecko/20100101 Firefox/104.0"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Mozilla Firefox"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.includes(<span class="string">"SamsungBrowser"</span>)) &#123;</span><br><span class="line">        <span class="comment">// "Mozilla/5.0 (Linux; Android 9; SAMSUNG SM-G955F Build/PPR1.180610.011) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/9.4 Chrome/67.0.3396.87 Mobile Safari/537.36"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Samsung Internet"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.includes(<span class="string">"Opera"</span>) || userAgent.includes(<span class="string">"OPR"</span>)) &#123;</span><br><span class="line">        <span class="comment">// "Mozilla/5.0 (Macintosh; Intel Mac OS X 12_5_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36 OPR/90.0.4480.54"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Opera"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.includes(<span class="string">"Trident"</span>)) &#123;</span><br><span class="line">        <span class="comment">// "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Microsoft Internet Explorer"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.includes(<span class="string">"Edge"</span>)) &#123;</span><br><span class="line">        <span class="comment">// "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Microsoft Edge (Legacy)"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.includes(<span class="string">"Edg"</span>)) &#123;</span><br><span class="line">        <span class="comment">// "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36 Edg/104.0.1293.70"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Microsoft Edge (Chromium)"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.includes(<span class="string">"Chrome"</span>)) &#123;</span><br><span class="line">        <span class="comment">// "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Google Chrome or Chromium"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.includes(<span class="string">"Safari"</span>)) &#123;</span><br><span class="line">        <span class="comment">// "Mozilla/5.0 (iPhone; CPU iPhone OS 15_6_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Mobile/15E148 Safari/604.1"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Apple Safari"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"unknown"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// my弹窗封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertPro</span>(<span class="params">type, title, text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.Swal.fire(&#123;</span><br><span class="line">        icon: type,</span><br><span class="line">        title: title,</span><br><span class="line">        text: text<span class="comment">//,</span></span><br><span class="line">        <span class="comment">//footer: '&lt;a href=""&gt;测试弹窗&lt;/a&gt;'</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误弹窗提示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertError</span>(<span class="params">title, text</span>) </span>&#123;</span><br><span class="line">    alertPro(<span class="string">"error"</span>, title, text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单弹窗提示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertBasic</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.Swal.fire(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功弹窗提示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alertSuccess</span>(<span class="params">title, text</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.Swal.fire(</span><br><span class="line">        title,</span><br><span class="line">        text,</span><br><span class="line">        <span class="string">"success"</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Toast</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toast</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.Swal.mixin(&#123;</span><br><span class="line">        toast: <span class="literal">true</span>,</span><br><span class="line">        position: <span class="string">"top-end"</span>,</span><br><span class="line">        showConfirmButton: <span class="literal">false</span>,</span><br><span class="line">        timer: <span class="number">3000</span>,</span><br><span class="line">        timerProgressBar: <span class="literal">true</span>,</span><br><span class="line">        didOpen: <span class="function">(<span class="params">toast</span>) =&gt;</span> &#123;</span><br><span class="line">            toast.addEventListener(<span class="string">"mouseenter"</span>, <span class="built_in">window</span>.Swal.stopTimer);</span><br><span class="line">            toast.addEventListener(<span class="string">"mouseleave"</span>, <span class="built_in">window</span>.Swal.resumeTimer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).fire(&#123;</span><br><span class="line">        icon: <span class="string">"success"</span>,</span><br><span class="line">        title: text</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="chrome浏览器配置在http协议使用web串行api"><a href="#chrome浏览器配置在http协议使用web串行api" class="headerlink" title="chrome浏览器配置在http协议使用web串行api"></a>chrome浏览器配置在http协议使用web串行api</h2><p>Web串行Api需要域是HTTPS协议的，否则该api被Chrome屏蔽，无法被调用。仅在本地localhost调试开发时可以使用http域，Chrome浏览器会暴露该api。</p><p>可以通过配置Chrome浏览器解除这个限制，需要配置两个地方：</p><ol><li>打开<code>chrome://flags/</code>，设置<code>Insecure origins treated as secure</code>为<code>Enabeld</code>，填入要配置的域名<code>http://192.168.80.53:9000</code><br><img src="/2022/11/18/JavaScript%E4%BD%BF%E7%94%A8-Web-Serial-API%E8%8E%B7%E5%8F%96%E4%B8%B2%E8%A1%8C%E8%AE%BE%E5%A4%87%E7%AB%AF%E5%8F%A3%E6%95%B0%E6%8D%AE-%E5%9C%B0%E7%A3%85%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE/2023-02-08-10-58-04.png" alt="配置chrome://flags/"><ul><li>Enable Bluetooth Serial Port Profile in Serial API为开启蓝牙设备串行api。</li></ul></li><li>在桌面<code>Google Chrome</code>图标的快捷方式上，鼠标右键点<code>属性</code>，修改<code>目标</code>字段加上启动参数，修改后为<code>&quot;C:\Program Files\Google\Chrome\Application\chrome.exe&quot; --unsafely-treat-insecure-origin-as-secure=&quot;http://192.168.80.53:9000&quot;</code><br><img src="/2022/11/18/JavaScript%E4%BD%BF%E7%94%A8-Web-Serial-API%E8%8E%B7%E5%8F%96%E4%B8%B2%E8%A1%8C%E8%AE%BE%E5%A4%87%E7%AB%AF%E5%8F%A3%E6%95%B0%E6%8D%AE-%E5%9C%B0%E7%A3%85%E4%B8%B2%E5%8F%A3%E6%95%B0%E6%8D%AE/2023-02-08-10-59-40.png" alt="快捷方式——目标添加启动参数"></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87&quot;&gt;前期准备&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%B5%84%E6%BA%90%E9%93%BE%E6%8E%A5&quot;&gt;资源链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B&quot;&gt;代码示例&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%A3%80%E6%9F%A5%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81&quot;&gt;检查浏览器是否支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%89%93%E5%BC%80%E4%B8%B2%E8%A1%8C%E7%AB%AF%E5%8F%A3&quot;&gt;打开串行端口&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9C%B0%E7%A3%85%E8%AF%BB%E6%95%B0%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B&quot;&gt;地磅读数代码示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%85%8D%E7%BD%AE%E5%9C%A8http%E5%8D%8F%E8%AE%AE%E4%BD%BF%E7%94%A8web%E4%B8%B2%E8%A1%8Capi&quot;&gt;chrome浏览器配置在http协议使用web串行api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://xiaoyan94.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 之函数</title>
    <link href="https://xiaoyan94.github.io/2022/09/07/JavaScript%E4%B9%8B%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaoyan94.github.io/2022/09/07/JavaScript%E4%B9%8B%E5%87%BD%E6%95%B0/</id>
    <published>2022-09-07T15:20:16.000Z</published>
    <updated>2022-09-21T00:56:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><p>JavaScript 在传递参数时，其实是一个数组，其实<strong>所有的参数都会被装载到函数内部一个叫作 <code>arguments</code> 的数组里面</strong>。</p><p>代码示例：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// window.alert('Hello World')</span></span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);</span></span><br><span class="line"><span class="actionscript">          <span class="comment">// alert(arguments[0])</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   arguments.forEach(element =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//     sum+=element;</span></span></span><br><span class="line"><span class="actionscript">          <span class="comment">//   &#125;);</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; <span class="built_in">arguments</span>.length; index++) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> element = <span class="built_in">arguments</span>[index];</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// console.log(element);</span></span></span><br><span class="line">            sum += element;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(sum);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">          alert(<span class="string">"参数为空"</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      add();</span><br><span class="line"><span class="actionscript">      <span class="comment">// var a = [1, 2];</span></span></span><br><span class="line">      add(1, 2, 3, 4, 5);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>如上所示，即使在定义函数 <code>add</code> 时，没有声明参数，在调用时传入任意参数都是会被装载到 <code>arguments</code> 数组的。</p><p>只是需要注意的是，只能使用 <code>for</code> 循环遍历 <code>arguments</code> ，不能在其上使用 <code>forEach</code> 遍历（会报错，不存在 <code>forEach</code> ）。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><a id="more"></a><p>在函数中用 <code>return</code> 语句返回另一个函数。</p><p>如下所示，返回的函数中可以一直保存捕获到的函数内的局部变量 <code>a</code> ，再次调用 <code>test()()</code> 的时候在任意地方都可以访问到变量 <code>a</code>。</p><p>之所以使用 <code>test()()</code> ，<code>test</code> 函数返回的结果是一个函数，既然是函数，不去调用的话就不会执行里面的代码，所以如果需要执行内部函数的函数体，就必须要这样。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">test()(); <span class="comment">// 输出 0</span></span><br></pre></td></tr></table></figure></div><p>调试控制台：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test</span><br><span class="line">        ƒ test() &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">             <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(a);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">test()</span><br><span class="line">        ƒ f1() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(a);</span><br><span class="line">             &#125;</span><br><span class="line">test()()</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">        <span class="literal">undefined</span></span><br></pre></td></tr></table></figure></div><p>第一个小括号是调用 <code>test</code> 函数，这个 <code>test</code> 函数中定义了一个局部变量 <code>a</code>，还返回了一个内部函数。因此，第一次调用的结果就是返回一个内部函数，而第二个圆括号才会调用那个内部函数。</p><p>正常情况下，我们调用一个函数，其里面的局部变量会在函数调用结束后销毁，这也是我们在全局作用域里面无法访问函数局部变量的原因。但是，如果你使用了<strong>闭包</strong>，那么就会让这个局部变量不随着原函数的销毁而销毁，而是继续存在。比如我反复调用这个内部函数，就会发现这个变量 <code>a</code> 一直存在，就好像是一个全局作用域里面的变量似的。</p><p>闭包函数的这种写法就相当于在全局作用域里面定义了一个变量 <code>a</code>， 然后在函数中操作全局变量。但是用这样的形式操作，也就是利用闭包操作可以减少很多不必要的全局变量。全局作用域是一块公共区域，如果为了某个单一的功能而定义一个全局变量，则会导致全局变量过多，代码就变得一团糟了。因此在这种情况下，还是要优先考虑使用闭包。</p><h2 id="自执行函数"><a href="#自执行函数" class="headerlink" title="自执行函数"></a>自执行函数</h2><p>自执行函数的例子：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'测试自执行函数'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)();</span><br></pre></td></tr></table></figure></div><p>以上会立即执行函数输出语句。</p><p>定义一个自执行函数的语法是：<code>(定义一个没有名字的函数)();</code></p><p>也可以给一个名字，但是没有必要，因为<strong>自执行函数会立即执行且只会执行一次</strong>。</p><p>自执行函数一般配合闭包使用，因为这样一来，就可以直接得到闭包环境下的内部函数了，外部函数只是为了产生闭包环境而临时定义的函数。正因为如此，所以根本没有必要给外部函数取一个名字。</p><p>因此，可以将<a href="#%E9%97%AD%E5%8C%85">闭包</a>中的例子改成如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> innertest = (</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)();</span><br><span class="line">innertest();</span><br></pre></td></tr></table></figure></div><h2 id="“new”一个函数"><a href="#“new”一个函数" class="headerlink" title="“new”一个函数"></a>“new”一个函数</h2><p>看个🌰：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">hello(); <span class="comment">// Window</span></span><br><span class="line"><span class="keyword">new</span> hello(); <span class="comment">// Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newObject = <span class="keyword">new</span> hello();</span><br><span class="line"><span class="built_in">console</span>.log(newObject);</span><br></pre></td></tr></table></figure></div><p><code>this</code> 也是 JavaScript 中的一个关键字，它是什么意思呢？其实很简单，**<code>this</code> 永远指向当前函数的调用者**。</p><p>因此 <code>hello();</code> 会打印出 <code>this</code> 所指向的 <code>window</code> 对象。而 <code>new hello();</code> 会打印出 <code>Object</code> 对象。</p><p>比如上面代码， <code>new</code> 一个函数，会返回函数的真实调用者即 <code>this</code> 所指向的对象，这个对象哪里来的呢？其实是<strong>函数内部产生了一个新的对象，并且 <code>this</code> 指向了这个对象，然后函数默认返回了这个新的对象</strong>。这种函数还有一个别称，叫作<strong>构造函数</strong>。</p><p>构造函数的函数名称首字母一般大写。</p><p>比如定义一个水果的构造函数：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fruit</span>(<span class="params">name,smell,color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.smell = smell;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> redApple = <span class="keyword">new</span> Fruit(<span class="string">'苹果'</span>,<span class="string">'苹果味'</span>,<span class="string">'红色'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(redApple);</span><br></pre></td></tr></table></figure></div><p>不仅可以有属性，还可以有方法：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fruit</span>(<span class="params">name, smell, color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.smell = smell;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'吃'</span>+<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> redApple = <span class="keyword">new</span> Fruit(<span class="string">'苹果'</span>, <span class="string">'苹果味'</span>, <span class="string">'红色'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(redApple);</span><br><span class="line">redApple.eat();</span><br></pre></td></tr></table></figure></div><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>所谓回调函数，就是指把一个函数的定义当作参数传递给另一个函数。</p><p>看个🌰：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">    callback(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以上代码，定义了一个函数 <code>test (data, callback)</code>，函数 <code>test</code> 有两个参数，一个 <code>data</code>，一个 <code>callback</code>，其中 <code>callback</code> 是一个函数的定义，可以在 <code>test</code> 函数中调用 <code>callback (data)</code> 方法，<code>data</code> 是参数。</p><p>回调函数与匿名函数结合起来就是：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">data, callback</span>) </span>&#123;</span><br><span class="line">    callback(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'world'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hello,'</span>+data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>更多关于回调函数，参考 <a href="https://cnodejs.org/topic/564dd2881ba2ef107f854e0b" target="_blank" rel="noopener">JavaScript回调函数 - CNode技术社区</a></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    sum: <span class="number">0</span>,</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sum = num1 + num2;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="keyword">this</span>.sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, obj.add);</span><br><span class="line"><span class="built_in">console</span>.log(obj.sum);   <span class="comment">//=&gt;0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.sum);  <span class="comment">//=&gt;3</span></span><br></pre></td></tr></table></figure></div><p>上述代码调用回调函数的时候是在全局环境下，因此 <code>this</code> 指向的是 <code>window</code>，所以 <code>sum</code> 的值是赋值给 <code>window</code> 的。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;参数传递&quot;&gt;&lt;a href=&quot;#参数传递&quot; class=&quot;headerlink&quot; title=&quot;参数传递&quot;&gt;&lt;/a&gt;参数传递&lt;/h2&gt;&lt;p&gt;JavaScript 在传递参数时，其实是一个数组，其实&lt;strong&gt;所有的参数都会被装载到函数内部一个叫作 &lt;code&gt;arguments&lt;/code&gt; 的数组里面&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// window.alert(&#39;Hello World&#39;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;      &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;// alert(arguments[0])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//   arguments.forEach(element =&amp;gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//     sum+=element;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;          &lt;span class=&quot;comment&quot;&gt;//   &amp;#125;);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; index &amp;lt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.length; index++) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; element = &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;[index];&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// console.log(element);&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum += element;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;javascript&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;          alert(&lt;span class=&quot;string&quot;&gt;&quot;参数为空&quot;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      add();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;actionscript&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// var a = [1, 2];&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      add(1, 2, 3, 4, 5);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如上所示，即使在定义函数 &lt;code&gt;add&lt;/code&gt; 时，没有声明参数，在调用时传入任意参数都是会被装载到 &lt;code&gt;arguments&lt;/code&gt; 数组的。&lt;/p&gt;
&lt;p&gt;只是需要注意的是，只能使用 &lt;code&gt;for&lt;/code&gt; 循环遍历 &lt;code&gt;arguments&lt;/code&gt; ，不能在其上使用 &lt;code&gt;forEach&lt;/code&gt; 遍历（会报错，不存在 &lt;code&gt;forEach&lt;/code&gt; ）。&lt;/p&gt;
&lt;h2 id=&quot;闭包&quot;&gt;&lt;a href=&quot;#闭包&quot; class=&quot;headerlink&quot; title=&quot;闭包&quot;&gt;&lt;/a&gt;闭包&lt;/h2&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://xiaoyan94.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>.NET 数据并行性（任务并行库） Data Parallelism (Task Parallel Library)</title>
    <link href="https://xiaoyan94.github.io/2022/09/01/NET-Data-Parallelism-Task-Parallel-Library/"/>
    <id>https://xiaoyan94.github.io/2022/09/01/NET-Data-Parallelism-Task-Parallel-Library/</id>
    <published>2022-09-01T15:31:10.000Z</published>
    <updated>2022-09-01T15:36:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Data-Parallelism-数据并行性"><a href="#Data-Parallelism-数据并行性" class="headerlink" title="Data Parallelism (数据并行性)"></a>Data Parallelism (数据并行性)</h2><p><em>Data parallelism</em> refers to scenarios in which the same operation is performed concurrently (that is, in parallel) on elements in a source collection or array. In data parallel operations, the source collection is partitioned so that multiple threads can operate on different segments concurrently.</p><p>The Task Parallel Library (TPL) supports data parallelism through the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallel" target="_blank" rel="noopener">System.Threading.Tasks.Parallel</a> class. This class provides method-based parallel implementations of <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-for-statement" target="_blank" rel="noopener">for</a> and <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement" target="_blank" rel="noopener">foreach</a> loops (<code>For</code> and <code>For Each</code> in Visual Basic). You write the loop logic for a <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallel.for" target="_blank" rel="noopener">Parallel.For</a> or <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallel.foreach" target="_blank" rel="noopener">Parallel.ForEach</a> loop much as you would write a sequential loop. You do not have to create threads or queue work items. In basic loops, you do not have to take locks. The TPL handles all the low-level work for you. For in-depth information about the use of <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallel.for" target="_blank" rel="noopener">Parallel.For</a> and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallel.foreach" target="_blank" rel="noopener">Parallel.ForEach</a>, download the document <a href="https://www.microsoft.com/download/details.aspx?id=19222" target="_blank" rel="noopener">Patterns for Parallel Programming: Understanding and Applying Parallel Patterns with the .NET Framework 4</a>. The following code example shows a simple <code>foreach</code> loop and its parallel equivalent.</p><h2 id="Parallel-ForEach"><a href="#Parallel-ForEach" class="headerlink" title="Parallel.ForEach"></a>Parallel.ForEach</h2>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term=".NET" scheme="https://xiaoyan94.github.io/tags/NET/"/>
    
    <category term="并行编程" scheme="https://xiaoyan94.github.io/tags/%E5%B9%B6%E8%A1%8C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript获取网页URL地址的查询参数(QueryString)的方法</title>
    <link href="https://xiaoyan94.github.io/2022/08/31/JavaScript%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5URL%E5%9C%B0%E5%9D%80%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0-QueryString-%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaoyan94.github.io/2022/08/31/JavaScript%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5URL%E5%9C%B0%E5%9D%80%E7%9A%84%E6%9F%A5%E8%AF%A2%E5%8F%82%E6%95%B0-QueryString-%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-08-31T13:27:39.000Z</published>
    <updated>2022-08-31T15:44:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求：获取-URL-查询参数"><a href="#需求：获取-URL-查询参数" class="headerlink" title="需求：获取 URL 查询参数"></a>需求：获取 URL 查询参数</h2><p>需求详情</p><p>请求URL: <code>http://example.com:80/method?id=1&amp;name=xy</code></p><p>获取请求参数id、name的值1、xy。</p><h2 id="方法一：URLSearchParams"><a href="#方法一：URLSearchParams" class="headerlink" title="方法一：URLSearchParams"></a>方法一：<code>URLSearchParams</code></h2><p>使用 <code>URLSearchParams</code> 对象的 <code>get</code> 方法。参考：</p><a id="more"></a><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams/URLSearchParams" target="_blank" rel="noopener">URLSearchParams() - Web API 接口参考 | MDN</a></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlParams = <span class="keyword">new</span> URLSearchParams(<span class="built_in">window</span>.location.search);</span><br><span class="line"><span class="built_in">console</span>.log(urlParams.has(<span class="string">'id'</span>)); <span class="comment">// 打印是否包含QueryString：line</span></span><br><span class="line"><span class="keyword">var</span> id = urlParams.get(<span class="string">'id'</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></div><h2 id="方法二：正则表达式"><a href="#方法二：正则表达式" class="headerlink" title="方法二：正则表达式"></a>方法二：正则表达式</h2><p>方法如下（<code>getQueryString</code>）：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">// 自定义获取URL查询参数QueryString</span></span><br><span class="line">    <span class="comment">// 函数参数 name：URL查询参数名称</span></span><br><span class="line">    <span class="comment">// 函数返回值：URL查询参数值或null（不存在的话）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^|&amp;)'</span> + name + <span class="string">'=([^&amp;]*)(&amp;|$)'</span>, <span class="string">'i'</span>);</span><br><span class="line">        <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">        <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> line;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 360极速模式/Chromium/火狐内核支持 URLSearchParams</span></span><br><span class="line">        <span class="keyword">var</span> urlParams = <span class="keyword">new</span> URLSearchParams(<span class="built_in">window</span>.location.search);</span><br><span class="line">        <span class="built_in">console</span>.log(urlParams.has(<span class="string">'line'</span>)); <span class="comment">// 打印是否包含QueryString：line</span></span><br><span class="line">        line = urlParams.get(<span class="string">'line'</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// IE/兼容模式：尝试使用自定义函数获取查询参数line</span></span><br><span class="line">        line = getQueryString(<span class="string">'line'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(line);</span><br><span class="line">    <span class="keyword">if</span> (line == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">"未获取到line参数。"</span>);</span><br><span class="line">        alert(<span class="string">"页面查询参数错误！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (line == <span class="string">'1'</span>) &#123;</span><br><span class="line">        $(<span class="string">".specialDiv"</span>).show();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'show'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">".specialDiv"</span>).hide();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"hide"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;需求：获取-URL-查询参数&quot;&gt;&lt;a href=&quot;#需求：获取-URL-查询参数&quot; class=&quot;headerlink&quot; title=&quot;需求：获取 URL 查询参数&quot;&gt;&lt;/a&gt;需求：获取 URL 查询参数&lt;/h2&gt;&lt;p&gt;需求详情&lt;/p&gt;
&lt;p&gt;请求URL: &lt;code&gt;http://example.com:80/method?id=1&amp;amp;name=xy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;获取请求参数id、name的值1、xy。&lt;/p&gt;
&lt;h2 id=&quot;方法一：URLSearchParams&quot;&gt;&lt;a href=&quot;#方法一：URLSearchParams&quot; class=&quot;headerlink&quot; title=&quot;方法一：URLSearchParams&quot;&gt;&lt;/a&gt;方法一：&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;URLSearchParams&lt;/code&gt; 对象的 &lt;code&gt;get&lt;/code&gt; 方法。参考：&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://xiaoyan94.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>.NET Framework 连接 Oracle数据库：找不到请求的 .Net Framework Data Provider。可能没有安装</title>
    <link href="https://xiaoyan94.github.io/2022/08/29/NET-Framework-%E8%BF%9E%E6%8E%A5-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://xiaoyan94.github.io/2022/08/29/NET-Framework-%E8%BF%9E%E6%8E%A5-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-08-29T08:13:41.000Z</published>
    <updated>2022-08-31T13:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1-%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF">1. 错误信息</a><ul><li><a href="#11-%E9%94%99%E8%AF%AF%E8%AF%A6%E6%83%85">1.1. 错误详情</a></li></ul></li><li><a href="#2-%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0">2. 问题原因</a></li><li><a href="#3-%E6%9F%A5%E7%9C%8B%E4%B8%8E%E8%AE%BE%E7%BD%AEoracle_home%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">3. 查看与设置ORACLE_HOME环境变量</a><ul><li><a href="#31-windows%E4%B8%8B%E6%9F%A5%E7%9C%8B%E4%B8%8E%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">3.1. Windows下查看与设置环境变量</a></li></ul></li><li><a href="#4-%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85odpnet%E9%A9%B1%E5%8A%A8">4. 下载与安装ODP.NET驱动</a></li><li><a href="#5-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE">5. Oracle数据库连接配置</a><ul><li><a href="#51-%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E9%94%99%E8%AF%AF">5.1. 分析与解决错误</a><ul><li><a href="#511-%E5%85%88%E4%BA%86%E8%A7%A3%E4%B8%8B-oracle-tnsnamesora-%E6%96%87%E4%BB%B6%E7%94%A8%E6%B3%95">5.1.1. 先了解下 oracle <code>tnsnames.ora</code> 文件用法</a><ul><li><a href="#5111-1%E7%94%A8%E9%80%94">5.1.1.1. 1.用途</a></li><li><a href="#5112-2%E7%94%A8%E6%B3%95">5.1.1.2. 2.用法</a></li></ul></li></ul></li><li><a href="#52-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">5.2. 解决方法</a></li></ul></li></ul><h2 id="1-错误信息"><a href="#1-错误信息" class="headerlink" title="1. 错误信息"></a>1. 错误信息</h2><p>解决错误信息：<strong>找不到请求的 .Net Framework Data Provider。可能没有安装</strong></p><h3 id="1-1-错误详情"><a href="#1-1-错误详情" class="headerlink" title="1.1. 错误详情"></a>1.1. 错误详情</h3><p><img src="/2022/08/29/NET-Framework-%E8%BF%9E%E6%8E%A5-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/2022-08-30-08-53-43.png" alt="找不到请求的 .Net Framework Data Provider。可能没有安装。"></p><a id="more"></a><hr><p>“&#x2F;”应用程序中的服务器错误</p><p><em>找不到请求的 .Net Framework Data Provider。可能没有安装。</em></p><p><strong>说明:</strong> 执行当前 Web 请求期间，出现未经处理的异常。请检查堆栈跟踪信息，以了解有关该错误以及代码中导致错误的出处的详细信息。</p><p><strong>异常详细信息:</strong> System.ArgumentException: 找不到请求的 .Net Framework Data Provider。可能没有安装。</p><p><strong>源错误:</strong></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行 3216:</span><br><span class="line">行 3217:            var arr &#x3D; list.Select(s &#x3D;&gt; s.SoMainId).ToArray();</span><br><span class="line">行 3218:            var query &#x3D; _ncdataEntities.Database.SqlQuery&lt;SOMainCustomerInfo&gt;(string.Format( </span><br><span class="line">行 3219:                            @&quot;select a.csaleorderid AS SOMainId</span><br><span class="line">,a.vbillcode AS SOCode</span><br></pre></td></tr></table></figure></div><p><strong>源文件:</strong> <code>D:\\Portal-VS2013-NC\\Portal-VS2013-NC\\DataAccess\\Bom\\DASOBom.cs</code> <strong>行:</strong> 3218</p><p><strong>堆栈跟踪:</strong></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[ArgumentException: 找不到请求的 .Net Framework Data Provider。可能没有安装。]</span><br><span class="line">   System.Data.Common.DbProviderFactories.GetFactory(String providerInvariantName) +1025375</span><br><span class="line">   System.Data.EntityClient.EntityConnection.GetFactory(String providerString) +27</span><br><span class="line"></span><br><span class="line">[ArgumentException: 指定的存储区提供程序在配置中找不到，或者无效。]</span><br><span class="line">   System.Data.EntityClient.EntityConnection.GetFactory(String providerString) +90</span><br><span class="line">   System.Data.EntityClient.EntityConnection.ChangeConnectionString(String newConnectionString) +503</span><br><span class="line">   System.Data.EntityClient.EntityConnection..ctor(String connectionString) +47</span><br><span class="line">   System.Data.Entity.Internal.LazyInternalConnection.InitializeFromConnectionStringSetting(ConnectionStringSettings appConfigConnection) +78</span><br><span class="line">   System.Data.Entity.Internal.LazyInternalConnection.TryInitializeFromAppConfig(String name, AppConfig config) +32</span><br><span class="line">   System.Data.Entity.Internal.LazyInternalConnection.Initialize() +129</span><br><span class="line">   System.Data.Entity.Internal.LazyInternalConnection.CreateObjectContextFromConnectionModel() +13</span><br><span class="line">   System.Data.Entity.Internal.LazyInternalContext.InitializeContext() +274</span><br><span class="line">   System.Data.Entity.Internal.InternalContext.ExecuteSqlQuery(String sql, Object[] parameters) +26</span><br><span class="line">   System.Data.Entity.Internal.InternalContext.ExecuteSqlQueryAsIEnumerable(String sql, Object[] parameters) +63</span><br><span class="line">   System.Data.Entity.Internal.InternalContext.ExecuteSqlQuery(Type elementType, String sql, Object[] parameters) +175</span><br><span class="line">   System.Data.Entity.Internal.InternalSqlNonSetQuery.GetEnumerator() +26</span><br><span class="line">   System.Data.Entity.Internal.InternalSqlQuery&#96;1.GetEnumerator() +17</span><br><span class="line">   System.Collections.Generic.List&#96;1..ctor(IEnumerable&#96;1 collection) +174</span><br><span class="line">   System.Linq.Enumerable.ToList(IEnumerable&#96;1 source) +61</span><br><span class="line">   Portal.DataAccess.Bom.DASOBom.GetCPSOBomMainList(List&#96;1 soBomList, Int32&amp; pageid, Int32 pagesize) in D:\Portal-VS2013-NC\Portal-VS2013-NC\DataAccess\Bom\DASOBom.cs:3218</span><br><span class="line">   Portal.BLL.Bom.SOBom.GetCPSOBomMainObjectList(List&#96;1 soBomList, Int32&amp; pageid, Int32 pagesize) in D:\Portal-VS2013-NC\Portal-VS2013-NC\BLL\Bom\SOBom.cs:2611</span><br><span class="line">   Portal.Web.bom.SOBomMain_CP.InitData(String strSearchText) in D:\Portal-VS2013-NC\Portal-VS2013-NC\web\bom\SOBomMain_CP.aspx.cs:108</span><br><span class="line">   Portal.Web.bom.SOBomMain_CP.BtnSearchClick(Object sender, EventArgs e) in D:\Portal-VS2013-NC\Portal-VS2013-NC\web\bom\SOBomMain_CP.aspx.cs:151</span><br><span class="line">   Portal.Web.bom.SOBomMain_CP.Page_Load(Object sender, EventArgs e) in D:\Portal-VS2013-NC\Portal-VS2013-NC\web\bom\SOBomMain_CP.aspx.cs:49</span><br><span class="line">   System.Web.Util.CalliEventHandlerDelegateProxy.Callback(Object sender, EventArgs e) +52</span><br><span class="line">   System.Web.UI.Control.OnLoad(EventArgs e) +97</span><br><span class="line">   System.Web.UI.Control.LoadRecursive() +61</span><br><span class="line">   System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint) +693</span><br></pre></td></tr></table></figure></div><p><strong>版本信息:</strong> Microsoft .NET Framework 版本:4.0.30319; ASP.NET 版本:4.8.4494.0</p><hr><h2 id="2-问题原因"><a href="#2-问题原因" class="headerlink" title="2. 问题原因"></a>2. 问题原因</h2><p>出现此错误的原因是：<strong>Oracle数据库的ODP.NET驱动没有安装</strong>。</p><p>ps:</p><blockquote><p><strong>首先考虑 ODP.NET 是否安装成功</strong>的，其次，考虑x86&#x2F;x64的原因，您的项目的build target(x86&#x2F;x64)设定要与本机安装的ODP.NET的驱动版本(x86&#x2F;x64)要一致。</p></blockquote><hr><h2 id="3-查看与设置ORACLE-HOME环境变量"><a href="#3-查看与设置ORACLE-HOME环境变量" class="headerlink" title="3. 查看与设置ORACLE_HOME环境变量"></a>3. 查看与设置ORACLE_HOME环境变量</h2><p>查看设置的环境变量是否正确: <code>echo %ORACLE_HOME%</code></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Downloads</span>\压缩文件\<span class="title">ODP.NET_Managed_ODAC122cR1_3</span>&gt;<span class="title">echo</span> %<span class="title">ORACLE_HOME</span>%</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">app</span>\<span class="title">R00004050</span>\<span class="title">product</span>\11.2.0\<span class="title">client_1</span></span></span><br></pre></td></tr></table></figure></div><p>若没有定义，去系统环境变量中添加，<code>D:\app\R00004050\product\11.2.0\client_1</code></p><p><img src="/2022/08/29/NET-Framework-%E8%BF%9E%E6%8E%A5-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/2022-08-30-10-58-26.png" alt="添加环境变量"></p><h3 id="3-1-Windows下查看与设置环境变量"><a href="#3-1-Windows下查看与设置环境变量" class="headerlink" title="3.1. Windows下查看与设置环境变量"></a>3.1. Windows下查看与设置环境变量</h3><p>使用命令或在系统环境变量中设置 <code>ORACLE_HOME</code> 环境变量。</p><p>命令设置方式参考：</p><p><a href="https://blog.csdn.net/csdjia11/article/details/107773757" target="_blank" rel="noopener">Windows10通过cmd命令行添加环境变量_code_god_1024的博客-CSDN博客_命令行添加环境变量</a></p><hr><h2 id="4-下载与安装ODP-NET驱动"><a href="#4-下载与安装ODP-NET驱动" class="headerlink" title="4. 下载与安装ODP.NET驱动"></a>4. 下载与安装ODP.NET驱动</h2><p>.Net应用程序与ODP.Net处理器类型保持一致。</p><p>查看<code>web.config</code>文件</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TargetFrameworkVersion</span>&gt;</span>v4.0<span class="tag">&lt;/<span class="name">TargetFrameworkVersion</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">PlatformTarget</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">PlatformTarget</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>我是32位x86版本，.Net Framework 4.0, 所以下载<code>32位版ODP.NET</code>。</p><p>下载地址(总揽):<br><a href="http://www.oracle.com/technetwork/topics/dotnet/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/topics/dotnet/downloads/index.html</a></p><p>64位ODP.Net下载地址:<br><a href="http://www.oracle.com/technetwork/database/windows/downloads/index-090165.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/database/windows/downloads/index-090165.html</a></p><p><strong>32位ODP.Net下载地址</strong>:<br><a href="http://www.oracle.com/technetwork/database/windows/downloads/utilsoft-087491.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/database/windows/downloads/utilsoft-087491.html</a></p><p>注意下载的时候,跟你的数据库版本保持一致.</p><p>下载解压后，打开文件 <code>readme.htm</code> 查看安装方法（管理员模式CMD命令安装）。</p><p>CMD（管理员模式打开），<code>cd</code> 进入<code>ODP.NET</code>解压目录（如果解压目录在D盘，需要先输入<code>D:\</code>进入D盘，再输入<code>cd D:\你的解压目录\</code>）：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="CMD"><figure class="iseeu highlight /cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\</span></span><br><span class="line"><span class="function"><span class="title">cd</span> 你的解压目录</span></span><br><span class="line"><span class="function"><span class="title">install_odpm.bat</span> %<span class="title">ORACLE_HOME</span>% <span class="title">both</span> <span class="title">true</span></span></span><br></pre></td></tr></table></figure></div><p>使用命令安装完成后，查看是否生成节点信息:在对应的.NetFramework版本下查看 <code>machine.config</code>里面的<code>&lt;system.data&gt;&lt;DbProviderFactories&gt;</code>节点。</p><p>我的文件在：<code>C:\Windows\Microsoft.NET\Framework\v4.0.30319\Config\machine.config</code>，如下图：</p><p><a href="https://imgse.com/i/vhE8HI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/08/30/vhE8HI.png" alt="vhE8HI.png"></a></p><p>生成的节点信息：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DbProviderFactories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"ODP.NET, Managed Driver"</span> <span class="attr">invariant</span>=<span class="string">"Oracle.ManagedDataAccess.Client"</span> <span class="attr">description</span>=<span class="string">"Oracle Data Provider for .NET, Managed Driver"</span> <span class="attr">type</span>=<span class="string">"Oracle.ManagedDataAccess.Client.OracleClientFactory, Oracle.ManagedDataAccess, Version=4.122.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342"</span> /&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"Microsoft SQL Server Compact Data Provider 4.0"</span> <span class="attr">invariant</span>=<span class="string">"System.Data.SqlServerCe.4.0"</span> <span class="attr">description</span>=<span class="string">".NET Framework Data Provider for Microsoft SQL Server Compact"</span> <span class="attr">type</span>=<span class="string">"System.Data.SqlServerCe.SqlCeProviderFactory, System.Data.SqlServerCe, Version=4.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DbProviderFactories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">system.data</span>&gt;</span></span><br></pre></td></tr></table></figure></div><hr><p>至此，<strong>驱动应该安装完成了</strong>。这个错误也解决了。下面的错误和ODP.NET驱动实际上没关系。</p><hr><h2 id="5-Oracle数据库连接配置"><a href="#5-Oracle数据库连接配置" class="headerlink" title="5. Oracle数据库连接配置"></a>5. Oracle数据库连接配置</h2><p>安装ODP.NET后重启应用</p><p><img src="/2022/08/29/NET-Framework-%E8%BF%9E%E6%8E%A5-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/2022-08-30-08-52-27.png" alt="“/”应用程序中的服务器错误"></p><p>“&#x2F;”应用程序中的服务器错误</p><hr><p>ORA-01017: <em>invalid username&#x2F;password; logon denied</em></p><p><strong>说明:</strong> 执行当前 Web 请求期间，出现未经处理的异常。请检查堆栈跟踪信息，以了解有关该错误以及代码中导致错误的出处的详细信息。</p><p><strong>异常详细信息:</strong> Oracle.ManagedDataAccess.Client.OracleException: ORA-01017: invalid username&#x2F;password; logon denied</p><p><strong>源错误:</strong></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">行 3216:</span><br><span class="line">行 3217:            var arr &#x3D; list.Select(s &#x3D;&gt; s.SoMainId).ToArray();</span><br><span class="line">行 3218:            var query &#x3D; _ncdataEntities.Database.SqlQuery&lt;SOMainCustomerInfo&gt;(string.Format( 行 3219:                            @&quot;select a.csaleorderid AS SOMainId</span><br><span class="line">行 3220:                                    ,a.vbillcode AS SOCode</span><br></pre></td></tr></table></figure></div><p><strong>源文件:</strong> D:\Portal-VS2013-NC\Portal-VS2013-NC\DataAccess\Bom\DASOBom.cs <strong>行:</strong> 3218</p><p><strong>堆栈跟踪:</strong></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[OracleException (0x80004005): ORA-01017: invalid username&#x2F;password; logon denied]</span><br><span class="line">   OracleInternal.ConnectionPool.PoolManager&#96;3.Get(ConnectionString csWithDiffOrNewPwd, Boolean bGetForApp, CriteriaCtx criteriaCtx, String affinityInstanceName, Boolean bForceMatch) +10977</span><br><span class="line">   OracleInternal.ConnectionPool.OraclePoolManager.Get(ConnectionString csWithNewPassword, Boolean bGetForApp, CriteriaCtx criteriaCtx, String affinityInstanceName, Boolean bForceMatch) +964</span><br><span class="line">   OracleInternal.ConnectionPool.OracleConnectionDispenser&#96;3.Get(ConnectionString cs, PM conPM, ConnectionString pmCS, SecureString securedPassword, SecureString securedProxyPassword, CriteriaCtx criteriaCtx) +1065</span><br><span class="line">   Oracle.ManagedDataAccess.Client.OracleConnection.Open() +3399</span><br><span class="line">   System.Data.EntityClient.EntityConnection.OpenStoreConnectionIf(Boolean openCondition, DbConnection storeConnectionToOpen, DbConnection originalConnection, String exceptionCode, String attemptedOperation, Boolean&amp; closeStoreConnectionOnFailure) +41</span><br><span class="line"></span><br><span class="line">[EntityException: 基础提供程序在 Open 上失败。]</span><br><span class="line">   System.Data.EntityClient.EntityConnection.OpenStoreConnectionIf(Boolean openCondition, DbConnection storeConnectionToOpen, DbConnection originalConnection, String exceptionCode, String attemptedOperation, Boolean&amp; closeStoreConnectionOnFailure) +220</span><br><span class="line">   System.Data.EntityClient.EntityConnection.Open() +105</span><br><span class="line">   System.Data.Objects.ObjectContext.EnsureConnection() +77</span><br><span class="line">   System.Data.Objects.ObjectContext.ExecuteStoreQueryInternal(String commandText, String entitySetName, MergeOption mergeOption, Object[] parameters) +95</span><br><span class="line">   System.Data.Objects.ObjectContext.ExecuteStoreQuery(String commandText, Object[] parameters) +61</span><br><span class="line">   System.Data.Entity.Internal.InternalContext.ExecuteSqlQuery(String sql, Object[] parameters) +93</span><br><span class="line">   System.Data.Entity.Internal.InternalContext.ExecuteSqlQueryAsIEnumerable(String sql, Object[] parameters) +63</span><br><span class="line">   System.Data.Entity.Internal.InternalContext.ExecuteSqlQuery(Type elementType, String sql, Object[] parameters) +175</span><br><span class="line">   System.Data.Entity.Internal.InternalSqlNonSetQuery.GetEnumerator() +26</span><br><span class="line">   System.Data.Entity.Internal.InternalSqlQuery&#96;1.GetEnumerator() +17</span><br><span class="line">   System.Collections.Generic.List&#96;1..ctor(IEnumerable&#96;1 collection) +174</span><br><span class="line">   System.Linq.Enumerable.ToList(IEnumerable&#96;1 source) +61</span><br><span class="line">   Portal.DataAccess.Bom.DASOBom.GetCPSOBomMainList(List&#96;1 soBomList, Int32&amp; pageid, Int32 pagesize) in D:\Portal-VS2013-NC\Portal-VS2013-NC\DataAccess\Bom\DASOBom.cs:3218</span><br><span class="line">   Portal.BLL.Bom.SOBom.GetCPSOBomMainObjectList(List&#96;1 soBomList, Int32&amp; pageid, Int32 pagesize) in D:\Portal-VS2013-NC\Portal-VS2013-NC\BLL\Bom\SOBom.cs:2611</span><br><span class="line">   Portal.Web.bom.SOBomMain_CP.InitData(String strSearchText) in D:\Portal-VS2013-NC\Portal-VS2013-NC\web\bom\SOBomMain_CP.aspx.cs:108</span><br><span class="line">   Portal.Web.bom.SOBomMain_CP.BtnSearchClick(Object sender, EventArgs e) in D:\Portal-VS2013-NC\Portal-VS2013-NC\web\bom\SOBomMain_CP.aspx.cs:151</span><br><span class="line">   Portal.Web.bom.SOBomMain_CP.Page_Load(Object sender, EventArgs e) in D:\Portal-VS2013-NC\Portal-VS2013-NC\web\bom\SOBomMain_CP.aspx.cs:49</span><br><span class="line">   System.Web.Util.CalliEventHandlerDelegateProxy.Callback(Object sender, EventArgs e) +52</span><br><span class="line">   System.Web.UI.Control.OnLoad(EventArgs e) +97</span><br><span class="line">   System.Web.UI.Control.LoadRecursive() +61</span><br><span class="line">   System.Web.UI.Page.ProcessRequestMain(Boolean includeStagesBeforeAsyncPoint, Boolean includeStagesAfterAsyncPoint) +693</span><br></pre></td></tr></table></figure></div><h3 id="5-1-分析与解决错误"><a href="#5-1-分析与解决错误" class="headerlink" title="5.1. 分析与解决错误"></a>5.1. 分析与解决错误</h3><p>出现此错误，说明前面安装Oracle连接驱动正常，但是连接配置有问题，所以报用户名密码无效。</p><p>查看源码中<code>_ncdataEntities</code>对象在初始化时所使用的连接字符串<code>NCDATAEntities</code>在<code>app.config</code>中的配置内容：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"NCDATAEntities"</span> <span class="attr">connectionString</span>=<span class="string">"metadata=res://*/NCDATAModel.csdl|res://*/NCDATAModel.ssdl|res://*/NCDATAModel.msl;provider=Oracle.ManagedDataAccess.Client;provider connection string=<span class="symbol">&amp;quot;</span>data source=ORCL;password=******;user id=NCDB<span class="symbol">&amp;quot;</span>"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">providerName</span>=<span class="string">"System.Data.EntityClient"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>这是一种连接字符串的写法，Oracle 对 微软 实体框架 EF6 的支持，在 ODP.NET 的新版本中才有实现。</p><p>关注这里的 <code>data source</code>, <code>password</code>, <code>user id</code> 几个关键属性。我们的报错信息 <code>Oracle.ManagedDataAccess.Client.OracleException: ORA-01017: invalid username/password; logon denied</code> 主要和这几个参数配置有关。</p><h4 id="5-1-1-先了解下-oracle-tnsnames-ora-文件用法"><a href="#5-1-1-先了解下-oracle-tnsnames-ora-文件用法" class="headerlink" title="5.1.1. 先了解下 oracle tnsnames.ora 文件用法"></a>5.1.1. 先了解下 oracle <code>tnsnames.ora</code> 文件用法</h4><h5 id="5-1-1-1-1-用途"><a href="#5-1-1-1-1-用途" class="headerlink" title="5.1.1.1. 1.用途"></a>5.1.1.1. 1.用途</h5><p>Oracle客户端所需要的一个文件，通过该文件可以配置数据库的连接地址，配好后，Oracle地址了，直接用简易的字符串代替。</p><p>如：本该是数据库地址为：<code>127.0.0.1:1521/orcl</code>,通过设置<code>tnsnames.ora</code>,为它起的别名为：<code>dataBaseAddr</code>,就可以用 <code>dataBaseAddr</code> 代替了。</p><h5 id="5-1-1-2-2-用法"><a href="#5-1-1-2-2-用法" class="headerlink" title="5.1.1.2. 2.用法"></a>5.1.1.2. 2.用法</h5><p>用以管理员方式运行文本编辑器，打开Oracle客户端目录的<code>D:\app\R00004050\product\11.2.0\client_1\network\admin\tnsnames.ora</code>文件，内容如下：</p><p><a href="https://imgse.com/i/vhEt4f" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2022/08/30/vhEt4f.png" alt="vhEt4f.png"></a></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ORCL &#x3D;</span><br><span class="line">   (DESCRIPTION &#x3D;</span><br><span class="line">    (ADDRESS &#x3D; (PROTOCOL &#x3D; TCP)(HOST &#x3D; 192.168.80.50)(PORT &#x3D; 1521))</span><br><span class="line">    (CONNECT_DATA &#x3D;</span><br><span class="line">      (SERVER &#x3D; DEDICATED)</span><br><span class="line">      (SERVICE_NAME &#x3D; ORCL) </span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></div><p>在我们的项目中的连接字符串所设置的<code>data source=ORCL</code> 属性，这里的<code>ORCL</code>就是<code>tnsnames.ora</code>文件中所配置的别名 <code>ORCL = (...)</code>。</p><h3 id="5-2-解决方法"><a href="#5-2-解决方法" class="headerlink" title="5.2. 解决方法"></a>5.2. 解决方法</h3><p>解决方法：检查项目 <code>app.config</code> 的 <code>user id</code>, <code>password</code> 以及这里<code>tnsnames.ora</code>文件的 <code>HOST</code>,<code>PORT</code> 是否正确。</p><p>本例中 HOST 地址配置错误，使用了测试环境 Oracle 的 IP 地址，所以将 <code>HOST</code> 改为生产环境 IP 地址后 Oracle 数据库连接正确。</p><hr><p>参考文章：</p><ol><li><a href="https://www.cnblogs.com/gudi/p/6110875.html" target="_blank" rel="noopener"><strong>错误:找不到请求的 .Net Framework Data Provider。可能没有安装.</strong></a></li><li><a href="https://blog.51cto.com/iteyer/3239259" target="_blank" rel="noopener">.net中使用ODP.net访问Oracle数据库（无客户端部署方法）_iteyer的技术博客_51CTO博客</a></li><li><a href="https://social.msdn.microsoft.com/Forums/vstudio/zh-CN/b408efcb-d03f-4ddb-b9a5-e1db2d5b793d/252141998121040358312771430340-net-framework-data?forum=wpfzhchs" target="_blank" rel="noopener">找不到请求的 .Net Framework Data Provider。可能没有安装。</a></li><li><a href="https://www.cnblogs.com/Marydon20170307/p/9453064.html" target="_blank" rel="noopener"><strong>oracle tnsnames.ora文件用法说明</strong></a></li><li><a href="https://www.oracle.com/ocom/groups/public/@otn/documents/webcontent/229640_zhs.htm" target="_blank" rel="noopener">Oracle Data Provider for .NET（C# 版）入门</a></li><li><a href="https://blog.csdn.net/WuLex/article/details/87303446" target="_blank" rel="noopener">ODP.NET_风神修罗使的博客-CSDN博客</a></li><li><a href="https://docs.oracle.com/cd/E63277_01/win.121/e63268/installODPmd.htm#ODPNT8149" target="_blank" rel="noopener">Installing Oracle Data Provider for .NET, Managed Driver</a></li><li><a href="https://blog.csdn.net/csdjia11/article/details/107773757" target="_blank" rel="noopener">Windows10通过cmd命令行添加环境变量_code_god_1024的博客-CSDN博客_命令行添加环境变量</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF&quot;&gt;1. 错误信息&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-%E9%94%99%E8%AF%AF%E8%AF%A6%E6%83%85&quot;&gt;1.1. 错误详情&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0&quot;&gt;2. 问题原因&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E6%9F%A5%E7%9C%8B%E4%B8%8E%E8%AE%BE%E7%BD%AEoracle_home%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&quot;&gt;3. 查看与设置ORACLE_HOME环境变量&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-windows%E4%B8%8B%E6%9F%A5%E7%9C%8B%E4%B8%8E%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&quot;&gt;3.1. Windows下查看与设置环境变量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85odpnet%E9%A9%B1%E5%8A%A8&quot;&gt;4. 下载与安装ODP.NET驱动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE&quot;&gt;5. Oracle数据库连接配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#51-%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3%E9%94%99%E8%AF%AF&quot;&gt;5.1. 分析与解决错误&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#511-%E5%85%88%E4%BA%86%E8%A7%A3%E4%B8%8B-oracle-tnsnamesora-%E6%96%87%E4%BB%B6%E7%94%A8%E6%B3%95&quot;&gt;5.1.1. 先了解下 oracle &lt;code&gt;tnsnames.ora&lt;/code&gt; 文件用法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#5111-1%E7%94%A8%E9%80%94&quot;&gt;5.1.1.1. 1.用途&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5112-2%E7%94%A8%E6%B3%95&quot;&gt;5.1.1.2. 2.用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#52-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95&quot;&gt;5.2. 解决方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-错误信息&quot;&gt;&lt;a href=&quot;#1-错误信息&quot; class=&quot;headerlink&quot; title=&quot;1. 错误信息&quot;&gt;&lt;/a&gt;1. 错误信息&lt;/h2&gt;&lt;p&gt;解决错误信息：&lt;strong&gt;找不到请求的 .Net Framework Data Provider。可能没有安装&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-1-错误详情&quot;&gt;&lt;a href=&quot;#1-1-错误详情&quot; class=&quot;headerlink&quot; title=&quot;1.1. 错误详情&quot;&gt;&lt;/a&gt;1.1. 错误详情&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2022/08/29/NET-Framework-%E8%BF%9E%E6%8E%A5-Oracle%E6%95%B0%E6%8D%AE%E5%BA%93/2022-08-30-08-53-43.png&quot; alt=&quot;找不到请求的 .Net Framework Data Provider。可能没有安装。&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>电脑BIOS热键U盘启动快捷键表</title>
    <link href="https://xiaoyan94.github.io/2022/08/27/%E7%94%B5%E8%84%91BIOS%E7%83%AD%E9%94%AEU%E7%9B%98%E5%90%AF%E5%8A%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%A1%A8/"/>
    <id>https://xiaoyan94.github.io/2022/08/27/%E7%94%B5%E8%84%91BIOS%E7%83%AD%E9%94%AEU%E7%9B%98%E5%90%AF%E5%8A%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E8%A1%A8/</id>
    <published>2022-08-27T07:28:48.000Z</published>
    <updated>2022-08-27T07:50:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>U盘做好启动盘后，我们要从电脑上按快捷键来设置从U盘启动电脑，而不同的电脑快捷键是不同的，所以如果你感觉到设置BIOS比较麻烦困难，根据你的电脑类型，选择热键，直接启动一键U盘装系统工具（重要提醒：选择热键前，请先插入U盘）</p><table><thead><tr><th>组装机主板</th><th>组装机主板</th><th>品牌笔记本</th><th>品牌笔记本</th><th>品牌台式机</th><th>品牌台式机</th></tr></thead><tbody><tr><td>主板品牌</td><td>启动按键</td><td>笔记本品牌</td><td>启动按键</td><td>台式机品牌</td><td>启动按键</td></tr><tr><td>华硕主板</td><td>F8</td><td>联想笔记本</td><td>F12</td><td>联想台式机</td><td>F12</td></tr><tr><td>技嘉主板</td><td>F12</td><td>宏基笔记本</td><td>F12</td><td>惠普台式机</td><td>F12</td></tr><tr><td>微星主板</td><td>F11</td><td>华硕笔记本</td><td>ESC</td><td>宏基台式机</td><td>F12</td></tr><tr><td>映泰主板</td><td>F9</td><td>惠普笔记本</td><td>F9</td><td>戴尔台式机</td><td>ESC</td></tr><tr><td>梅捷主板</td><td>ESC 或 F12</td><td>联想 Thinkpad</td><td>F12</td><td>神舟台式机</td><td>F12</td></tr><tr><td>七彩虹主板</td><td>ESC 或 F11</td><td>戴尔笔记本</td><td>F12</td><td>华硕台式机</td><td>F8</td></tr><tr><td>华擎主板</td><td>F11</td><td>神舟笔记本</td><td>F12</td><td>方正台式机</td><td>F12</td></tr><tr><td>斯巴达卡主板</td><td>ESC</td><td>东芝笔记本</td><td>F12</td><td>清华同方台式机</td><td>F12</td></tr><tr><td>昂达主板</td><td>F11</td><td>三星笔记本</td><td>F12</td><td>海尔台式机</td><td>F12</td></tr><tr><td>双敏主板</td><td>ESC</td><td>IBM 笔记本</td><td>F12</td><td>明基台式机</td><td>F8</td></tr><tr><td>翔升主板</td><td>F10</td><td>富士通笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>精英主板</td><td>ESC 或 F11</td><td>海尔笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>冠盟主板</td><td>F11 或 F12</td><td>方正笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>富士康主板</td><td>ESC 或 F12</td><td>清华同方笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>顶星主板</td><td>F11 或 F12</td><td>微星笔记本</td><td>F11</td><td></td><td></td></tr><tr><td>铭瑄主板</td><td>ESC</td><td>明基笔记本</td><td>F9</td><td></td><td></td></tr><tr><td>盈通主板</td><td>F8</td><td>技嘉笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>捷波主板</td><td>ESC</td><td>Gateway 笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>Intel 主板</td><td>F12</td><td>eMachines 笔记本</td><td>F12</td><td></td><td></td></tr><tr><td>杰微主板</td><td>ESC 或 F8</td><td>索尼笔记本</td><td>ESC</td><td></td><td></td></tr><tr><td>致铭主板</td><td>F12</td><td></td><td></td><td></td><td></td></tr><tr><td>磐英主板</td><td>ESC</td><td></td><td></td><td></td><td></td></tr><tr><td>磐正主板</td><td>ESC</td><td></td><td></td><td></td><td></td></tr><tr><td>冠铭主板</td><td>F9</td><td></td><td></td><td></td><td></td></tr></tbody></table><a id="more"></a><blockquote><p>注意：其它机型请尝试或参考以上品牌常用启动热键<br>注意：苹果笔记本，开机&#x2F;重启时按住 “option”键[即Alt键]不放，进入选择启动方式。</p></blockquote><table cellpadding="0" cellspacing="0" width="676" data-sort="sortDisabled" style="margin:0px 0px 10px;padding:0px;width:654px;max-width:100%;color:#333333;font-family:-apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size:17px;letter-spacing:0.544px;text-align:justify;box-sizing:border-box !important;word-wrap:break-word !important;"><tbody style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;overflow-wrap:break-word !important;"><tr style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;overflow-wrap:break-word !important;"><th rowspan="1" colspan="2" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-width:2px 1px 1px;border-style:solid;border-color:#dddddd;border-image:initial;background:#f7f7f7;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;"><h2><span style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;font-size:20px;color:#007aaa;overflow-wrap:break-word !important;">开机进BIOS按键查询</span></h2></th></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td colspan="2" height="13" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-width:1px 0.5pt 1px 1px;border-style:solid;border-color:#dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;background-color:#ff4c41;overflow-wrap:break-word !important;"><span style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;color:#ffffff;overflow-wrap:break-word !important;">组装机主板</span></td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="367" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">主板品牌</td><td width="116" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">启动按键</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="543" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">Award BIOS</td><td width="144" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">Del</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="568" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">Ami BIOS</td><td width="162" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">Del或ESC</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="559" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">Phoenix BIOS</td><td width="176" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" rowspan="1" colspan="2" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">大部分是F2或Del或ESC，还有一少部分是F9或F10或F12。<br style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;overflow-wrap:break-word !important;"></td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td colspan="2" height="13" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-width:1px 0.5pt 1px 1px;border-style:solid;border-color:#dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;background-color:#007aaa;overflow-wrap:break-word !important;"><span style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;color:#ffffff;overflow-wrap:break-word !important;">品牌笔记本</span></td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">笔记本品牌</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">启动按键</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">戴尔Dell</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">宏基Acer</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">东芝Toshiba</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">*ESC/F1</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">富士通Fujitsu</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="30" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:22.5pt;overflow-wrap:break-word !important;"><td height="22" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">联想Thinkpad</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F12</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">IBM</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F1</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">HP(惠普)</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2或F10</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">SONY(索尼)</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">Compaq(康柏)</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F10</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">lenovo(联想)</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="30" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:22.5pt;overflow-wrap:break-word !important;"><td height="22" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">enq(明基)</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td colspan="2" height="13" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-width:1px 0.5pt 1px 1px;border-style:solid;border-color:#dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;background-color:#ffa900;overflow-wrap:break-word !important;">品牌台式机</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">台式机品牌</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">启动按键</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">IBM</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F1</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">惠普HP</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">索尼SONY</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">戴尔Dell</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">宏碁Acer</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">东芝Toshiba</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">*ESC/F1</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">康柏Compaq</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F10</td></tr><tr height="30" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:22.5pt;overflow-wrap:break-word !important;"><td height="22" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">富士通Fujitsu</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2</td></tr><tr height="18" style="margin:0px;padding:0px;max-width:100%;box-sizing:border-box !important;word-wrap:break-word !important;height:13.5pt;overflow-wrap:break-word !important;"><td height="13" width="528" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:1px solid #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">大多数国产品牌</td><td width="207" style="margin:5px 10px;padding:5px 10px;word-wrap:break-word !important;word-break:break-all;border-top:none #dddddd;border-right:1px solid #dddddd;border-bottom:1px solid #dddddd;border-left:none #dddddd;border-image:initial;max-width:100%;box-sizing:border-box !important;overflow-wrap:break-word !important;">F2<br><br></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;U盘做好启动盘后，我们要从电脑上按快捷键来设置从U盘启动电脑，而不同的电脑快捷键是不同的，所以如果你感觉到设置BIOS比较麻烦困难，根据你的电脑类型，选择热键，直接启动一键U盘装系统工具（重要提醒：选择热键前，请先插入U盘）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组装机主板&lt;/th&gt;
&lt;th&gt;组装机主板&lt;/th&gt;
&lt;th&gt;品牌笔记本&lt;/th&gt;
&lt;th&gt;品牌笔记本&lt;/th&gt;
&lt;th&gt;品牌台式机&lt;/th&gt;
&lt;th&gt;品牌台式机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;主板品牌&lt;/td&gt;
&lt;td&gt;启动按键&lt;/td&gt;
&lt;td&gt;笔记本品牌&lt;/td&gt;
&lt;td&gt;启动按键&lt;/td&gt;
&lt;td&gt;台式机品牌&lt;/td&gt;
&lt;td&gt;启动按键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华硕主板&lt;/td&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;td&gt;联想笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;联想台式机&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;技嘉主板&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;宏基笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;惠普台式机&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;微星主板&lt;/td&gt;
&lt;td&gt;F11&lt;/td&gt;
&lt;td&gt;华硕笔记本&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;td&gt;宏基台式机&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;映泰主板&lt;/td&gt;
&lt;td&gt;F9&lt;/td&gt;
&lt;td&gt;惠普笔记本&lt;/td&gt;
&lt;td&gt;F9&lt;/td&gt;
&lt;td&gt;戴尔台式机&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;梅捷主板&lt;/td&gt;
&lt;td&gt;ESC 或 F12&lt;/td&gt;
&lt;td&gt;联想 Thinkpad&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;神舟台式机&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;七彩虹主板&lt;/td&gt;
&lt;td&gt;ESC 或 F11&lt;/td&gt;
&lt;td&gt;戴尔笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;华硕台式机&lt;/td&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;华擎主板&lt;/td&gt;
&lt;td&gt;F11&lt;/td&gt;
&lt;td&gt;神舟笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;方正台式机&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;斯巴达卡主板&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;td&gt;东芝笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;清华同方台式机&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;昂达主板&lt;/td&gt;
&lt;td&gt;F11&lt;/td&gt;
&lt;td&gt;三星笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;海尔台式机&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;双敏主板&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;td&gt;IBM 笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;明基台式机&lt;/td&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;翔升主板&lt;/td&gt;
&lt;td&gt;F10&lt;/td&gt;
&lt;td&gt;富士通笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;精英主板&lt;/td&gt;
&lt;td&gt;ESC 或 F11&lt;/td&gt;
&lt;td&gt;海尔笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;冠盟主板&lt;/td&gt;
&lt;td&gt;F11 或 F12&lt;/td&gt;
&lt;td&gt;方正笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;富士康主板&lt;/td&gt;
&lt;td&gt;ESC 或 F12&lt;/td&gt;
&lt;td&gt;清华同方笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;顶星主板&lt;/td&gt;
&lt;td&gt;F11 或 F12&lt;/td&gt;
&lt;td&gt;微星笔记本&lt;/td&gt;
&lt;td&gt;F11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;铭瑄主板&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;td&gt;明基笔记本&lt;/td&gt;
&lt;td&gt;F9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;盈通主板&lt;/td&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;td&gt;技嘉笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;捷波主板&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;td&gt;Gateway 笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Intel 主板&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;eMachines 笔记本&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;杰微主板&lt;/td&gt;
&lt;td&gt;ESC 或 F8&lt;/td&gt;
&lt;td&gt;索尼笔记本&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;致铭主板&lt;/td&gt;
&lt;td&gt;F12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;磐英主板&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;磐正主板&lt;/td&gt;
&lt;td&gt;ESC&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;冠铭主板&lt;/td&gt;
&lt;td&gt;F9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    
    <category term="电脑" scheme="https://xiaoyan94.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
  </entry>
  
  <entry>
    <title>MySQL优化技巧</title>
    <link href="https://xiaoyan94.github.io/2022/08/27/MySQL%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"/>
    <id>https://xiaoyan94.github.io/2022/08/27/MySQL%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</id>
    <published>2022-08-27T05:56:46.000Z</published>
    <updated>2022-08-27T07:05:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/bg.jpg" alt="SQL优化"></p><a id="more"></a><p>SQL 优化已经成为衡量程序猿优秀与否的硬性指标，甚至在各大厂招聘岗位职能上都有明码标注，如果是你，在这个问题上能吊打面试官还是会被吊打呢？</p><p>有朋友疑问到，SQL 优化真的有这么重要么？如下图所示，SQL 优化在提升系统性能中是：成本最低和优化效果最明显的途径。</p><p>如果你的团队在 SQL 优化这方面搞得很优秀，对你们整个大型系统可用性方面无疑是一个质的跨越，真的能让你们老板省下不止几沓子钱。</p><p><img src="https://s1.51cto.com/oss/202008/19/734e0d75c12e4026751e71dd2d7b0812.png" alt="2"></p><p><strong>优化成本：</strong> 硬件&gt;系统配置&gt;数据库表结构&gt;SQL 及索引。</p><p><strong>优化效果：</strong> 硬件&lt;系统配置&lt;数据库表结构&lt;SQL 及索引。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String result = <span class="string">"嗯，不错，"</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"SQL 优化经验足"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"熟悉事务锁"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"并发场景处理 666"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"会打王者荣耀"</span>) &#123;</span><br><span class="line">                result += <span class="string">"明天入职"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result += <span class="string">"先回去等消息吧"</span>;</span><br><span class="line">&#125;</span><br><span class="line">Logger.info (<span class="string">"面试官："</span> + result );</span><br></pre></td></tr></table></figure></div><p>别看了，上面这是一道送命题。</p><p>好了我们言归正传，首先，对于 MySQL 层优化我一般遵从五个原则：</p><ul><li><p><strong>减少数据访问：</strong> 设置合理的字段类型，启用压缩，通过索引访问等减少磁盘 IO。</p></li><li><p><strong>返回更少的数据：</strong> 只返回需要的字段和数据分页处理，减少磁盘 IO 及网络 IO。</p></li><li><p><strong>减少交互次数：</strong> 批量 DML 操作，函数存储等减少数据连接次数。</p></li><li><p><strong>减少服务器 CPU 开销：</strong> 尽量减少数据库排序操作以及全表查询，减少 CPU 内存占用。</p></li><li><p><strong>利用更多资源：</strong> 使用表分区，可以增加并行操作，更大限度利用 CPU 资源。</p></li></ul><p>总结到 SQL 优化中，就如下三点：</p><ul><li><p><strong>最大化利用索引。</strong></p></li><li><p><strong>尽可能避免全表扫描。</strong></p></li><li><p><strong>减少无效数据的查询。</strong></p></li></ul><p>理解 SQL 优化原理 ，首先要搞清楚 SQL 执行顺序。</p><h2 id="SELECT-语句，语法顺序如下"><a href="#SELECT-语句，语法顺序如下" class="headerlink" title="SELECT 语句，语法顺序如下"></a>SELECT 语句，语法顺序如下</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">DISTINCT</span> &lt; select_list &gt;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  &lt; left_table &gt; &lt; join_type &gt;</span><br><span class="line">  <span class="keyword">JOIN</span> &lt; right_table &gt; <span class="keyword">ON</span> &lt; join_condition &gt;</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  &lt; where_condition &gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  &lt; group_by_list &gt;</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">  &lt; having_condition &gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  &lt; order_by_condition &gt;</span><br><span class="line"><span class="keyword">LIMIT</span></span><br><span class="line">  &lt; limit_number &gt;</span><br></pre></td></tr></table></figure></div><h2 id="SELECT-语句，执行顺序如下"><a href="#SELECT-语句，执行顺序如下" class="headerlink" title="SELECT 语句，执行顺序如下"></a>SELECT 语句，执行顺序如下</h2><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FROM</span><br><span class="line">&lt;表名&gt; # 选取表，将多个表数据通过笛卡尔积变成一个表。</span><br><span class="line">ON</span><br><span class="line">&lt;筛选条件&gt; # 对笛卡尔积的虚表进行筛选</span><br><span class="line">JOIN &lt;join, left join, right join...&gt;</span><br><span class="line">&lt;join表&gt; # 指定join，用于添加数据到on之后的虚表中，例如left join会将左表的剩余数据添加到虚表中</span><br><span class="line">WHERE</span><br><span class="line">&lt;where条件&gt; # 对上述虚表进行筛选</span><br><span class="line">GROUP BY</span><br><span class="line">&lt;分组条件&gt; # 分组</span><br><span class="line">&lt;SUM()等聚合函数&gt; # 用于having子句进行判断，在书写上这类聚合函数是写在having判断里面的</span><br><span class="line">HAVING</span><br><span class="line">&lt;分组筛选&gt; # 对分组后的结果进行聚合筛选</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">&lt;返回数据列表&gt; <span class="comment"># 返回的单列必须在group by子句中，聚合函数除外</span></span><br><span class="line"><span class="keyword">DISTINCT</span></span><br><span class="line"><span class="comment"># 数据除重</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">&lt;排序条件&gt; <span class="comment"># 排序</span></span><br><span class="line"><span class="keyword">LIMIT</span></span><br><span class="line">&lt;行数限制&gt;</span><br></pre></td></tr></table></figure></div><p>以下 SQL 优化策略适用于数据量较大的场景下，如果数据量较小，没必要以此为准，以免画蛇添足</p><h3 id="避免不走索引的场景"><a href="#避免不走索引的场景" class="headerlink" title="避免不走索引的场景"></a>避免不走索引的场景</h3><h4 id="①-尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描"><a href="#①-尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描" class="headerlink" title="① 尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描"></a>① <strong>尽量避免在字段开头模糊查询，会导致数据库引擎放弃索引进行全表扫描</strong></h4><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'%陈%'</span></span><br></pre></td></tr></table></figure></div><p><strong>优化方式：</strong> 尽量在字段 <strong>后面</strong> 使用模糊查询。</p><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> username <span class="keyword">LIKE</span> <span class="string">'陈%'</span></span><br></pre></td></tr></table></figure></div><p>如果需求是要在前面使用模糊查询：</p><ul><li><p>使用 MySQL 内置函数 INSTR（str，substr）来匹配，作用类似于 Java 中的 indexOf()，查询字符串出现的角标位置。</p></li><li><p>使用 FullText 全文索引，用 match against 检索。</p></li><li><p>数据量较大的情况，建议引用 ElasticSearch、Solr，亿级数据量检索速度秒级。</p></li><li><p>当表数据量较少（几千条儿那种），别整花里胡哨的，直接用 like ‘%xx%’。</p></li></ul><h4 id="②-尽量避免使用-in-和-not-in，会导致引擎走全表扫描"><a href="#②-尽量避免使用-in-和-not-in，会导致引擎走全表扫描" class="headerlink" title="② 尽量避免使用 in 和 not in，会导致引擎走全表扫描"></a>② <strong>尽量避免使用 in 和 not in，会导致引擎走全表扫描</strong></h4><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span> (<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div><p><strong>优化方式：</strong> 如果是连续数值，可以用 <code>between</code> 代替。</p><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></div><p>如果是子查询，可以用 <code>exists</code> 代替。</p><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不走索引</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  A</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  A.id <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      B</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 走索引</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  A</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      *</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      B</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      B.id = A.id</span><br><span class="line">  );</span><br></pre></td></tr></table></figure></div><h4 id="③-尽量避免使用-or，会导致数据库引擎放弃索引进行全表扫描"><a href="#③-尽量避免使用-or，会导致数据库引擎放弃索引进行全表扫描" class="headerlink" title="③ 尽量避免使用 or，会导致数据库引擎放弃索引进行全表扫描"></a>③ <strong>尽量避免使用 or，会导致数据库引擎放弃索引进行全表扫描</strong></h4><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span> <span class="keyword">OR</span> <span class="keyword">id</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure></div><p><strong>优化方式：</strong> 可以用 union 代替 or。</p><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  t</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">id</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  t</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="keyword">id</span> = <span class="number">3</span></span><br></pre></td></tr></table></figure></div><h4 id="④-尽量避免进行-null-值的判断，会导致数据库引擎放弃索引进行全表扫描"><a href="#④-尽量避免进行-null-值的判断，会导致数据库引擎放弃索引进行全表扫描" class="headerlink" title="④ 尽量避免进行 null 值的判断，会导致数据库引擎放弃索引进行全表扫描"></a>④ <strong>尽量避免进行 null 值的判断，会导致数据库引擎放弃索引进行全表扫描</strong></h4><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> score <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure></div><p><strong>优化方式：</strong> 可以给字段添加默认值 0，对 0 值进行判断。</p><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> score = <span class="number">0</span></span><br></pre></td></tr></table></figure></div><h4 id="⑤-尽量避免在-where-条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描"><a href="#⑤-尽量避免在-where-条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描" class="headerlink" title="⑤ 尽量避免在 where 条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描"></a>⑤ <strong>尽量避免在 where 条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描</strong></h4><p>可以将表达式、函数操作移动到等号右侧，如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全表扫描</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> T <span class="keyword">WHERE</span> score/<span class="number">10</span> = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> T <span class="keyword">WHERE</span> score = <span class="number">10</span>*<span class="number">9</span></span><br></pre></td></tr></table></figure></div><h4 id="⑥-当数据量大时，避免使用-where-1-x3D-1-的条件"><a href="#⑥-当数据量大时，避免使用-where-1-x3D-1-的条件" class="headerlink" title="⑥ 当数据量大时，避免使用 where 1&#x3D;1 的条件"></a>⑥ <strong>当数据量大时，避免使用 where 1&#x3D;1 的条件</strong></h4><p>通常为了方便拼装查询条件，我们会默认使用该条件，数据库引擎会放弃索引进行全表扫描。</p><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username, age, sex <span class="keyword">FROM</span> T <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure></div><p><strong>优化方式：</strong> 用代码拼装 SQL 时进行判断，没 where 条件就去掉 where，有 where 条件就加 and。</p><h4 id="⑦-查询条件不能用-lt-gt-或者-x3D"><a href="#⑦-查询条件不能用-lt-gt-或者-x3D" class="headerlink" title="⑦ 查询条件不能用 &lt;&gt; 或者 !&#x3D;"></a>⑦ <strong>查询条件不能用 &lt;&gt; 或者 !&#x3D;</strong></h4><p>使用索引列作为条件进行查询时，需要避免使用&lt;&gt;或者!&#x3D;等判断条件。</p><p>如确实业务需要，使用到不等于符号，需要在重新评估索引建立，避免在此字段上建立索引，改由查询条件中其他索引字段代替。</p><h4 id="⑧-where-条件仅包含复合索引非前置列"><a href="#⑧-where-条件仅包含复合索引非前置列" class="headerlink" title="⑧ where 条件仅包含复合索引非前置列"></a>⑧ <strong>where 条件仅包含复合索引非前置列</strong></h4><p>如下：复合（联合）索引包含 key_part1，key_part2，key_part3 三列，但 SQL 语句没有包含索引前置列”key_part1”，按照 MySQL 联合索引的最左匹配原则，不会走联合索引。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1 <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> key_part2=<span class="number">1</span> <span class="keyword">and</span> key_part3=<span class="number">2</span></span><br></pre></td></tr></table></figure></div><h4 id="⑨-隐式类型转换造成不使用索引"><a href="#⑨-隐式类型转换造成不使用索引" class="headerlink" title="⑨ 隐式类型转换造成不使用索引"></a>⑨ <strong>隐式类型转换造成不使用索引</strong></h4><p>如下 SQL 语句由于索引对列类型为 varchar，但给定的值为数值，涉及隐式类型转换，造成不能正确走索引。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1 <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> col_varchar=<span class="number">123</span>;</span><br></pre></td></tr></table></figure></div><h4 id="⑩-order-by-条件要与-where-中条件一致，否则-order-by-不会利用索引进行排序"><a href="#⑩-order-by-条件要与-where-中条件一致，否则-order-by-不会利用索引进行排序" class="headerlink" title="⑩ order by 条件要与 where 中条件一致，否则 order by 不会利用索引进行排序"></a>⑩ <strong>order by 条件要与 where 中条件一致，否则 order by 不会利用索引进行排序</strong></h4><p>如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不走age索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 走age索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t <span class="keyword">where</span> age &gt; <span class="number">0</span> <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure></div><p>对于上面的语句，数据库的处理顺序是：</p><ul><li><p><strong>第一步：</strong> 根据 where 条件和统计信息生成执行计划，得到数据。</p></li><li><p><strong>第二步：</strong> 将得到的数据排序。当执行处理数据（order by）时，数据库会先查看第一步的执行计划，看 order by 的字段是否在执行计划中利用了索引。如果是，则可以利用索引顺序而直接取得已经排好序的数据。如果不是，则重新进行排序操作。</p></li><li><p><strong>第三步：</strong> 返回排序后的数据。</p></li></ul><p>当 order by 中的字段出现在 where 条件中时，才会利用索引而不再二次排序，更准确的说，order by 中的字段在执行计划中利用了索引时，不用排序操作。</p><p>这个结论不仅对 order by 有效，对其他需要排序的操作也有效。比如 group by 、union 、distinct 等。</p><h4 id="⑪-正确使用-hint-优化语句"><a href="#⑪-正确使用-hint-优化语句" class="headerlink" title="⑪ 正确使用 hint 优化语句"></a>⑪ <strong>正确使用 hint 优化语句</strong></h4><p>MySQL 中可以使用 hint 指定优化器在执行时选择或忽略特定的索引。</p><p>一般而言，处于版本变更带来的表结构索引变化，更建议避免使用 hint，而是通过 Analyze table 多收集统计信息。</p><p>但在特定场合下，指定 hint 可以排除其他索引干扰而指定更优的执行计划：</p><ul><li><p>USE INDEX 在你查询语句中表名的后面，添加 USE INDEX 来提供希望 MySQL 去参考的索引列表，就可以让 MySQL 不再考虑其他可用的索引。</p><p>例子: <code>SELECT col1 FROM table USE INDEX (mod_time, name)...</code></p></li><li><p>IGNORE INDEX 如果只是单纯的想让 MySQL 忽略一个或者多个索引，可以使用 IGNORE INDEX 作为 Hint。</p><p>例子: <code>SELECT col1 FROM table IGNORE INDEX (priority) ...</code></p></li><li><p>FORCE INDEX 为强制 MySQL 使用一个特定的索引，可在查询中使用 FORCE INDEX 作为 Hint。</p><p>例子: <code>SELECT col1 FROM table FORCE INDEX (mod_time) ...</code></p></li></ul><p>在查询的时候，数据库系统会自动分析查询语句，并选择一个最合适的索引。但是很多时候，数据库系统的查询优化器并不一定总是能使用最优索引。</p><p>如果我们知道如何选择索引，可以使用 FORCE INDEX 强制查询使用指定的索引。</p><p>例如：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  students <span class="keyword">FORCE</span> <span class="keyword">INDEX</span> (idx_class_id)</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  class_id = <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="keyword">id</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></div><h3 id="SELECT-语句其他优化"><a href="#SELECT-语句其他优化" class="headerlink" title="SELECT 语句其他优化"></a>SELECT 语句其他优化</h3><h4 id="①-避免出现-select"><a href="#①-避免出现-select" class="headerlink" title="① 避免出现 select *"></a>① <strong>避免出现 select *</strong></h4><p>首先，select * 操作在任何类型数据库中都不是一个好的 SQL 编写习惯。</p><p>使用 select * 取出全部列，会让优化器无法完成索引覆盖扫描这类优化，会影响优化器对执行计划的选择，也会增加网络带宽消耗，更会带来额外的 I&#x2F;O，内存和 CPU 消耗。</p><p>建议提出业务实际需要的列数，将指定列名以取代 select *。具体详情见<a href="http://mp.weixin.qq.com/s?__biz=MzU5NDgyMjc0OQ==&mid=2247489808&idx=3&sn=a12f311695bf33c60e09fe8a85c50081&chksm=fe7a0a22c90d8334347c27d72a54da2aa36308bed2f39347467aee56e680fb09087f92a78178&scene=21#wechat_redirect" target="_blank" rel="noopener">为什么大家都说 SELECT * 效率低</a></p><h4 id="②-避免出现不确定结果的函数"><a href="#②-避免出现不确定结果的函数" class="headerlink" title="② 避免出现不确定结果的函数"></a>② <strong>避免出现不确定结果的函数</strong></h4><p>特定针对主从复制这类业务场景。由于原理上从库复制的是主库执行的语句，使用如 now()、rand()、sysdate()、current_user() 等不确定结果的函数很容易导致主库与从库相应的数据不一致。</p><p>另外不确定值的函数，产生的 SQL 语句无法利用 query cache。</p><h4 id="③-多表关联查询时，小表在前，大表在后"><a href="#③-多表关联查询时，小表在前，大表在后" class="headerlink" title="③ 多表关联查询时，小表在前，大表在后"></a>③ <strong>多表关联查询时，小表在前，大表在后</strong></h4><p>在 MySQL 中，执行 from 后的表关联查询是从左往右执行的（Oracle 相反），第一张表会涉及到全表扫描。</p><p>所以将小表放在前面，先扫小表，扫描快效率较高，在扫描后面的大表，或许只扫描大表的前 100 行就符合返回条件并 return 了。</p><p>例如：表 1 有 50 条数据，表 2 有 30 亿条数据；如果全表扫描表 2，你品，那就先去吃个饭再说吧是吧。</p><h4 id="④-使用表的别名"><a href="#④-使用表的别名" class="headerlink" title="④ 使用表的别名"></a>④ <strong>使用表的别名</strong></h4><p>当在 SQL 语句中连接多个表时，请使用表的别名并把别名前缀于每个列名上。这样就可以减少解析的时间并减少哪些友列名歧义引起的语法错误。</p><h4 id="⑤-用-where-字句替换-HAVING-字句"><a href="#⑤-用-where-字句替换-HAVING-字句" class="headerlink" title="⑤ 用 where 字句替换 HAVING 字句"></a>⑤ <strong>用 where 字句替换 HAVING 字句</strong></h4><p>避免使用 HAVING 字句，因为 HAVING 只会在检索出所有记录之后才对结果集进行过滤，而 where 则是在聚合前刷选记录，如果能通过 where 字句限制记录的数目，那就能减少这方面的开销。</p><p>HAVING 中的条件一般用于聚合函数的过滤，除此之外，应该将条件写在 where 字句中。</p><p>where 和 having 的区别：where 后面不能使用组函数。</p><h4 id="⑥-调整-Where-字句中的连接顺序"><a href="#⑥-调整-Where-字句中的连接顺序" class="headerlink" title="⑥ 调整 Where 字句中的连接顺序"></a>⑥ <strong>调整 Where 字句中的连接顺序</strong></h4><p>MySQL 采用从左往右，自上而下的顺序解析 where 子句。根据这个原理，应将过滤数据多的条件往前放，最快速度缩小结果集。</p><h3 id="增删改-DML-语句优化"><a href="#增删改-DML-语句优化" class="headerlink" title="增删改 DML 语句优化"></a>增删改 DML 语句优化</h3><h4 id="①-大批量插入数据"><a href="#①-大批量插入数据" class="headerlink" title="① 大批量插入数据"></a>① <strong>大批量插入数据</strong></h4><p>如果同时执行大量的插入，建议使用多个值的 INSERT 语句（方法二）。这比使用分开 INSERT 语句快（方法一），一般情况下批量插入效率有几倍的差别。</p><p>方法一：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">  T</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">  T</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">  T</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">  (<span class="number">1</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure></div><p>方法二：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> T <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></div><p>选择后一种方法的原因有三：</p><ul><li><p>减少 SQL 语句解析的操作，MySQL 没有类似 Oracle 的 share pool，采用方法二，只需要解析一次就能进行数据的插入操作。</p></li><li><p>在特定场景可以减少对 DB 连接次数。</p></li><li><p>SQL 语句较短，可以减少网络传输的 IO。</p></li></ul><h4 id="②-适当使用-commit"><a href="#②-适当使用-commit" class="headerlink" title="② 适当使用 commit"></a>② <strong>适当使用 commit</strong></h4><p>适当使用 commit 可以释放事务占用的资源而减少消耗，commit 后能释放的资源如下：</p><ul><li><p>事务占用的 undo 数据块。</p></li><li><p>事务在 redo log 中记录的数据块。</p></li><li><p>释放事务施加的，减少锁争用影响性能。特别是在需要使用 delete 删除大量数据的时候，必须分解删除量并定期 commit。</p></li></ul><h4 id="③-避免重复查询更新的数据"><a href="#③-避免重复查询更新的数据" class="headerlink" title="③ 避免重复查询更新的数据"></a>③ <strong>避免重复查询更新的数据</strong></h4><p>针对业务中经常出现的更新行同时又希望获得改行信息的需求，MySQL 并不支持 PostgreSQL 那样的 UPDATE RETURNING 语法，在 MySQL 中可以通过变量实现。</p><p>例如，更新一行记录的时间戳，同时希望查询当前记录中存放的时间戳是什么？</p><p>简单方法实现：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Update</span></span><br><span class="line">  t1</span><br><span class="line"><span class="keyword">set</span></span><br><span class="line">  <span class="built_in">time</span> = <span class="keyword">now</span>()</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  col1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span></span><br><span class="line">  <span class="built_in">time</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t1</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div><p>使用变量，可以重写为以下方式：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Update</span></span><br><span class="line">  t1</span><br><span class="line"><span class="keyword">set</span></span><br><span class="line">  <span class="built_in">time</span> = <span class="keyword">now</span> ()</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  col1 = <span class="number">1</span></span><br><span class="line">  <span class="keyword">and</span> @ <span class="keyword">now</span>: = <span class="keyword">now</span> ();</span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span></span><br><span class="line">  @ <span class="keyword">now</span>;</span><br></pre></td></tr></table></figure></div><p>前后二者都需要两次网络来回，但使用变量避免了再次访问数据表，特别是当 t1 表数据量较大时，后者比前者快很多。</p><h4 id="④-查询优先还是更新（insert、update、delete）优先"><a href="#④-查询优先还是更新（insert、update、delete）优先" class="headerlink" title="④ 查询优先还是更新（insert、update、delete）优先"></a>④ <strong>查询优先还是更新（insert、update、delete）优先</strong></h4><p>MySQL 还允许改变语句调度的优先级，它可以使来自多个客户端的查询更好地协作，这样单个客户端就不会由于锁定而等待很长时间。改变优先级还可以确保特定类型的查询被处理得更快。</p><p>我们首先应该确定应用的类型，判断应用是以查询为主还是以更新为主的，是确保查询效率还是确保更新的效率，决定是查询优先还是更新优先。</p><p>下面我们提到的改变调度策略的方法主要是针对只存在表锁的存储引擎，比如  MyISAM 、MEMROY、MERGE，对于 Innodb 存储引擎，语句的执行是由获得行锁的顺序决定的。</p><p>MySQL 的默认的调度策略可用总结如下：</p><ul><li><p>写入操作优先于读取操作。</p></li><li><p>对某张数据表的写入操作某一时刻只能发生一次，写入请求按照它们到达的次序来处理。</p></li><li><p>对某张数据表的多个读取操作可以同时地进行。</p></li></ul><p>MySQL 提供了几个语句调节符，允许你修改它的调度策略：</p><ul><li><p>LOW_PRIORITY 关键字应用于 DELETE、INSERT、LOAD DATA、REPLACE 和 UPDATE。</p></li><li><p>HIGH_PRIORITY 关键字应用于 SELECT 和 INSERT 语句。</p></li><li><p>DELAYED 关键字应用于 INSERT 和 REPLACE 语句。</p></li></ul><p>如果写入操作是一个 LOW_PRIORITY（低优先级）请求，那么系统就不会认为它的优先级高于读取操作。</p><p>在这种情况下，如果写入者在等待的时候，第二个读取者到达了，那么就允许第二个读取者插到写入者之前。</p><p>只有在没有其它的读取者的时候，才允许写入者开始操作。这种调度修改可能存在 LOW_PRIORITY 写入操作永远被阻塞的情况。</p><p>SELECT 查询的 HIGH_PRIORITY（高优先级）关键字也类似。它允许 SELECT 插入正在等待的写入操作之前，即使在正常情况下写入操作的优先级更高。</p><p>另外一种影响是，高优先级的 SELECT 在正常的 SELECT 语句之前执行，因为这些语句会被写入操作阻塞。</p><p>如果希望所有支持 LOW_PRIORITY 选项的语句都默认地按照低优先级来处理，那么请使用–low-priority-updates 选项来启动服务器。</p><p>通过使用 INSERTHIGH_PRIORITY 来把 INSERT 语句提高到正常的写入优先级，可以消除该选项对单个 INSERT 语句的影响。</p><h3 id="查询条件优化"><a href="#查询条件优化" class="headerlink" title="查询条件优化"></a>查询条件优化</h3><h4 id="①-对于复杂的查询，可以使用中间临时表暂存数据"><a href="#①-对于复杂的查询，可以使用中间临时表暂存数据" class="headerlink" title="① 对于复杂的查询，可以使用中间临时表暂存数据"></a>① <strong>对于复杂的查询，可以使用中间临时表暂存数据</strong></h4><h4 id="②-优化-group-by-语句"><a href="#②-优化-group-by-语句" class="headerlink" title="② 优化 group by 语句"></a>② <strong>优化 group by 语句</strong></h4><p>默认情况下，MySQL 会对 GROUP BY 分组的所有值进行排序，如 “GROUP BY col1，col2，….;” 查询的方法如同在查询中指定 “ORDER BY col1，col2，…;” 。</p><p>如果显式包括一个包含相同的列的 ORDER BY 子句，MySQL 可以毫不减速地对它进行优化，尽管仍然进行排序。</p><p>因此，如果查询包括 GROUP BY 但你并不想对分组的值进行排序，你可以指定 ORDER BY NULL 禁止排序。</p><p>例如：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  col1,</span><br><span class="line">  col2,</span><br><span class="line">  <span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="keyword">table</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">  col1,</span><br><span class="line">  col2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></div><h4 id="③-优化-join-语句"><a href="#③-优化-join-语句" class="headerlink" title="③ 优化 join 语句"></a>③ <strong>优化 join 语句</strong></h4><p>MySQL 中可以通过子查询来使用 SELECT 语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。</p><p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的 SQL 操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询可以被更有效率的连接（JOIN）..替代。</p><p>例子：假设要将所有没有订单记录的用户取出来，可以用下面这个查询完成：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  col1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  customerinfo</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  CustomerID <span class="keyword">NOT</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      CustomerID</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      salesinfo</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></div><p>如果使用连接（JOIN）..来完成这个查询工作，速度将会有所提升。</p><p>尤其是当 salesinfo 表中对 CustomerID 建有索引的话，性能将会更好，查询如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  col1</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  customerinfo</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> salesinfoON customerinfo.CustomerID = salesinfo.CustomerID</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  salesinfo.CustomerID <span class="keyword">IS</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure></div><p>连接（JOIN）..之所以更有效率一些，是因为 MySQL 不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。</p><h4 id="④-优化-union-查询"><a href="#④-优化-union-查询" class="headerlink" title="④ 优化 union 查询"></a>④ <strong>优化 union 查询</strong></h4><p>MySQL 通过创建并填充临时表的方式来执行 union 查询。除非确实要消除重复的行，否则建议使用 union all。</p><p>原因在于如果没有 all 这个关键词，MySQL 会给临时表加上 distinct 选项，这会导致对整个临时表的数据做唯一性校验，这样做的消耗相当高。</p><p>高效：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COL1,</span><br><span class="line">  COL2,</span><br><span class="line">  COL3</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COL1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COL1,</span><br><span class="line">  COL2,</span><br><span class="line">  COL3</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COL3 = <span class="string">'TEST'</span>;</span><br></pre></td></tr></table></figure></div><p>低效：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COL1,</span><br><span class="line">  COL2,</span><br><span class="line">  COL3</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COL1 = <span class="number">10</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  COL1,</span><br><span class="line">  COL2,</span><br><span class="line">  COL3</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  COL3 = <span class="string">'TEST'</span>;</span><br></pre></td></tr></table></figure></div><h4 id="⑤-拆分复杂-SQL-为多个小-SQL，避免大事务"><a href="#⑤-拆分复杂-SQL-为多个小-SQL，避免大事务" class="headerlink" title="⑤ 拆分复杂 SQL 为多个小 SQL，避免大事务"></a>⑤ <strong>拆分复杂 SQL 为多个小 SQL，避免大事务</strong></h4><p>如下：</p><ul><li><p>简单的 SQL 容易使用到 MySQL 的 QUERY CACHE。</p></li><li><p>减少锁表时间特别是使用 MyISAM 存储引擎的表。</p></li><li><p>可以使用多核 CPU。</p></li></ul><h4 id="⑥-使用-truncate-代替-delete"><a href="#⑥-使用-truncate-代替-delete" class="headerlink" title="⑥ 使用 truncate 代替 delete"></a>⑥ <strong>使用 truncate 代替 delete</strong></h4><p>当删除全表中记录时，使用 delete 语句的操作会被记录到 undo 块中，删除记录也记录 binlog。</p><p>当确认需要删除全表时，会产生很大量的 binlog 并占用大量的 undo 数据块，此时既没有很好的效率也占用了大量的资源。</p><p>使用 truncate 替代，不会记录可恢复的信息，数据不能被恢复。也因此使用 truncate 操作有其极少的资源占用与极快的时间。另外，使用 truncate 可以回收表的水位，使自增字段值归零。</p><h4 id="⑦-使用合理的分页方式以提高分页效率"><a href="#⑦-使用合理的分页方式以提高分页效率" class="headerlink" title="⑦ 使用合理的分页方式以提高分页效率"></a>⑦ <strong>使用合理的分页方式以提高分页效率</strong></h4><p>使用合理的分页方式以提高分页效率 针对展现等分页需求，合适的分页方式能够提高分页的效率。</p><p>案例 1：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  t</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  thread_id = <span class="number">10000</span></span><br><span class="line">  <span class="keyword">and</span> deleted = <span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  gmt_create <span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span></span><br><span class="line">  <span class="number">0</span>, <span class="number">15</span>;</span><br></pre></td></tr></table></figure></div><p>上述例子通过一次性根据过滤条件取出所有字段进行排序返回。数据访问开销&#x3D;索引 IO+索引全部记录结果对应的表数据 IO。</p><p>因此，该种写法越翻到后面执行效率越差，时间越长，尤其表数据量很大的时候。</p><p>适用场景：当中间结果集很小（10000 行以下）或者查询条件复杂（指涉及多个不同查询字段或者多表连接）时适用。</p><p>案例 2：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  t.*</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      t</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      thread_id = <span class="number">10000</span></span><br><span class="line">      <span class="keyword">and</span> deleted = <span class="number">0</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">      gmt_create <span class="keyword">asc</span></span><br><span class="line">    <span class="keyword">limit</span></span><br><span class="line">      <span class="number">0</span>, <span class="number">15</span></span><br><span class="line">  ) a,</span><br><span class="line">  t</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  a.id = t.id;</span><br></pre></td></tr></table></figure></div><p>上述例子必须满足 t 表主键是 id 列，且有覆盖索引 secondary key：（thread_id, deleted, gmt_create）。</p><p>通过先根据过滤条件利用覆盖索引取出主键 id 进行排序，再进行 join 操作取出其他字段。</p><p>数据访问开销&#x3D;索引 IO+索引分页后结果（例子中是 15 行）对应的表数据 IO。因此，该写法每次翻页消耗的资源和时间都基本相同，就像翻第一页一样。</p><p><strong>适用场景：</strong> 当查询和排序字段（即 where 子句和 order by 子句涉及的字段）有对应覆盖索引时，且中间结果集很大的情况时适用。</p><h3 id="建表优化"><a href="#建表优化" class="headerlink" title="建表优化"></a>建表优化</h3><p>① <strong>在表中建立索引，优先考虑 where、order by 使用到的字段。</strong></p><p>② <strong>尽量使用数字型字段（如性别，男：1 女：2），若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。</strong></p><p>这是因为引擎在处理查询和连接时会 逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p>③ <strong>查询数据量大的表 会造成查询缓慢。主要的原因是扫描行数过多。这个时候可以通过程序，分段分页进行查询，循环遍历，将结果合并处理进行展示。</strong></p><p>要查询 100000 到 100050 的数据，如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">      ROW_NUMBER() <span class="keyword">OVER</span>(</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">          <span class="keyword">ID</span> <span class="keyword">ASC</span></span><br><span class="line">      ) <span class="keyword">rowid</span>,</span><br><span class="line">      *</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">      infoTab</span><br><span class="line">  ) t</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  t.rowid &gt; <span class="number">100000</span></span><br><span class="line">  <span class="keyword">AND</span> t.rowid &lt;= <span class="number">100050</span></span><br></pre></td></tr></table></figure></div><p>④ <strong>用 varchar&#x2F;nvarchar 代替 char&#x2F;nchar。</strong></p><p>尽可能的使用 varchar&#x2F;nvarchar 代替 char&#x2F;nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p>不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL 也包含在内），都是占用 100 个字符的空间的，如果是 varchar 这样的变长字段， null 不占用空间。</p><p><em>作者：</em>_陈哈哈</p><p><em>出处：<a href="https://sohu.gg/FGG98i" target="_blank" rel="noopener">https://sohu.gg/FGG98i</a></em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/bg.jpg&quot; alt=&quot;SQL优化&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="SQL" scheme="https://xiaoyan94.github.io/tags/SQL/"/>
    
    <category term="转载" scheme="https://xiaoyan94.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习笔记</title>
    <link href="https://xiaoyan94.github.io/2022/08/27/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://xiaoyan94.github.io/2022/08/27/SQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-08-27T01:26:20.000Z</published>
    <updated>2025-02-25T01:47:17.340Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#sql%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95">sql基础函数用法</a><ul><li><a href="#round%E5%87%BD%E6%95%B0-%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E4%BF%9D%E7%95%99%E5%B0%8F%E6%95%B0">round函数 四舍五入保留小数</a></li><li><a href="#limit%E5%85%B3%E9%94%AE%E5%AD%97">limit关键字</a><ul><li><a href="#top%E5%85%B3%E9%94%AE%E5%AD%97">top关键字</a></li><li><a href="#limit">limit</a></li><li><a href="#rownum">rownum</a></li><li><a href="#%E5%9C%A8-sql-server-%E4%B8%AD%E5%AE%9E%E7%8E%B0-limit-m-n-%E7%9A%84%E5%8A%9F%E8%83%BD">在 sql server 中实现 limit m, n 的功能</a></li></ul></li><li><a href="#left%E5%87%BD%E6%95%B0-right%E5%87%BD%E6%95%B0-%E4%B8%8Eoracle%E4%B8%AD%E7%9A%84substr%E5%87%BD%E6%95%B0">left函数 right函数 与oracle中的substr函数</a></li></ul></li></ul><a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String result &#x3D; &quot;嗯，不错，&quot;;</span><br><span class="line">if (&quot;SQL 优化经验足&quot;) &#123;</span><br><span class="line">    if (&quot;熟悉事务锁&quot;) &#123;</span><br><span class="line">        if (&quot;并发场景处理 666&quot;) &#123;</span><br><span class="line">            if (&quot;会打王者荣耀&quot;) &#123;</span><br><span class="line">                result +&#x3D; &quot;明天入职&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    result +&#x3D; &quot;先回去等消息吧&quot;;</span><br><span class="line">&#125;</span><br><span class="line">Logger.info (&quot;面试官：&quot; + result );</span><br></pre></td></tr></table></figure></div><h2 id="sql基础函数用法"><a href="#sql基础函数用法" class="headerlink" title="sql基础函数用法"></a>sql基础函数用法</h2><h3 id="round函数-四舍五入保留小数"><a href="#round函数-四舍五入保留小数" class="headerlink" title="round函数 四舍五入保留小数"></a>round函数 四舍五入保留小数</h3><p>保留一位小数</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  gender,</span><br><span class="line">  university,</span><br><span class="line">  <span class="keyword">count</span>(<span class="number">1</span>) user_num,</span><br><span class="line">  <span class="keyword">round</span>(<span class="keyword">avg</span>(active_days_within_30),<span class="number">1</span>) avg_active_day,</span><br><span class="line">  <span class="keyword">round</span>(<span class="keyword">avg</span>(question_cnt),<span class="number">1</span>) avg_question_cnt</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  user_profile</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  gender,</span><br><span class="line">  university</span><br></pre></td></tr></table></figure></div><h3 id="limit关键字"><a href="#limit关键字" class="headerlink" title="limit关键字"></a>limit关键字</h3><p>在 SQL Server 中替代 MySQL 中的 limit 关键字</p><h4 id="top关键字"><a href="#top关键字" class="headerlink" title="top关键字"></a>top关键字</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP n <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure></div><p>TOP <code>n</code>: 指定从查询结果集中输出前 n 行，n 是介于 0 - 4294967295 之间的整数(只可以在 sql server 数据库中使用)</p><p>eg：<code>SELECT TOP 5 FROM table1</code></p><p>查询结果：从 table1 中拿到前 5 条数据</p><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">LIMIT</span> n</span><br></pre></td></tr></table></figure></div><p>LIMIT <code>n</code>: 指定从查询结果集中输出前 n 行。(只可以在 Mysql 数据库中使用)</p><p>eg: <code>SELECT * FROM table1 LIMIT 10</code></p><p>查询结果：从 table1 中拿到前 10 条数据</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">LIMIT</span> a,b</span><br></pre></td></tr></table></figure></div><p><code>LIMIT a,b</code>: a 是开始读取的第一条记录的编号(是从 0 开始计算编号，比如：a&#x3D;2，则是从第三条开始计算)，b 是要查询记录的个数。(只可以在 Mysql 数据库中使用)</p><p>eg: <code>SELECT * FROM table1 LIMIT 2,5</code></p><p>查询结果：从 table1 中拿到第 3 条开始之后的 5 条数据 (一共 5 条数据)</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">LIMIT</span> n <span class="keyword">OFFSET</span> m</span><br></pre></td></tr></table></figure></div><p><code>LIMIT n OFFSET m</code>: n 是查询的行数，m 是查询的初始位置(是从 0 开始计算编号，比如：m&#x3D;2，则是从第三条开始计算)。</p><p>eg: <code>SELECT * FROM table1 LIMIT 2 OFFSET 3</code></p><p>查询结果:从 table1 中拿到第 4 条开始之后的 2 条数据 (一共 2 条数据)</p><h4 id="rownum"><a href="#rownum" class="headerlink" title="rownum"></a>rownum</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> <span class="keyword">ROWNUM</span> &lt;= n</span><br></pre></td></tr></table></figure></div><p><code>ROWNUM &lt;= n</code>: 配合 where 使用，指定从查询结果集中输出前 n 行 (只可以在 Oracle 数据库中使用)</p><p>eg: <code>SELECT * FROM table1 WHERE ROWNUM &lt;= 20</code></p><p>查询结果:从 table1 中拿到前 20 条数据</p><p>总结：<strong>sql server、mysql、orcale 数据库用方法是不同的，要区别使用</strong></p><h4 id="在-sql-server-中实现-limit-m-n-的功能"><a href="#在-sql-server-中实现-limit-m-n-的功能" class="headerlink" title="在 sql server 中实现 limit m, n 的功能"></a>在 sql server 中实现 limit m, n 的功能</h4><p>在 MySQL 中，可以用 Limit 来查询第 m 列到第 n 列的记录，例如：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> tablename <span class="keyword">limit</span> m, n</span><br></pre></td></tr></table></figure></div><p>但是，在 SQL Server 中，不支持 Limit 语句。怎么办呢？</p><p>解决方案：<br>虽然 SQL Server 不支持 Limit ，但是它支持 TOP。<br>我们以 SQL Server 2005 为例，就以它自带的示范数据库 AdventureWorks 作为测试数据：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> tablename</span><br></pre></td></tr></table></figure></div><p>如果要查询上述结果中前 6 条记录，则相应的 SQL 语句是：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> top <span class="number">6</span> <span class="keyword">id</span> <span class="keyword">from</span> tablename</span><br></pre></td></tr></table></figure></div><p>如果要查询上述结果中第 7 条到第 9 条记录，则相应的 SQL 语句是：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  top <span class="number">3</span> <span class="keyword">as</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  tablenamewhere <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      top <span class="number">6</span> <span class="keyword">as</span> <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      tablename</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></div><p>取第 m 条到第 n 条记录：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  top (n - m + <span class="number">1</span>) <span class="keyword">id</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  tablenamewhere <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      top m <span class="number">-1</span> <span class="keyword">as</span> <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      tablename</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  top @ pageSize <span class="keyword">as</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  tablenamewhere <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      top @</span><br><span class="line">    <span class="keyword">offset</span></span><br><span class="line">      <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      tablename</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></div><h3 id="left函数-right函数-与oracle中的substr函数"><a href="#left函数-right函数-与oracle中的substr函数" class="headerlink" title="left函数 right函数 与oracle中的substr函数"></a>left函数 right函数 与oracle中的substr函数</h3><p>从字符串左边或右边开始截取指定数量的字符</p><p>在SQL Server中：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">left</span>(<span class="string">'Hello world!'</span>,<span class="number">8</span>); <span class="comment">--输出 'Hello wo'</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">right</span>(N<span class="string">'Hello world!你好世界！'</span>,<span class="number">8</span>); <span class="comment">--输出 'ld!你好世界！'</span></span><br></pre></td></tr></table></figure></div><p>Oracle：</p><p>Oracle 中实现left、right函数使用substr函数。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="string">'Hello world!'</span>,<span class="number">0</span>,<span class="number">8</span>) <span class="keyword">from</span> dual; <span class="comment">--Hello wo</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="string">'Hello world!'</span>,<span class="number">1</span>,<span class="number">8</span>) <span class="keyword">from</span> dual; <span class="comment">--Hello wo</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="string">'Hello world!'</span>,<span class="number">2</span>,<span class="number">8</span>) <span class="keyword">from</span> dual; <span class="comment">--ello wor</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="string">'Hello world!你好世界！'</span>,<span class="number">8</span>,<span class="number">8</span>) <span class="keyword">from</span> dual; <span class="comment">--orld!你好世</span></span><br></pre></td></tr></table></figure></div><p>注意position参数不是下标从0开始，而是从1开始，代表第几个字符。在Oracle的substr函数中，position参数为0、为1时结果一样，因为position为0是被看作1来处理的。</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#sql%E5%9F%BA%E7%A1%80%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95&quot;&gt;sql基础函数用法&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#round%E5%87%BD%E6%95%B0-%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%E4%BF%9D%E7%95%99%E5%B0%8F%E6%95%B0&quot;&gt;round函数 四舍五入保留小数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#limit%E5%85%B3%E9%94%AE%E5%AD%97&quot;&gt;limit关键字&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#top%E5%85%B3%E9%94%AE%E5%AD%97&quot;&gt;top关键字&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#limit&quot;&gt;limit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rownum&quot;&gt;rownum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9C%A8-sql-server-%E4%B8%AD%E5%AE%9E%E7%8E%B0-limit-m-n-%E7%9A%84%E5%8A%9F%E8%83%BD&quot;&gt;在 sql server 中实现 limit m, n 的功能&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#left%E5%87%BD%E6%95%B0-right%E5%87%BD%E6%95%B0-%E4%B8%8Eoracle%E4%B8%AD%E7%9A%84substr%E5%87%BD%E6%95%B0&quot;&gt;left函数 right函数 与oracle中的substr函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="SQL" scheme="https://xiaoyan94.github.io/tags/SQL/"/>
    
    <category term="数据库" scheme="https://xiaoyan94.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>VSCode终端提示Shell集成无法激活的解决方法</title>
    <link href="https://xiaoyan94.github.io/2022/08/26/VSCode%E7%BB%88%E7%AB%AF%E6%8F%90%E7%A4%BAShell%E9%9B%86%E6%88%90%E6%97%A0%E6%B3%95%E6%BF%80%E6%B4%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaoyan94.github.io/2022/08/26/VSCode%E7%BB%88%E7%AB%AF%E6%8F%90%E7%A4%BAShell%E9%9B%86%E6%88%90%E6%97%A0%E6%B3%95%E6%BF%80%E6%B4%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-08-26T06:16:31.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><img src="/2022/08/26/VSCode%E7%BB%88%E7%AB%AF%E6%8F%90%E7%A4%BAShell%E9%9B%86%E6%88%90%E6%97%A0%E6%B3%95%E6%BF%80%E6%B4%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2022-08-26-14-21-56.png" alt="Shell 集成无法激活"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><a id="more"></a><p>不同的终端设置方式不同。</p><p>首先设置 <code>settings.json</code> 文件，添加如下设置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"terminal.integrated.shellIntegration.enabled":false,</span><br></pre></td></tr></table></figure><h3 id="bash"><a href="#bash" class="headerlink" title="bash"></a>bash</h3><p>Add the following to your <code>~/.bashrc</code> file. Run <code>code ~/.bashrc</code> in bash to open the file in VS Code.</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[ <span class="string">"<span class="variable">$TERM_PROGRAM</span>"</span> == <span class="string">"vscode"</span> ]] &amp;&amp; . <span class="string">"<span class="variable">$(code --locate-shell-integration-path bash)</span>"</span></span><br></pre></td></tr></table></figure></div><p>重启终端，结果如下：</p><p><img src="/2022/08/26/VSCode%E7%BB%88%E7%AB%AF%E6%8F%90%E7%A4%BAShell%E9%9B%86%E6%88%90%E6%97%A0%E6%B3%95%E6%BF%80%E6%B4%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2022-08-26-14-28-00.png" alt="bash已激活Shell集成"></p><p>参考官方文档：<a href="https://code.visualstudio.com/docs/terminal/shell-integration#_manual-installation" target="_blank" rel="noopener">https://code.visualstudio.com/docs/terminal/shell-integration#_manual-installation</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2022/08/26/VSCode%E7%BB%88%E7%AB%AF%E6%8F%90%E7%A4%BAShell%E9%9B%86%E6%88%90%E6%97%A0%E6%B3%95%E6%BF%80%E6%B4%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/2022-08-26-14-21-56.png&quot; alt=&quot;Shell 集成无法激活&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h2&gt;</summary>
    
    
    
    
    <category term="VSCode" scheme="https://xiaoyan94.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>MacOS 安装 PowerLine 字体并在 VSCode 和 iTerm zsh 终端里设置字体解决乱码问题</title>
    <link href="https://xiaoyan94.github.io/2022/08/25/MacOS-%E5%AE%89%E8%A3%85-PowerLine-%E5%AD%97%E4%BD%93%E5%B9%B6%E5%9C%A8-VSCode-%E5%92%8C-iTerm-zsh-%E7%BB%88%E7%AB%AF%E9%87%8C%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://xiaoyan94.github.io/2022/08/25/MacOS-%E5%AE%89%E8%A3%85-PowerLine-%E5%AD%97%E4%BD%93%E5%B9%B6%E5%9C%A8-VSCode-%E5%92%8C-iTerm-zsh-%E7%BB%88%E7%AB%AF%E9%87%8C%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</id>
    <published>2022-08-25T15:14:04.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="macOS-安装字体"><a href="#macOS-安装字体" class="headerlink" title="macOS 安装字体"></a>macOS 安装字体</h2><ol><li><p>以下载安装 PowerLine 字体为例，下载仓库为 <a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">https://github.com/powerline/fonts</a></p> <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> \</span><br><span class="line">--depth 1 \</span><br><span class="line">--filter=blob:none \</span><br><span class="line">--no-checkout \</span><br><span class="line">https://github.com/powerline/fonts \ <span class="comment"># 仓库地址</span></span><br><span class="line">;</span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line">git checkout master Meslo\ Dotted</span><br><span class="line">git checkout master Meslo\ Slashed</span><br></pre></td></tr></table></figure></div></li><li><p>进入字体文件夹，可以手动打开字体ttf文件进行安装，亦可以批量安装</p> <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Meslo\ Dotted</span><br><span class="line">ll *.ttf</span><br><span class="line">cp *.ttf ~/Library/Fonts</span><br></pre></td></tr></table></figure></div><p> <img src="/2022/08/25/MacOS-%E5%AE%89%E8%A3%85-PowerLine-%E5%AD%97%E4%BD%93%E5%B9%B6%E5%9C%A8-VSCode-%E5%92%8C-iTerm-zsh-%E7%BB%88%E7%AB%AF%E9%87%8C%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/2022-08-25-23-26-42.png" alt="macOS 批量安装字体"></p></li></ol><h2 id="VSCode-设置里的终端字体修改"><a href="#VSCode-设置里的终端字体修改" class="headerlink" title="VSCode 设置里的终端字体修改"></a>VSCode 设置里的终端字体修改</h2><p>VSCode 用户设置部分，编辑 <code>settings.json</code> 文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">"terminal.integrated.fontFamily": "Meslo LG L DZ for Powerline", // 需安装字体</span><br><span class="line">"terminal.integrated.defaultProfile.osx": "zsh",</span><br><span class="line">"terminal.external.osxExec": "iTerm.app",</span><br><span class="line">"terminal.integrated.profiles.osx": &#123;</span><br><span class="line">    "zsh": &#123;</span><br><span class="line">        "path": "/bin/zsh",</span><br><span class="line">        "args": ["-l"], // 若为空数组 [], 则环境变量有问题；为 ["-l"] 或则不配置 "args" 参数</span><br><span class="line">        "icon": "terminal-powershell"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">"settingsSync.ignoredSettings": [</span><br><span class="line">    <span class="string">"terminal.integrated.fontFamily"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>ps：需要确保指定字体已安装，且字体名称正确。（注意: 字体文件名和字体名称可能不同）</p></blockquote><h2 id="iTerm-终端字体"><a href="#iTerm-终端字体" class="headerlink" title="iTerm 终端字体"></a>iTerm 终端字体</h2><p>iTerm 终端的字体设置方法比较简单</p><p><img src="/2022/08/25/MacOS-%E5%AE%89%E8%A3%85-PowerLine-%E5%AD%97%E4%BD%93%E5%B9%B6%E5%9C%A8-VSCode-%E5%92%8C-iTerm-zsh-%E7%BB%88%E7%AB%AF%E9%87%8C%E8%AE%BE%E7%BD%AE%E5%AD%97%E4%BD%93%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/2022-08-25-23-43-10.png" alt="iTerm 终端的字体设置"></p><hr>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="macOS" scheme="https://xiaoyan94.github.io/tags/macOS/"/>
    
    <category term="终端" scheme="https://xiaoyan94.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Github 只克隆/下载/同步部分指定文件夹的方法</title>
    <link href="https://xiaoyan94.github.io/2022/08/25/Github-%E5%8F%AA%E5%85%8B%E9%9A%86-%E4%B8%8B%E8%BD%BD-%E5%90%8C%E6%AD%A5%E9%83%A8%E5%88%86%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaoyan94.github.io/2022/08/25/Github-%E5%8F%AA%E5%85%8B%E9%9A%86-%E4%B8%8B%E8%BD%BD-%E5%90%8C%E6%AD%A5%E9%83%A8%E5%88%86%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2022-08-25T14:39:42.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>需要从 <a href="https://github.com/powerline/fonts" target="_blank" rel="noopener">GitHub 仓库</a> 安装 PowerLine 系列字体，然而字体太多，不想全部克隆下来，又不想一个一个下载单个文件。</p><a id="more"></a><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li><p>终端输入以下命令，克隆仓库</p> <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> \</span><br><span class="line">--depth 1 \</span><br><span class="line">--filter=blob:none \</span><br><span class="line">--no-checkout \</span><br><span class="line">https://github.com/powerline/fonts \ <span class="comment"># 仓库地址</span></span><br></pre></td></tr></table></figure></div><blockquote><p>ps: 不包含任何文件，只包含仓库索引文件）</p></blockquote></li><li><p>进入克隆的仓库</p> <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> fonts</span><br></pre></td></tr></table></figure></div></li><li><p>克隆远程仓库里的指定文件夹</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master Meslo\ Dotted</span><br><span class="line">git checkout master Meslo\ Slashed</span><br></pre></td></tr></table></figure></div></li><li><p>查看</p><p> <img src="/2022/08/25/Github-%E5%8F%AA%E5%85%8B%E9%9A%86-%E4%B8%8B%E8%BD%BD-%E5%90%8C%E6%AD%A5%E9%83%A8%E5%88%86%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E7%9A%84%E6%96%B9%E6%B3%95/2022-08-25-23-08-30.png" alt="只从 GitHub 上克隆指定文件夹"></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/fjh1997/article/details/110074907" target="_blank" rel="noopener">最新git clone 克隆部分文件的方法</a></p><hr>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;需要从 &lt;a href=&quot;https://github.com/powerline/fonts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub 仓库&lt;/a&gt; 安装 PowerLine 系列字体，然而字体太多，不想全部克隆下来，又不想一个一个下载单个文件。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://xiaoyan94.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>SQL中Max函数查询效率问题与优化</title>
    <link href="https://xiaoyan94.github.io/2022/08/25/SQL%E4%B8%ADMax%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%E4%B8%8E%E4%BC%98%E5%8C%96/"/>
    <id>https://xiaoyan94.github.io/2022/08/25/SQL%E4%B8%ADMax%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%E4%B8%8E%E4%BC%98%E5%8C%96/</id>
    <published>2022-08-25T01:37:52.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL中使用order-by-…-limit-1替换Max函数"><a href="#MySQL中使用order-by-…-limit-1替换Max函数" class="headerlink" title="MySQL中使用order by … limit 1替换Max函数"></a>MySQL中使用order by … limit 1替换Max函数</h2><p>测试环境：</p><p><img src="/2022/08/25/SQL%E4%B8%ADMax%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%E4%B8%8E%E4%BC%98%E5%8C%96/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83.png" alt="测试环境"></p><p>测试Sql：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(sscode) <span class="keyword">from</span> sm_sku_show <span class="keyword">where</span> del_flag = <span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">select</span> sscode <span class="keyword">from</span> sm_sku_show <span class="keyword">where</span> del_flag = <span class="string">"0"</span> <span class="keyword">order</span> <span class="keyword">by</span> sscode <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></div><p>测试耗时：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[SQL]</span><br><span class="line">select max(sscode) from sm_sku_show where del_flag = "0";</span><br><span class="line">受影响的行: 0</span><br><span class="line">时间: 19.503s</span><br><span class="line"></span><br><span class="line">[SQL]</span><br><span class="line">select sscode from sm_sku_show where del_flag = "0" order by sscode desc limit 1;</span><br><span class="line">受影响的行: 0</span><br><span class="line">时间: 0.001s</span><br></pre></td></tr></table></figure></div><p>测试结果：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| max(sscode)         |</span><br><span class="line">+---------------------+</span><br><span class="line">| SS20180120101925999 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set</span><br><span class="line"></span><br><span class="line">+---------------------+</span><br><span class="line">| sscode              |</span><br><span class="line">+---------------------+</span><br><span class="line">| SS20180120101925999 |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure></div><p><strong>结论</strong>：</p><p>max() 函数的需扫描where条件过滤后的所有行。</p><p>请慎用max()函数，特别是频繁执行的sql，若需用到可转化为测试中的  order by id desc limit 1</p><a id="more"></a><hr><h2 id="SQL-Server中Max函数查询优化与查看执行计划"><a href="#SQL-Server中Max函数查询优化与查看执行计划" class="headerlink" title="SQL Server中Max函数查询优化与查看执行计划"></a>SQL Server中Max函数查询优化与查看执行计划</h2><p>SQL语句：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> northwind.dbo.OrderDetails</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(UnitPrice) <span class="keyword">from</span> northwind.dbo.OrderDetails</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">1</span> UnitPrice <span class="keyword">from</span> northwind.dbo.OrderDetails <span class="keyword">order</span> <span class="keyword">by</span> UnitPrice <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></div><p>执行结果：<br><img src="/2022/08/25/SQL%E4%B8%ADMax%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%E4%B8%8E%E4%BC%98%E5%8C%96/2022-08-25-09-40-47.png" alt="执行结果"></p><p>查看执行计划：<br><img src="/2022/08/25/SQL%E4%B8%ADMax%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%E4%B8%8E%E4%BC%98%E5%8C%96/%E6%9F%A5%E7%9C%8B%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.png" alt="查看执行计划"></p><p>预估的执行计划：<br><img src="/2022/08/25/SQL%E4%B8%ADMax%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%E4%B8%8E%E4%BC%98%E5%8C%96/%E9%A2%84%E4%BC%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.png" alt="预估的执行计划"></p><ul><li><a href="https://codeantenna.com/a/dPHrkc3gb1" target="_blank" rel="noopener">参考1</a></li><li><a href="https://blog.csdn.net/aumgla/article/details/79125979" target="_blank" rel="noopener">参考2</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;MySQL中使用order-by-…-limit-1替换Max函数&quot;&gt;&lt;a href=&quot;#MySQL中使用order-by-…-limit-1替换Max函数&quot; class=&quot;headerlink&quot; title=&quot;MySQL中使用order by … limit 1替换Max函数&quot;&gt;&lt;/a&gt;MySQL中使用order by … limit 1替换Max函数&lt;/h2&gt;&lt;p&gt;测试环境：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/08/25/SQL%E4%B8%ADMax%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%E9%97%AE%E9%A2%98%E4%B8%8E%E4%BC%98%E5%8C%96/%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83.png&quot; alt=&quot;测试环境&quot;&gt;&lt;/p&gt;
&lt;p&gt;测试Sql：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;max&lt;/span&gt;(sscode) &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sm_sku_show &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; del_flag = &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; sscode &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; sm_sku_show &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; del_flag = &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; sscode &lt;span class=&quot;keyword&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;测试耗时：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[SQL]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select max(sscode) from sm_sku_show where del_flag = &quot;0&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;受影响的行: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;时间: 19.503s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[SQL]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select sscode from sm_sku_show where del_flag = &quot;0&quot; order by sscode desc limit 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;受影响的行: 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;时间: 0.001s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;测试结果：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| max(sscode)         |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| SS20180120101925999 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 row in set&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| sscode              |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| SS20180120101925999 |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+---------------------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 row in set&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;max() 函数的需扫描where条件过滤后的所有行。&lt;/p&gt;
&lt;p&gt;请慎用max()函数，特别是频繁执行的sql，若需用到可转化为测试中的  order by id desc limit 1&lt;/p&gt;</summary>
    
    
    
    
    <category term="SQL" scheme="https://xiaoyan94.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>VMware Workstation Pro v16.2.4 官方版+16激活密钥</title>
    <link href="https://xiaoyan94.github.io/2022/08/24/VMware-Workstation-Pro-v16-2-4-%E5%AE%98%E6%96%B9%E7%89%88-16%E6%BF%80%E6%B4%BB%E5%AF%86%E9%92%A5/"/>
    <id>https://xiaoyan94.github.io/2022/08/24/VMware-Workstation-Pro-v16-2-4-%E5%AE%98%E6%96%B9%E7%89%88-16%E6%BF%80%E6%B4%BB%E5%AF%86%E9%92%A5/</id>
    <published>2022-08-24T08:59:36.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VMware-Workstation-Pro-v16-2-4-激活"><a href="#VMware-Workstation-Pro-v16-2-4-激活" class="headerlink" title="VMware Workstation Pro v16.2.4 激活"></a>VMware Workstation Pro v16.2.4 激活</h2><p>下载方式：VMware官网<br>激活方式：输入密钥 <code>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</code></p><a id="more"></a><h2 id="激活方式"><a href="#激活方式" class="headerlink" title="激活方式"></a>激活方式</h2><h3 id="16版本"><a href="#16版本" class="headerlink" title="16版本"></a>16版本</h3><p>ZF3R0-FHED2-M80TY-8QYGC-NPKYF</p><h3 id="15版本"><a href="#15版本" class="headerlink" title="15版本"></a>15版本</h3><p>可以使用网盘附带的注册机算key激活，或者直接使用下面的一组激活即可</p><p>FG78K-0UZ15-085TQ-TZQXV-XV0CD</p><p>ZA11U-DVY97-M81LP-4MNEZ-X3AW0</p><p>YU102-44D86-48D2Z-Z4Q5C-MFAWD</p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>官网下载：</p><p><a href="https://www.vmware.com/go/getworkstation-win" target="_blank" rel="noopener">https://www.vmware.com/go/getworkstation-win</a></p><p>已高速(如有密码：3519)<a href="http://ct.ghpym.com/d/7369060-41496370-0d53b8" target="_blank" rel="noopener">http://ct.ghpym.com/d/7369060-41496370-0d53b8</a></p><p><a href="https://pan.quark.cn/s/1679072c6d07" target="_blank" rel="noopener">https://pan.quark.cn/s/1679072c6d07</a></p><p>已高速<a href="http://www.123pan.com/s/HQeA-aX1Sh" target="_blank" rel="noopener">http://www.123pan.com/s/HQeA-aX1Sh</a></p><p>链接：<a href="https://pan.baidu.com/s/1sa7Fq9AW2Nsx4tsM5CrFXA" target="_blank" rel="noopener">https://pan.baidu.com/s/1sa7Fq9AW2Nsx4tsM5CrFXA</a><br>提取码：fpii</p><h2 id="VMware虚拟机设置U盘启动与BIOS设置教程"><a href="#VMware虚拟机设置U盘启动与BIOS设置教程" class="headerlink" title="VMware虚拟机设置U盘启动与BIOS设置教程"></a><a href="https://blog.csdn.net/awfiihmmmm/article/details/105543257" target="_blank" rel="noopener">VMware虚拟机设置U盘启动与BIOS设置教程</a></h2><hr><p><a href="https://www.ghxi.com/vmware15.html" target="_blank" rel="noopener">参考文章</a></p><hr>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;VMware-Workstation-Pro-v16-2-4-激活&quot;&gt;&lt;a href=&quot;#VMware-Workstation-Pro-v16-2-4-激活&quot; class=&quot;headerlink&quot; title=&quot;VMware Workstation Pro v16.2.4 激活&quot;&gt;&lt;/a&gt;VMware Workstation Pro v16.2.4 激活&lt;/h2&gt;&lt;p&gt;下载方式：VMware官网&lt;br&gt;激活方式：输入密钥 &lt;code&gt;ZF3R0-FHED2-M80TY-8QYGC-NPKYF&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="软件" scheme="https://xiaoyan94.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>mermaid测试</title>
    <link href="https://xiaoyan94.github.io/2022/08/18/mermaid%E6%B5%8B%E8%AF%95/"/>
    <id>https://xiaoyan94.github.io/2022/08/18/mermaid%E6%B5%8B%E8%AF%95/</id>
    <published>2022-08-18T00:42:25.000Z</published>
    <updated>2023-01-14T00:48:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mermaid-流程图"><a href="#mermaid-流程图" class="headerlink" title="mermaid 流程图"></a>mermaid 流程图</h2><p><img src="/2022/08/18/mermaid%E6%B5%8B%E8%AF%95/2022-08-18-10-05-35.png" alt="写法不同"></p><h3 id="graph测试"><a href="#graph测试" class="headerlink" title="graph测试"></a>graph测试</h3><p>垂直流程图 <code>graph TD</code>：</p><pre class="mermaid">graph TD;    好好摸鱼-->辞职;    好好摸鱼-->跑路;    跑路-->赚钱;    辞职-->赚钱;    跑路-->高薪;    辞职-->高薪;    赚钱-->人生巅峰;    高薪-->人生巅峰;            人生巅峰-->好好摸鱼;</pre><p>水平流程图</p><pre class="mermaid">graph LR;    A-->B;    A-->C;    B-->D;    C-->D;</pre><pre class="mermaid">graph TD;    A-->B;    A-->C;    B-->D;    C-->D;</pre><hr><p>flowchart 测试</p><pre class="mermaid">gantt    title A Gantt Diagram    dateFormat  YYYY-MM-DD    section Section    A task           :a1, 2014-01-01, 30d    Another task     :after a1  , 20d    section Another    Task in sec      :2014-01-12  , 12d    another task      : 24d</pre><pre class="mermaid">graph TB    id1(圆角矩形)--普通线-->id2[矩形]    subgraph 子图表        id2==粗线==>id3{菱形}        id3-.虚线.->id4>右向旗帜]        id3--无箭头---id5((圆形))    end    style id1 fill:#f9f,stroke:#333,stroke-width:4px</pre><pre class="mermaid">sequenceDiagram    participant z as 张    participant l as 刘    loop 中秋三天假        z->>l: 吃了吗您呐？        l-->>z: 没吃，您呢？        activate z        Note left of z: 想了一下        alt 还没吃            z-xl: 还没呢，正准备回去吃        else 已经吃了            z-xl: 我也吃过了，哈哈        end        opt 大过节的            l-->z: 祝您中秋快乐啊        end    end</pre><hr><pre class="mermaid">sequenceDiagram    Alice->>+John: Hello John, how are you?    Alice->>+John: John, can you hear me?    John-->>-Alice: Hi Alice, I can hear you!    John-->>-Alice: I feel great!</pre><hr><p>sequenceDiagram测试</p><pre class="mermaid">sequenceDiagram;Alice->>John: Hello John, how are you?loop Healthcheck    John->>John: Fight against hypochondriaendNote right of John: Rational thoughts!John-->>Alice: Great!John->>Bob: How about you?Bob-->>John: Jolly good!</pre><hr>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Markdown" scheme="https://xiaoyan94.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 使用教程</title>
    <link href="https://xiaoyan94.github.io/2022/08/16/2022%E6%B5%8B%E8%AF%95/"/>
    <id>https://xiaoyan94.github.io/2022/08/16/2022%E6%B5%8B%E8%AF%95/</id>
    <published>2022-08-16T13:37:52.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-使用教程"><a href="#Hexo-使用教程" class="headerlink" title="Hexo 使用教程"></a>Hexo 使用教程</h2><h3 id="1-新建页面"><a href="#1-新建页面" class="headerlink" title="1.新建页面"></a>1.新建页面</h3><p>命令：<code>hexo new post 2022测试</code></p><p>添加 Tags：修改 tags 内容为<code>tags: [Github,hexo]</code></p><h3 id="2-添加图片"><a href="#2-添加图片" class="headerlink" title="2.添加图片"></a>2.添加图片</h3><p><img src="/2022/08/16/2022%E6%B5%8B%E8%AF%95/test%20img.jpeg" alt="引用方法 1"></p><a id="more"></a><p><img src="/2022/08/16/2022%E6%B5%8B%E8%AF%95/test.jpeg" alt="引用方法 2"></p><p>引用方法 3 不可用：<code><img src="/2022/08/16/2022%E6%B5%8B%E8%AF%95/08/16/2022%E6%B5%8B%E8%AF%95/test.jpeg" class title="test"></code><br><img src="/2022/08/16/2022%E6%B5%8B%E8%AF%95/2022-08-17-00-19-33.png" alt="截图后一键粘贴图片 Cmd+Alt+V"></p><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div><h2 id="Hexo-升级"><a href="#Hexo-升级" class="headerlink" title="Hexo 升级"></a>Hexo 升级</h2><p>升级 hexo：<code>npm install hexo-cli -g</code><br>安装插件：<code>npm install hexo-renderer-marked --save</code><br>删除插件：<code>npm remove hexo-renderer-marked</code></p><blockquote><p><a href="https://stackoverflow.com/questions/58972251/what-does-x-packages-are-looking-for-funding-mean-when-running-npm-install" target="_blank" rel="noopener">What does ‘x packages are looking for funding’ mean when running `npm install`?</a></p></blockquote><h2 id="在Windows上同步使用"><a href="#在Windows上同步使用" class="headerlink" title="在Windows上同步使用"></a>在Windows上同步使用</h2><ol><li>安装Node.js</li><li>安装GitHub Desktop、克隆自己的hexo源代码仓库到本地（不是克隆GitHub Pages仓库到本地）</li><li>安装Hexo<ul><li>执行<code>npm install hexo</code>、<code>npm install -g hexo-cli</code>、<code>npm install</code>、主题已包含，不需要执行<code>npm install hexo-deployer-git</code>；（不需要hexo init）</li></ul></li><li>生成秘钥：<code>ssh-keygen</code>；在GitHub和Gitee设置添加公钥；连接测试：<code>ssh -T git@gitee.com</code>、<code>ssh -T git@github.com</code></li></ol><p><a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">参考文档:官方</a></p><p><a href="https://www.jianshu.com/p/937bda9123da" target="_blank" rel="noopener">参考文档:多设备同步</a></p><h2 id="使用-Gitee-Pages-Action-自动部署至-Gitee"><a href="#使用-Gitee-Pages-Action-自动部署至-Gitee" class="headerlink" title="使用 Gitee Pages Action 自动部署至 Gitee"></a>使用 Gitee Pages Action 自动部署至 Gitee</h2><h2 id="VSCode-插件"><a href="#VSCode-插件" class="headerlink" title="VSCode 插件"></a>VSCode 插件</h2><h3 id="复制粘贴图片：Paste-Image"><a href="#复制粘贴图片：Paste-Image" class="headerlink" title="复制粘贴图片：Paste Image"></a>复制粘贴图片：Paste Image</h3><p>插件设置将图片保存到 md 文件同名文件夹资源目录：</p><p><code>Base Path</code> 保持默认值：<code>${currentFileDir}</code></p><p><code>Path</code> 修改为：<code>${currentFileNameWithoutExt}</code></p><p><code>&quot;pasteImage.path&quot;: &quot;${currentFileNameWithoutExt}&quot;</code></p><p>使用 <code>Ctrl/Cmd+Alt+V</code> 自动粘贴图片</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Hexo-使用教程&quot;&gt;&lt;a href=&quot;#Hexo-使用教程&quot; class=&quot;headerlink&quot; title=&quot;Hexo 使用教程&quot;&gt;&lt;/a&gt;Hexo 使用教程&lt;/h2&gt;&lt;h3 id=&quot;1-新建页面&quot;&gt;&lt;a href=&quot;#1-新建页面&quot; class=&quot;headerlink&quot; title=&quot;1.新建页面&quot;&gt;&lt;/a&gt;1.新建页面&lt;/h3&gt;&lt;p&gt;命令：&lt;code&gt;hexo new post 2022测试&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加 Tags：修改 tags 内容为&lt;code&gt;tags: [Github,hexo]&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-添加图片&quot;&gt;&lt;a href=&quot;#2-添加图片&quot; class=&quot;headerlink&quot; title=&quot;2.添加图片&quot;&gt;&lt;/a&gt;2.添加图片&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2022/08/16/2022%E6%B5%8B%E8%AF%95/test%20img.jpeg&quot; alt=&quot;引用方法 1&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Github" scheme="https://xiaoyan94.github.io/tags/Github/"/>
    
    <category term="hexo" scheme="https://xiaoyan94.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js学习笔记</title>
    <link href="https://xiaoyan94.github.io/2021/12/05/Vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://xiaoyan94.github.io/2021/12/05/Vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-12-05T13:11:33.000Z</published>
    <updated>2023-02-25T00:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><h3 id="windows环境安装nvm"><a href="#windows环境安装nvm" class="headerlink" title="windows环境安装nvm"></a>windows环境安装nvm</h3><p>安装 <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm-setup.exe</a></p><p><em>安装路径不能包含空格</em>。</p><ol><li>NVM安装路径设置为 <strong><code>D:\nvm</code></strong></li><li>Node.js Symlink路径设置为 <strong><code>D:\nvm\node.js</code></strong></li></ol><p>安装nvm前不必卸载之前已安装的node.js环境，安装nvm时会提示“是否允许nvm控制已安装的node.js版本？”，点同意即可。nvm会自动把已安装的Node.js文件夹移动到设置好的Node.js Symlink路径，即 <code>**D:\nvm\node.js**</code>。</p><p><img src="/2021/12/05/Vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/nvm%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="nvm安装文件夹"></p><h3 id="使用nvm解决nodejs版本不兼容造成的hexo警告信息"><a href="#使用nvm解决nodejs版本不兼容造成的hexo警告信息" class="headerlink" title="使用nvm解决nodejs版本不兼容造成的hexo警告信息"></a>使用nvm解决nodejs版本不兼容造成的hexo警告信息</h3><p><a href="https://hexo.io/docs/#Required-Node-js-version" target="_blank" rel="noopener">根据Hexo官网介绍，不同版本的Hexo依赖不同版本的Node.js</a></p><p>If you are stuck with older Node.js, you can consider installing a past version of Hexo.</p><p>Please note we do not provide bugfixes to past versions of Hexo.</p><p>We highly recommend to always install the <a href="https://www.npmjs.com/package/hexo?activeTab=versions" target="_blank" rel="noopener">latest version</a> of Hexo and the <a href="https://hexo.io/docs/#Requirements" target="_blank" rel="noopener">recommended version</a> of Node.js, whenever possible.</p><table><thead><tr><th>Hexo version</th><th>Minimum (Node.js version)</th><th>Less than (Node.js version)</th></tr></thead><tbody><tr><td>6.2+</td><td>12.13.0</td><td>latest</td></tr><tr><td>6.0+</td><td>12.13.0</td><td>18.5.0</td></tr><tr><td>5.0+</td><td>10.13.0</td><td>12.0.0</td></tr><tr><td>4.1 - 4.2</td><td>8.10</td><td>10.0.0</td></tr><tr><td>4.0</td><td>8.6</td><td>8.10.0</td></tr><tr><td>3.3 - 3.9</td><td>6.9</td><td>8.0.0</td></tr><tr><td>3.2 - 3.3</td><td>0.12</td><td>unknown</td></tr><tr><td>3.0 - 3.1</td><td>0.10 or iojs</td><td>unknown</td></tr><tr><td>0.0.1 - 2.8</td><td>0.10</td><td>unknown</td></tr></tbody></table><p>hexo在较高版本的node.js环境下运行时的警告：</p><p><img src="/2021/12/05/Vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2023-02-09-14-10-27.png" alt="hexo在较高版本的node.js环境下运行时的警告"></p><p>使用nvm命令安装（<code>nvm install v12</code>）并使用<code>nvm use</code>命令切换node.js版本为v12，警告消失：</p><p><img src="/2021/12/05/Vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2023-02-09-14-11-09.png" alt="hexo在切换node.js版本后运行警告消失"></p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>npm安装 vue-cli: <code>npm install -g vue-cli</code></p><p>当前 index.html 路径下安装 vue.js: <code>npm i vue --save</code></p><p><code>vue init webpack-simple Demo5</code></p><p>好多，不想写了…</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;nvm&quot;&gt;&lt;a href=&quot;#nvm&quot; class=&quot;headerlink&quot; title=&quot;nvm&quot;&gt;&lt;/a&gt;nvm&lt;/h2&gt;&lt;h3 id=&quot;windows环境安装nvm&quot;&gt;&lt;a href=&quot;#windows环境安装nvm&quot; class=&quot;headerlink&quot; title=&quot;windows环境安装nvm&quot;&gt;&lt;/a&gt;windows环境安装nvm&lt;/h3&gt;&lt;p&gt;安装 &lt;a href=&quot;https://github.com/coreybutler/nvm-windows/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nvm-setup.exe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;安装路径不能包含空格&lt;/em&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NVM安装路径设置为 &lt;strong&gt;&lt;code&gt;D:\nvm&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Node.js Symlink路径设置为 &lt;strong&gt;&lt;code&gt;D:\nvm\node.js&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装nvm前不必卸载之前已安装的node.js环境，安装nvm时会提示“是否允许nvm控制已安装的node.js版本？”，点同意即可。nvm会自动把已安装的Node.js文件夹移动到设置好的Node.js Symlink路径，即 &lt;code&gt;**D:\nvm\node.js**&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/12/05/Vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/nvm%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6%E5%A4%B9.png&quot; alt=&quot;nvm安装文件夹&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;使用nvm解决nodejs版本不兼容造成的hexo警告信息&quot;&gt;&lt;a href=&quot;#使用nvm解决nodejs版本不兼容造成的hexo警告信息&quot; class=&quot;headerlink&quot; title=&quot;使用nvm解决nodejs版本不兼容造成的hexo警告信息&quot;&gt;&lt;/a&gt;使用nvm解决nodejs版本不兼容造成的hexo警告信息&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://hexo.io/docs/#Required-Node-js-version&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;根据Hexo官网介绍，不同版本的Hexo依赖不同版本的Node.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are stuck with older Node.js, you can consider installing a past version of Hexo.&lt;/p&gt;
&lt;p&gt;Please note we do not provide bugfixes to past versions of Hexo.&lt;/p&gt;
&lt;p&gt;We highly recommend to always install the &lt;a href=&quot;https://www.npmjs.com/package/hexo?activeTab=versions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;latest version&lt;/a&gt; of Hexo and the &lt;a href=&quot;https://hexo.io/docs/#Requirements&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;recommended version&lt;/a&gt; of Node.js, whenever possible.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hexo version&lt;/th&gt;
&lt;th&gt;Minimum (Node.js version)&lt;/th&gt;
&lt;th&gt;Less than (Node.js version)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;6.2+&lt;/td&gt;
&lt;td&gt;12.13.0&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.0+&lt;/td&gt;
&lt;td&gt;12.13.0&lt;/td&gt;
&lt;td&gt;18.5.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.0+&lt;/td&gt;
&lt;td&gt;10.13.0&lt;/td&gt;
&lt;td&gt;12.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.1 - 4.2&lt;/td&gt;
&lt;td&gt;8.10&lt;/td&gt;
&lt;td&gt;10.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;8.6&lt;/td&gt;
&lt;td&gt;8.10.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.3 - 3.9&lt;/td&gt;
&lt;td&gt;6.9&lt;/td&gt;
&lt;td&gt;8.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.2 - 3.3&lt;/td&gt;
&lt;td&gt;0.12&lt;/td&gt;
&lt;td&gt;unknown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.0 - 3.1&lt;/td&gt;
&lt;td&gt;0.10 or iojs&lt;/td&gt;
&lt;td&gt;unknown&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0.0.1 - 2.8&lt;/td&gt;
&lt;td&gt;0.10&lt;/td&gt;
&lt;td&gt;unknown&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;hexo在较高版本的node.js环境下运行时的警告：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/12/05/Vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2023-02-09-14-10-27.png&quot; alt=&quot;hexo在较高版本的node.js环境下运行时的警告&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用nvm命令安装（&lt;code&gt;nvm install v12&lt;/code&gt;）并使用&lt;code&gt;nvm use&lt;/code&gt;命令切换node.js版本为v12，警告消失：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2021/12/05/Vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2023-02-09-14-11-09.png&quot; alt=&quot;hexo在切换node.js版本后运行警告消失&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://xiaoyan94.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://xiaoyan94.github.io/tags/Vue/"/>
    
    <category term="Node" scheme="https://xiaoyan94.github.io/tags/Node/"/>
    
    <category term="Hexo" scheme="https://xiaoyan94.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>ES6新语法中的Promise</title>
    <link href="https://xiaoyan94.github.io/2021/02/28/ES6%E6%96%B0%E8%AF%AD%E6%B3%95%E4%B8%AD%E7%9A%84Promise/"/>
    <id>https://xiaoyan94.github.io/2021/02/28/ES6%E6%96%B0%E8%AF%AD%E6%B3%95%E4%B8%AD%E7%9A%84Promise/</id>
    <published>2021-02-28T11:16:00.000Z</published>
    <updated>2023-02-25T00:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="1-Promise-的定义和使用"><a href="#1-Promise-的定义和使用" class="headerlink" title="1 Promise 的定义和使用"></a>1 Promise 的定义和使用</h3><p><strong>Promise</strong> 是 ES6 引入的异步编程的新解决方案，语法上 Promise 是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果</p><p>一个 Promise 必然处于以下几种状态之一</p><ul><li>待定 pending：初始状态，既没有被兑现，也没有被拒绝</li><li>已兑现 fulfilled：意味着操作成功完成</li><li>已拒绝 rejected：意味着操作失败</li></ul><p>Promise 的使用</p><ul><li>Promise 构造函数new Promise((resolve, reject) &#x3D;&gt; {})</li><li>Promise.prototype.then()方法</li><li>Promise.prototype.catch()方法</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 setTimeout 模拟请求数据库数据操作</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> isRight = <span class="literal">true</span>; <span class="comment">// 这个异步请求数据库数据操作是否正确返回数据</span></span><br><span class="line">        <span class="keyword">if</span> (isRight) &#123;</span><br><span class="line">            <span class="keyword">let</span> data = <span class="string">'数据库中的数据'</span>;</span><br><span class="line">            resolve(data); <span class="comment">// 设置 Promise 对象的状态为操作成功</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> err = <span class="string">'数据读取失败！'</span></span><br><span class="line">            reject(err); <span class="comment">// 设置 Promise 对象的状态为操作失败</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="2-Promise-封装读取文件"><a href="#2-Promise-封装读取文件" class="headerlink" title="2 Promise 封装读取文件"></a>2 Promise 封装读取文件</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 nodejs 的 fs 读取文件模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./resources/为学.txt'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) reject(err); <span class="comment">// err 是一个异常对象</span></span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.toString()); <span class="comment">// 转为字符串输出</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取失败!!'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="3-Promise-封装-Ajax-请求"><a href="#3-Promise-封装-Ajax-请求" class="headerlink" title="3 Promise 封装 Ajax 请求"></a>3 Promise 封装 Ajax 请求</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'get'</span>, <span class="string">'https://api.apiopen.top/getJoke'</span>);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                resolve(xhr.response); <span class="comment">// 成功</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(xhr.status); <span class="comment">// 失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定回调</span></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="4-Promise-prototype-then-方法"><a href="#4-Promise-prototype-then-方法" class="headerlink" title="4 Promise.prototype.then 方法"></a>4 Promise.prototype.then 方法</h3><p>Promise.prototype.then 方法返回的结果依然是 Promise 对象，对象状态由回调函数的执行结果决定</p><p>具体情况如下</p><ul><li>若 then 方法写返回值，则 then 方法返回的对象的状态值为成功 fulfilled，返回结果值为 undefined</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve('用户数据')</span></span><br><span class="line">        reject(<span class="string">'出错了'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 未设定返回值</span></span><br><span class="line"><span class="keyword">const</span> res = p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;, (reason) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印 then 方法的返回值</span></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure></div><ul><li>如果回调函数中返回的结果是非 Promise 类型的属性，则 then 方法返回的对象，其状态为成功 fulfilled，返回结果值取决于 then 方法所执行的是哪个函数（resolve 或 reject）</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve('用户数据')</span></span><br><span class="line">        reject(<span class="string">'出错了'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> <span class="comment">// 返回的非 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> res = p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'成功了！！'</span>;</span><br><span class="line">&#125;, (reason) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(reason);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'出错啦！！'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印 then 方法的返回值</span></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure></div><ul><li>如果回调函数中返回的结果是 Promise 类型 return new Promise()，则 then 方法返回的 Promise 对象状态与该返回结果的状态相同，返回值也相同</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'用户数据'</span>)</span><br><span class="line">        <span class="comment">// reject('出错了');</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> res = p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="comment">// 返回 Promise 对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'（1）成功了！！！'</span>);</span><br><span class="line">        <span class="comment">// reject('（1）出错了！！！')</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, (reason) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(reason);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve('（2）成功了！！！');</span></span><br><span class="line">        reject(<span class="string">'（2）出错了！！！'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印 then 方法的返回值</span></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure></div><ul><li>如果回调函数中返回的结果是 throw 语句抛出异常，则 then 方法的对象的状态值为 rejected，返回结果值为 throw 抛出的字面量或者 Error 对象</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'用户数据'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> res = p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错误了！！'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure></div><h3 id="4-链式调用"><a href="#4-链式调用" class="headerlink" title="4 链式调用"></a>4 链式调用</h3><p>Promise.prototype.then 方法返回的结果还是 Promise 对象，这意味着我们可以继续在该结果上使用 then 方法，也就是链式调用，杜绝回调地狱</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span>=&gt;</span>&#123;&#125;, reject=&gt;&#123;&#125;);</span><br><span class="line">p.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;&#125;, reason=&gt;&#123;&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;&#125;, reason=&gt;&#123;&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;&#125;, reason=&gt;&#123;&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><h3 id="5-Promise-prototype-catch"><a href="#5-Promise-prototype-catch" class="headerlink" title="5 Promise.prototype.catch"></a>5 Promise.prototype.catch</h3><p>catch() 方法返回一个 Promise，并且处理拒绝的情况<br>它的行为与调用 Promise.prototype.then(undefined, onRejected) 相同</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVASCRIPT"><figure class="iseeu highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.catch(onRejected);</span><br><span class="line">等同于</span><br><span class="line">obj.then(<span class="literal">undefined</span>, onRejected);</span><br></pre></td></tr></table></figure></div><p>语法</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.catch(onRejected);</span><br><span class="line"></span><br><span class="line">p.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 拒绝</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>举例</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">'Success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value); <span class="comment">// "Success!"</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'oh, no!'</span>;</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e); <span class="comment">// "oh, no!"</span></span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'有 catch 捕获异常，所以这句输出'</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'没有 catch 捕获异常，这句将不会输出'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">Success</span><br><span class="line">oh, no!</span><br><span class="line">有 <span class="keyword">catch</span> 捕获异常，所以这句输出</span><br></pre></td></tr></table></figure></div><h3 id="6-链式调用练习-多个文件读取"><a href="#6-链式调用练习-多个文件读取" class="headerlink" title="6 链式调用练习-多个文件读取"></a>6 链式调用练习-多个文件读取</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调方式</span></span><br><span class="line">fs.readFile(<span class="string">'./resources/为学.md'</span>, (err, data1)=&gt;&#123;</span><br><span class="line">    fs.readFile(<span class="string">'./resources/插秧诗.md'</span>, (err, data2)=&gt;&#123;</span><br><span class="line">        fs.readFile(<span class="string">'./resources/观书有感.md'</span>, (err, data3)=&gt;&#123;</span><br><span class="line">            <span class="keyword">let</span> result = data1 + <span class="string">'\r\n'</span> +data2  +<span class="string">'\r\n'</span>+ data3;</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 方式</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">'./resources/users.md'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        resolve(data); <span class="comment">// 设置状态</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// value 为第一次读取的文件数据，data 为第二次（当前）读取的数据</span></span><br><span class="line">        fs.readFile(<span class="string">'./resources/orders.md'</span>, (err, data) =&gt; &#123;</span><br><span class="line">            resolve([value, data]); <span class="comment">// 将上轮读取结果和本轮合并传到下一轮轮读取操作</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">'./resources/goods.md'</span>, (err, data) =&gt; &#123;</span><br><span class="line">            <span class="comment">// value 为上一轮传递过来的文件数据数组</span></span><br><span class="line">            value.push(data);</span><br><span class="line">            <span class="comment">// 传给下一轮操作</span></span><br><span class="line">            resolve(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 合并数组元素，输出</span></span><br><span class="line">    <span class="built_in">console</span>.log(value.join(<span class="string">'\r\n'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p>以上只是 Promise 的入门，更多还要进一步深入学习</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="JavaScript" scheme="https://xiaoyan94.github.io/tags/JavaScript/"/>
    
    <category term="ES6" scheme="https://xiaoyan94.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>一点关于WebSocket</title>
    <link href="https://xiaoyan94.github.io/2021/02/23/%E4%B8%80%E7%82%B9%E5%85%B3%E4%BA%8EWebSocket/"/>
    <id>https://xiaoyan94.github.io/2021/02/23/%E4%B8%80%E7%82%B9%E5%85%B3%E4%BA%8EWebSocket/</id>
    <published>2021-02-23T10:51:41.000Z</published>
    <updated>2023-02-25T00:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP协议本身不是为了长连接而开发的。所谓长连接，指的是TCP连接建立之后，长时间持续保持连接状态并进行通讯。</p><p>虽然HTTP协议后来引入的<code>Connection: keep-alive</code>机制有保持连接的效果，但设计初衷却是为了在几个连续的HTTP请求之间共享TCP连接以加快页面加载速度。</p><p>而在浏览器中实现类似于TCP长连接的需求，进行实时双向通讯，是有着诸多实际需要的。这催生了WebSocket的产生。</p><h2 id="WebSocket连接的建立"><a href="#WebSocket连接的建立" class="headerlink" title="WebSocket连接的建立"></a>WebSocket连接的建立</h2><p>客户端向Web服务器发起HTTP请求，寻求Upgrade为WebSocket。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="MAKEFILE"><figure class="iseeu highlight /makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /chat HTTP/1.1</span><br><span class="line"><span class="section">Host: example.com:8000</span></span><br><span class="line"><span class="section">Upgrade: websocket</span></span><br><span class="line"><span class="section">Connection: Upgrade</span></span><br><span class="line"><span class="section">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span></span><br><span class="line"><span class="section">Sec-WebSocket-Version: 13</span></span><br></pre></td></tr></table></figure></div><p>如果服务器支持并允许这个WebSocket请求的话，返回一个类似于下面这样的HTTP相应：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="MAKEFILE"><figure class="iseeu highlight /makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line"><span class="section">Upgrade: websocket</span></span><br><span class="line"><span class="section">Connection: Upgrade</span></span><br><span class="line"><span class="section">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=</span></span><br></pre></td></tr></table></figure></div><p>(以上示例来源于 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers" target="_blank" rel="noopener">Writing WebSocket Servers</a>)</p><p>接下来，客户端和服务器端开始根据WebSocket协议进行数据传送和接收。</p><h3 id="握手过程中的“口令”"><a href="#握手过程中的“口令”" class="headerlink" title="握手过程中的“口令”"></a>握手过程中的“口令”</h3><p>上面的握手过程中，客户端通过”Sec-WebSocket-Key”发送了一个随机字符串。</p><p>服务器端返回的验证字段”Sec-WebSocket-Accept”的计算过程如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="TCL"><figure class="iseeu highlight /tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> key    [web::request <span class="string">"Sec-WebSocket-Key"</span>]</span><br><span class="line"><span class="keyword">set</span> magic  <span class="string">"258EAFA5-E914-47DA-95CA-C5AB0DC85B11"</span></span><br><span class="line"><span class="keyword">set</span> secret [::base64::encode [sha1::sha1 -bin <span class="string">"$key$magic"</span>]]</span><br><span class="line">web::response -<span class="keyword">set</span> <span class="string">"Sec-WebSocket-Accept"</span> $secret</span><br></pre></td></tr></table></figure></div><h2 id="浏览器里的WebSocket"><a href="#浏览器里的WebSocket" class="headerlink" title="浏览器里的WebSocket"></a>浏览器里的WebSocket</h2><p>浏览器里的WebSocket主要作为客户端。其接口本身倒并不复杂，主要是建立连接，监听处理4个事件，发送消息，和关闭连接这几个操作。</p><ul><li><code>new WebSocket(url)</code> # 建立连接</li><li><code>onopen</code> # 连接建立时的回调函数</li><li><code>onmessage</code> # 收到消息时的回调函数</li><li><code>onclose</code> # 连接关闭时的回调函数</li><li><code>onerror</code> # 发生错误时的回调函数</li><li><code>send(message)</code> # 发送消息</li><li><code>close(code?, reason?)</code> # 关闭连接</li></ul><p>相关文档可以参考 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank" rel="noopener">WebSocket @ Mozilla Web Docs</a></p><p>代码轮廓如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'ws://some.host.com:8080/'</span>);</span><br><span class="line"></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    socket.send(<span class="string">'Hello Server!'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Message from server'</span>, event.data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Good Bye Server!'</span>, event.data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Oh! Some Error!'</span>, event.data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.send(<span class="string">"Message to server"</span>);</span><br><span class="line"></span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure></div><h2 id="为什么不用HTTP的keep-alive机制"><a href="#为什么不用HTTP的keep-alive机制" class="headerlink" title="为什么不用HTTP的keep-alive机制"></a>为什么不用HTTP的keep-alive机制</h2><ul><li>Web服务器对于<code>keep-alive</code>很多时候有timeout限制。</li><li>每次HTTP请求“冗余”的头部信息也是一种传输负担。</li><li>HTTP请求依赖于客户端的”Pull”。</li><li>服务器端的主动”Push”无法实现。需要客户端通过轮询（polling）来变通。</li></ul><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><ul><li><a href="https://tools.ietf.org/html/rfc6455" target="_blank" rel="noopener">rfc6455: The WebSocket Protocol</a></li><li><a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">rfc2616: Hypertext Transfer Protocol – HTTP&#x2F;1.1</a></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="HTTP" scheme="https://xiaoyan94.github.io/tags/HTTP/"/>
    
    <category term="WebSocket" scheme="https://xiaoyan94.github.io/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>TCP握手和HTTP/HTTPS建立连接流程，HTTP/1.1和HTTP/2的区别</title>
    <link href="https://xiaoyan94.github.io/2021/02/20/TCP%E5%92%8CHTTP%E6%8F%A1%E6%89%8B/"/>
    <id>https://xiaoyan94.github.io/2021/02/20/TCP%E5%92%8CHTTP%E6%8F%A1%E6%89%8B/</id>
    <published>2021-02-20T13:40:28.000Z</published>
    <updated>2023-02-25T00:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP和HTTP握手"><a href="#TCP和HTTP握手" class="headerlink" title="TCP和HTTP握手"></a>TCP和HTTP握手</h2><h3 id="TCP三次握手建立连接"><a href="#TCP三次握手建立连接" class="headerlink" title="TCP三次握手建立连接"></a>TCP三次握手建立连接</h3><p>TCP 是传输控制协议（Transmission Control Protocol）的缩写，用于在计算机之间可靠地传输数据。在建立 TCP 连接时，需要进行三次握手，即客户端发送 SYN 报文，服务器返回 SYN-ACK 报文，客户端再发送 ACK 报文，从而建立连接。这个过程的目的是确保双方都能够接收和发送数据，以保证数据传输的可靠性和完整性。</p><p>具体来说，TCP 连接的三次握手过程如下：</p><ol><li>客户端发送 SYN 报文：客户端向服务器发送 SYN（同步）报文，请求建立连接，并选择一个随机的初始序列号（sequence number）。</li><li>服务器返回 SYN-ACK 报文：服务器收到客户端的 SYN 报文后，向客户端发送 SYN-ACK（同步-确认）报文，表示已收到客户端的请求，并确认客户端的初始序列号。服务器同时也选择一个随机的初始序列号。</li><li>客户端发送 ACK 报文：客户端收到服务器的 SYN-ACK 报文后，向服务器发送 ACK（确认）报文，确认收到了服务器的确认，并发送自己的初始序列号。此时，TCP 连接已建立。</li></ol><p>以下是 TCP 连接三次握手的 Mermaid 代码和图示：</p><pre class="mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: SYN(同步报文)    Server->>Client: SYN-ACK(同步-确认报文)    Client->>Server: ACK(确认报文)</pre><h3 id="基于TCP的HTTP"><a href="#基于TCP的HTTP" class="headerlink" title="基于TCP的HTTP"></a>基于TCP的HTTP</h3><a id="more"></a><p>HTTP 是超文本传输协议（Hypertext Transfer Protocol）的缩写，用于在 Web 上传输数据。HTTP 建立在 TCP 上，因此 HTTP 的建立过程需要先建立 TCP 连接。因此，HTTP 连接的建立过程包含了 TCP 连接的三次握手过程。</p><p>在 HTTP&#x2F;1.1 中，每个连接只能处理一个请求和响应，也就是说，在处理完一个请求和响应后，连接会立即关闭。因此，在 HTTP&#x2F;1.1 中，每个连接都需要进行一次完整的三次握手和四次挥手。HTTP&#x2F;2 引入了多路复用机制，可以在一个连接上同时处理多个请求和响应，从而减少了建立和关闭连接的开销。</p><p>以下是 HTTP 连接建立过程的 Mermaid 代码和图示：</p><pre class="mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: SYN    Server->>Client: SYN-ACK    Client->>Server: ACK    Client->>Server: HTTP Request    Server->>Client: HTTP Response    Client->>Server: FIN    Server->>Client: ACK    Server->>Client: FIN    Client->>Server: ACK</pre><h3 id="TCP四次挥手关闭连接"><a href="#TCP四次挥手关闭连接" class="headerlink" title="TCP四次挥手关闭连接"></a>TCP四次挥手关闭连接</h3><p>TCP 连接的四次挥手（Four-way handshake）用于关闭已建立的 TCP 连接，以确保数据的可靠传输。四次挥手的过程如下：</p><ol><li>客户端发送 FIN 报文：客户端请求关闭连接，向服务器发送 FIN（结束）报文。</li><li>服务器返回 ACK 报文：服务器收到客户端的 FIN 报文后，向客户端发送 ACK（确认）报文，表示已收到关闭请求。</li><li>服务器发送 FIN 报文：服务器确认可以关闭连接后，向客户端发送 FIN 报文，请求关闭连接。</li><li>客户端返回 ACK 报文：客户端收到服务器的 FIN 报文后，向服务器发送 ACK 报文，表示已收到服务器的关闭请求，并确认可以关闭连接。此时，TCP 连接关闭。</li></ol><p>以下是 TCP 连接四次挥手的 Mermaid 代码和图示：</p><pre class="mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: FIN    Server->>Client: ACK    Server->>Client: FIN    Client->>Server: ACK</pre><h3 id="HTTP协议版本"><a href="#HTTP协议版本" class="headerlink" title="HTTP协议版本"></a>HTTP协议版本</h3><p><strong>HTTP&#x2F;1.1</strong> 和 <strong>HTTP&#x2F;2</strong> 都是应用层协议，用于在 Web 上传输数据。它们的主要区别在于传输数据的方式和性能方面。</p><h4 id="HTTP-x2F-1-1-和-HTTP-x2F-2-的区别"><a href="#HTTP-x2F-1-1-和-HTTP-x2F-2-的区别" class="headerlink" title="HTTP&#x2F;1.1 和 HTTP&#x2F;2 的区别"></a><strong>HTTP&#x2F;1.1</strong> 和 <strong>HTTP&#x2F;2</strong> 的区别</h4><table><thead><tr><th>特性</th><th>HTTP&#x2F;1.1</th><th>HTTP&#x2F;2</th></tr></thead><tbody><tr><td>多路复用</td><td>不支持</td><td>支持</td></tr><tr><td>二进制分帧</td><td>不支持</td><td>支持</td></tr><tr><td>首部压缩</td><td>不支持</td><td>支持</td></tr><tr><td>服务器推送</td><td>不支持</td><td>支持</td></tr><tr><td>安全性</td><td>需要 TLS&#x2F;SSL</td><td>需要 TLS&#x2F;SSL</td></tr><tr><td>建立连接</td><td>需要三次握手</td><td>需要TLS&#x2F;SSL的加密握手</td></tr><tr><td>请求优先级</td><td>不支持</td><td>支持</td></tr><tr><td>语义</td><td>每个请求都需要一个新的 TCP 连接</td><td>多个请求可以共享一个 TCP 连接</td></tr><tr><td>性能</td><td>每个请求都需要一个新的 TCP 连接，带来了较高的延迟和消耗</td><td>可以在同一个连接中同时处理多个请求，降低了延迟和消耗</td></tr></tbody></table><p><strong>HTTP&#x2F;1.1</strong> 是顺序传输的，每个请求和响应都需要建立一个 TCP 连接，而且每个连接只能处理一个请求和响应。因此，每个请求和响应都需要经过完整的 HTTP&#x2F;1.1 的三次握手和四次挥手的过程。这样的方式导致了以下问题：</p><ul><li>每次连接的建立和关闭都需要时间，增加了网络延迟。</li><li>每个连接都需要消耗服务器和客户端的资源，限制了并发请求的数量。</li><li>每个请求都需要发送一些重复的数据，例如请求头，增加了数据传输的开销。</li></ul><p><strong>HTTP&#x2F;2</strong> 引入了多路复用机制，可以在一个连接上同时处理多个请求和响应。HTTP&#x2F;2 使用二进制协议，将请求和响应的数据划分为多个帧，每个帧都有一个独立的 ID，可以根据 ID 重新组装数据。这种方式的好处包括：</p><ul><li>可以复用连接，减少建立和关闭连接的开销。</li><li>可以在一个连接上同时处理多个请求和响应，提高并发性能。</li><li>可以发送多个请求和响应的数据帧，减少了数据传输的开销。</li></ul><h4 id="HTTP-x2F-1-1和HTTP-x2F-2建立连接流程图"><a href="#HTTP-x2F-1-1和HTTP-x2F-2建立连接流程图" class="headerlink" title="HTTP&#x2F;1.1和HTTP&#x2F;2建立连接流程图"></a>HTTP&#x2F;1.1和HTTP&#x2F;2建立连接流程图</h4><p>下面是使用 Mermaid 绘制的 HTTP&#x2F;1.1 从建立 TCP 连接到关闭 TCP 连接的流程图：</p><pre class="mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: SYN    Server->>Client: SYN-ACK    Client->>Server: ACK    Client->>Server: HTTP Request    Server->>Client: HTTP Response    Client->>Server: FIN    Server->>Client: ACK    Server->>Client: FIN    Client->>Server: ACK</pre><p>HTTP&#x2F;1.1 的流程图可以分为三个主要阶段：建立连接、发送请求和关闭连接。在建立连接阶段，客户端向服务器发送一个 SYN 报文，服务器收到后会回复一个 SYN-ACK 报文，客户端再回复一个 ACK 报文，建立起 TCP 连接。在发送请求阶段，客户端向服务器发送一个 HTTP 请求报文，服务器收到后会回复一个 HTTP 响应报文。在关闭连接阶段，客户端发送一个 FIN 报文表示不再发送数据，服务器回复一个 ACK 报文确认，然后服务器也发送一个 FIN 报文表示不再发送数据，客户端再回复一个 ACK 报文确认。这样连接就被完全关闭了。</p><p>下面是使用 Mermaid 绘制的 HTTP&#x2F;2 的流程图：</p><pre class="mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: ClientHello    Server->>Client: ServerHello    Client->>Server: Settings    Server->>Client: Settings    Client->>Server: Request 1    Client->>Server: Request 2    Server->>Client: Response 1    Server->>Client: Response 2</pre><p>HTTP&#x2F;2 的流程图也可以分为三个主要阶段：建立连接、发送请求和关闭连接。但是 HTTP&#x2F;2 的建立连接阶段和 HTTP&#x2F;1.1 不同，需要进行 TLS&#x2F;SSL 加密握手，建立安全的连接。在发送请求阶段，客户端可以同时发送多个请求，在同一个连接中进行多路复用。在接收请求阶段，服务器可以同时发送多个响应，在同一个连接中进行多路复用。在关闭连接阶段，客户端和服务器都可以发送一个 GOAWAY 帧来关闭连接。</p><p>以下是 HTTP&#x2F;2 的建立连接阶段的流程图，使用 Mermaid 语法：</p><pre class="mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: ClientHello    Server->>Client: ServerHello, Certificate, ServerHelloDone    Client->>Server: ClientKeyExchange, ChangeCipherSpec, Finished    Server->>Client: ChangeCipherSpec, Finished</pre><p>解释如下：</p><ul><li>首先，客户端向服务器发送 <code>ClientHello</code> 报文，其中包含客户端支持的协议版本、加密套件、压缩算法等信息。</li><li>服务器收到 <code>ClientHello</code> 报文后，会回复一个 <code>ServerHello</code> 报文，其中包含协商好的协议版本、加密套件、压缩算法等信息，以及服务器的数字证书和一个 <code>ServerHelloDone</code> 报文。</li><li>客户端收到 <code>ServerHello</code> 报文后，会向服务器发送 <code>ClientKeyExchange</code> 报文，该报文中包含一个随机数、加密协议中使用的密钥等信息。接着，客户端会发送一个 <code>ChangeCipherSpec</code> 报文，告诉服务器接下来的通信会使用协商好的密钥。最后，客户端发送一个 <code>Finished</code> 报文，其中包含用于校验通信数据完整性的摘要值。</li><li>服务器收到 <code>ClientKeyExchange</code> 报文后，会根据其中的信息生成一个会话密钥，并使用该密钥对 <code>ChangeCipherSpec</code> 报文进行加密。服务器也会发送一个 <code>ChangeCipherSpec</code> 报文告诉客户端接下来的通信会使用协商好的密钥。接着，服务器会发送一个 <code>Finished</code> 报文，其中包含用于校验通信数据完整性的摘要值。</li></ul><p>这样，客户端和服务器就成功建立了安全的连接，并开始进行数据传输。</p><p>所以，若有以下问题：</p><p>问：HTTP&#x2F;2 的建立连接阶段需要几次连接？</p><p>答：HTTP&#x2F;2 的建立连接阶段需要一次 TCP 连接，类似于 HTTP&#x2F;1.1，但是在建立 TCP 连接后，HTTP&#x2F;2 会使用一些新的协议和技术来优化数据传输，从而提高性能和安全性。具体而言，HTTP&#x2F;2 采用了二进制协议，引入了多路复用、帧、流等概念，可以更高效地利用一个 TCP 连接来传输多个请求和响应，而不是像 HTTP&#x2F;1.1 那样每个请求都需要建立一个 TCP 连接。因此，HTTP&#x2F;2 可以减少网络延迟和资源占用，提高页面加载速度和用户体验。</p><p>问：HTTP&#x2F;2请求需要几次 TCP 连接？</p><p>答：在 <strong>HTTP&#x2F;2 中，一个客户端和一个服务器之间只需要建立一次 TCP 连接，即可进行多个请求和响应的交互</strong>。这是因为 HTTP&#x2F;2 引入了多路复用技术，通过在一个 TCP 连接上同时进行多个流（stream）的请求和响应，从而避免了 HTTP&#x2F;1.1 中一个请求需要建立一个 TCP 连接的缺点，提高了网络性能和资源利用率。同时，HTTP&#x2F;2 还支持服务器推送（server push）等新特性，使得客户端可以在不发送请求的情况下接收服务器主动推送的资源，进一步提高了性能。</p><h2 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h2><p>HTTPS（Hypertext Transfer Protocol Secure）是在 HTTP 协议基础上加入 SSL&#x2F;TLS 安全层的加密协议，通过使用 SSL&#x2F;TLS 加密和认证机制，确保客户端和服务器之间的通信安全。HTTPS 的建立连接流程可以概括为以下几个步骤：</p><ol><li><p><strong>客户端发起 HTTPS 请求</strong>：客户端通过 URL 或者地址栏输入请求地址，并选择 HTTPS 协议。</p></li><li><p><strong>服务端返回证书</strong>：服务端接收到客户端请求后，会将自己的 SSL&#x2F;TLS 证书返回给客户端。证书中包含了服务器的公钥、证书颁发机构的信息和证书有效期等信息。</p></li><li><p><strong>客户端验证证书</strong>：客户端收到服务端的证书后，会验证证书的合法性。首先会检查证书是否过期，然后会查看证书颁发机构是否可信。如果证书未过期且颁发机构可信，则客户端会<strong>使用证书中的公钥加密</strong>一个随机数，并将加密后的随机数发送给服务端。</p></li><li><p><strong>服务端解密随机数</strong>：服务端接收到客户端发送的加密随机数后，会<strong>使用自己的私钥进行解密</strong>，得到客户端发来的随机数。</p></li><li><p><strong>客户端和服务端协商加密算法和密钥</strong>：客户端和服务端使用这个随机数作为对称加密算法中的密钥，对后续的通信进行加密。在这一步中，客户端和服务端会协商使用哪种加密算法和密钥长度，以及其他一些安全相关的参数。常用的加密算法有 AES、RC4、3DES 等。</p></li><li><p><strong>客户端发送加密请求</strong>：客户端使用协商好的加密算法和密钥，对请求进行加密，并发送给服务端。</p></li><li><p><strong>服务端解密请求</strong>：服务端接收到客户端发送的加密请求后，会使用协商好的密钥和加密算法进行解密，得到客户端发送的原始请求数据。</p></li><li><p><strong>服务端加密响应</strong>：服务端使用协商好的加密算法和密钥，对响应进行加密，并发送给客户端。</p></li><li><p><strong>客户端解密响应</strong>：客户端接收到服务端发送的加密响应后，会使用协商好的密钥和加密算法进行解密，得到服务端发送的原始响应数据。</p></li></ol><p>在上述过程中，SSL&#x2F;TLS 扮演了重要的角色，保证了通信过程的安全。具体而言，<strong>SSL&#x2F;TLS 通过使用非对称加密算法和数字证书来验证服务器的身份，保证通信双方的身份真实可信</strong>；<em>通过使用对称加密算法来加密请求和响应数据，防止中间攻击者截取和篡改数据</em>。下面是具体的过程：</p><ol><li><p>首先，客户端向服务器发送一个加密套件列表，该列表包含客户端支持的加密算法和协议版本等信息。</p></li><li><p>服务器从加密套件列表中选择一个加密套件，并向客户端返回服务器的数字证书和一些其他的信息，比如服务器支持的协议版本等。数字证书包含了服务器的公钥，以及一些其他的信息，比如服务器的域名等。</p></li><li><p>客户端收到服务器返回的数字证书后，首先要验证该数字证书的合法性。具体来说，客户端会检查证书的签名是否合法，证书中的信息是否与服务器提供的其他信息一致，证书是否已过期等。如果数字证书合法，那么客户端会提取其中的公钥。</p></li><li><p>接下来，客户端生成一个随机数（称为 Pre-Master Secret），并使用服务器的公钥将其加密，然后将加密后的 Pre-Master Secret 发送给服务器。</p></li><li><p>服务器收到客户端发送的加密后的 Pre-Master Secret 后，<strong>使用自己的私钥将其解密</strong>，得到 Pre-Master Secret。接着，服务器和客户端会分别根据一些预定的规则，使用 Pre-Master Secret 和之前的一些信息，生成出用于加密和解密数据的对称密钥。</p></li><li><p>客户端和服务器双方现在都有了用于加密和解密数据的对称密钥，通信双方将使用这个对称密钥来加密和解密请求和响应数据。</p></li></ol><p>通过上述过程，SSL&#x2F;TLS 建立了一个安全的通信渠道，确保了通信过程中数据的隐私性和完整性。中间攻击者即使能够截获通信过程中的数据，也由于<strong>缺乏合法的数字证书</strong>和<strong>私钥无法解密和篡改数据</strong>，从而保证了通信的安全。</p><p>下面是 HTTPS 的建立连接和数据传输阶段的流程图：</p><pre class="mermaid">sequenceDiagram    participant Client    participant Server    Client->>Server: 发送 Client Hello，包含加密套件列表和随机数    Server->>Client: 返回 Server Hello，选择加密套件，发送数字证书和随机数    Client->>Client: 验证数字证书，生成 Pre-Master Secret    Client->>Server: 发送加密的 Pre-Master Secret    Server->>Server: 解密 Pre-Master Secret，生成对称密钥    Server->>Client: 发送加密的连接建立完成消息    Client->>Client: 解密连接建立完成消息    Client->>Server: 发送加密的 HTTP 请求    Server->>Server: 解密 HTTP 请求    Server->>Server: 处理请求，发送加密的 HTTP 响应    Server->>Client: 发送加密的 HTTP 响应    Client->>Client: 解密 HTTP 响应</pre><p>其中，Client 和 Server 分别代表客户端和服务器，在流程图中表示为两个连续的竖直线。流程图中包含两个部分，第一部分为 HTTPS 建立连接阶段，第二部分为 HTTPS 数据传输阶段。在建立连接阶段，客户端和服务器之间交换加密套件列表、数字证书、随机数等信息，最终生成用于加密和解密数据的对称密钥。在数据传输阶段，客户端和服务器使用该对称密钥来加密和解密 HTTP 请求和响应数据。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TCP和HTTP握手&quot;&gt;&lt;a href=&quot;#TCP和HTTP握手&quot; class=&quot;headerlink&quot; title=&quot;TCP和HTTP握手&quot;&gt;&lt;/a&gt;TCP和HTTP握手&lt;/h2&gt;&lt;h3 id=&quot;TCP三次握手建立连接&quot;&gt;&lt;a href=&quot;#TCP三次握手建立连接&quot; class=&quot;headerlink&quot; title=&quot;TCP三次握手建立连接&quot;&gt;&lt;/a&gt;TCP三次握手建立连接&lt;/h3&gt;&lt;p&gt;TCP 是传输控制协议（Transmission Control Protocol）的缩写，用于在计算机之间可靠地传输数据。在建立 TCP 连接时，需要进行三次握手，即客户端发送 SYN 报文，服务器返回 SYN-ACK 报文，客户端再发送 ACK 报文，从而建立连接。这个过程的目的是确保双方都能够接收和发送数据，以保证数据传输的可靠性和完整性。&lt;/p&gt;
&lt;p&gt;具体来说，TCP 连接的三次握手过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送 SYN 报文：客户端向服务器发送 SYN（同步）报文，请求建立连接，并选择一个随机的初始序列号（sequence number）。&lt;/li&gt;
&lt;li&gt;服务器返回 SYN-ACK 报文：服务器收到客户端的 SYN 报文后，向客户端发送 SYN-ACK（同步-确认）报文，表示已收到客户端的请求，并确认客户端的初始序列号。服务器同时也选择一个随机的初始序列号。&lt;/li&gt;
&lt;li&gt;客户端发送 ACK 报文：客户端收到服务器的 SYN-ACK 报文后，向服务器发送 ACK（确认）报文，确认收到了服务器的确认，并发送自己的初始序列号。此时，TCP 连接已建立。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是 TCP 连接三次握手的 Mermaid 代码和图示：&lt;/p&gt;
&lt;pre class=&quot;mermaid&quot;&gt;sequenceDiagram
    participant Client
    participant Server
    Client-&gt;&gt;Server: SYN(同步报文)
    Server-&gt;&gt;Client: SYN-ACK(同步-确认报文)
    Client-&gt;&gt;Server: ACK(确认报文)&lt;/pre&gt;

&lt;h3 id=&quot;基于TCP的HTTP&quot;&gt;&lt;a href=&quot;#基于TCP的HTTP&quot; class=&quot;headerlink&quot; title=&quot;基于TCP的HTTP&quot;&gt;&lt;/a&gt;基于TCP的HTTP&lt;/h3&gt;</summary>
    
    
    
    
    <category term="TCP" scheme="https://xiaoyan94.github.io/tags/TCP/"/>
    
    <category term="HTTP" scheme="https://xiaoyan94.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot项目相关知识点</title>
    <link href="https://xiaoyan94.github.io/2021/02/09/SpringBoot%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://xiaoyan94.github.io/2021/02/09/SpringBoot%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-02-09T06:22:09.000Z</published>
    <updated>2023-02-25T00:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring与SpringBoot"><a href="#Spring与SpringBoot" class="headerlink" title="Spring与SpringBoot"></a>Spring与SpringBoot</h2><p>Spring框架，它的主要功能包括IoC容器、AOP支持、事务支持、MVC开发以及强大的第三方集成功能等。</p><p>那么，Spring Boot又是什么？<strong>它和Spring是什么关系</strong>？</p><p><a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>是一个基于Spring的套件，它帮我们预组装了Spring的一系列组件，以便以尽可能少的代码和配置来开发基于Spring的Java应用程序。</p><a id="more"></a><ul><li><a href="#spring%E4%B8%8Espringboot">Spring与SpringBoot</a></li><li><a href="#springboot%E9%85%8D%E7%BD%AE">springboot配置</a><ul><li><a href="#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F">配置文件格式</a></li><li><a href="#%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%92%8C%E8%87%AA%E5%8A%A8%E6%89%AB%E6%8F%8F">自动配置和自动扫描</a></li><li><a href="#springboot%E8%87%AA%E5%8A%A8%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD">springboot自动重新加载</a><ul><li><a href="#%E8%A7%A3%E5%86%B3idea%E4%B8%AD%E8%87%AA%E5%8A%A8%E9%87%8D%E5%90%AF%E4%B8%8D%E7%94%9F%E6%95%88">解决idea中自动重启不生效</a></li></ul></li><li><a href="#%E6%89%93%E5%8C%85springboot%E5%BA%94%E7%94%A8">打包springboot应用</a><ul><li><a href="#%E6%89%93jar%E5%8C%85%E5%92%8C%E8%BF%90%E8%A1%8Cjar%E5%8C%85">打jar包和运行jar包</a></li><li><a href="#%E6%89%93%E5%8C%85%E6%97%B6%E6%8E%92%E9%99%A4%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7">打包时排除开发者工具</a></li><li><a href="#%E6%8C%87%E5%AE%9A%E6%89%93%E5%8C%85%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0">指定打包文件名称</a></li></ul></li><li><a href="#%E7%98%A6%E8%BA%AB%E6%89%93%E5%8C%85%E5%BA%94%E7%94%A8%E5%87%8F%E5%B0%8Fjar%E5%8C%85%E4%BD%93%E7%A7%AF"><strong>瘦身打包</strong>应用减小jar包体积</a><ul><li><a href="#%E6%89%93%E5%8C%85%E5%90%8E%E4%BD%93%E7%A7%AF%E8%BF%87%E5%A4%A7%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0">打包后体积过大问题原因</a></li><li><a href="#%E7%98%A6%E8%BA%AB%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE"><strong>瘦身打包配置</strong></a></li><li><a href="#%E7%98%A6%E8%BA%AB%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6%E5%8E%9F%E7%90%86">瘦身打包插件原理</a><ul><li><a href="#%E7%98%A6%E8%BA%AB%E6%89%93%E5%8C%85%E9%A2%84%E7%83%AD">瘦身打包——预热</a></li></ul></li></ul></li><li><a href="#%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">使用环境变量</a></li><li><a href="#%E4%BD%BF%E7%94%A8profiles%E8%BF%9B%E8%A1%8C%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE">使用profiles进行不同环境的配置</a><ul><li><a href="#%E4%BD%BF%E7%94%A8profiles%E8%BF%9B%E8%A1%8C%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D">使用profiles进行条件装配</a></li></ul></li><li><a href="#%E4%BD%BF%E7%94%A8conditional%E8%BF%9B%E8%A1%8C%E6%9D%A1%E4%BB%B6%E8%A3%85%E9%85%8D">使用conditional进行条件装配</a></li><li><a href="#%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E5%88%B0bean%E4%B8%AD">加载配置到bean中</a></li></ul></li></ul><p>本文Spring Boot版本是3.x版，如果使用Spring Boot 2.x则需注意，两者有以下不同：</p><table><thead><tr><th></th><th>Spring Boot 2.x</th><th>Spring Boot 3.x</th></tr></thead><tbody><tr><td>Spring版本</td><td>Spring 5.x</td><td>Spring 6.x</td></tr><tr><td>JDK版本</td><td>&gt;&#x3D; 1.8</td><td>&gt;&#x3D; 17</td></tr><tr><td>Tomcat版本</td><td>9.x</td><td>10.x</td></tr><tr><td>Annotation包</td><td>javax.annotation</td><td>jakarta.annotation</td></tr><tr><td>Servlet包</td><td>javax.servlet</td><td>jakarta.servlet</td></tr><tr><td>JMS包</td><td>javax.jms</td><td>jakarta.jms</td></tr><tr><td>JavaMail包</td><td>javax.mail</td><td>jakarta.mail</td></tr></tbody></table><h2 id="springboot配置"><a href="#springboot配置" class="headerlink" title="springboot配置"></a>springboot配置</h2><h3 id="配置文件格式"><a href="#配置文件格式" class="headerlink" title="配置文件格式"></a>配置文件格式</h3><p><code>application.properties</code>作为默认配置文件。也可以使用YAML格式，将前者删除，再新建<code>application.yml</code>文件即可，SpringBoot 会自动识别和读取该配置文件。</p><h3 id="自动配置和自动扫描"><a href="#自动配置和自动扫描" class="headerlink" title="自动配置和自动扫描"></a>自动配置和自动扫描</h3><p>Spring Boot是一个基于Spring提供了开箱即用的一组套件，它可以让我们基于很少的配置和代码快速搭建出一个完整的应用程序。</p><p>Spring Boot有非常强大的<code>AutoConfiguration</code>功能，它是通过<strong>自动扫描+条件装配</strong>实现的。</p><p>启动Spring Boot应用程序只需要一行代码加上一个注解<code>@SpringBootApplication</code>，这样一个注解就相当于启动了<strong>自动配置和自动扫描</strong>。</p><h3 id="springboot自动重新加载"><a href="#springboot自动重新加载" class="headerlink" title="springboot自动重新加载"></a>springboot自动重新加载</h3><p>只需添加如下依赖到<code>pom.xml</code>：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>直接启动应用程序，然后试着修改源码，保存，观察日志输出，Spring Boot会自动重新加载。</p><p>默认配置下，针对<code>/static</code>、<code>/public</code>和<code>/templates</code>目录中的文件修改，不会自动重启，因为禁用缓存后，这些文件的修改可以实时更新。</p><p>经常要修改代码，然后重启Spring Boot应用。经常手动停止再启动，比较麻烦。</p><p>Spring Boot 提供的 <code>devtools</code> 可以监控 classpath 路径上的文件。只要源码或配置文件发生修改，Spring Boot 应用可以自动重启。在开发阶段，这个功能比较有用。</p><h4 id="解决idea中自动重启不生效"><a href="#解决idea中自动重启不生效" class="headerlink" title="解决idea中自动重启不生效"></a>解决idea中自动重启不生效</h4><p>修改了类文件后，idea不会自动编译，得修改idea设置。需要两步操作：</p><ol><li>打开 Idea 的<code>偏好设置——构建、执行、部署——编译器</code>，勾选<code>自动构建项目</code></li><li>打开 Idea 的<code>运行——编辑配置——（构建并运行）修改选项——Spring Boot——执行“更新”操作时</code>，选择<code>更新类和资源</code></li></ol><p>以上在IntelliJ IDEA 2022.3.2中测试ok。</p><h3 id="打包springboot应用"><a href="#打包springboot应用" class="headerlink" title="打包springboot应用"></a>打包springboot应用</h3><p>Spring Boot提供了一个Maven插件用于打包所有依赖到单一jar文件，此插件十分易用，无需配置。</p><h4 id="打jar包和运行jar包"><a href="#打jar包和运行jar包" class="headerlink" title="打jar包和运行jar包"></a>打jar包和运行jar包</h4><p>在Spring Boot应用中，打包更加简单，因为Spring Boot自带一个更简单的<code>spring-boot-maven-plugin</code>插件用来打包，我们只需要在<code>pom.xml</code>中加入以下配置：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>无需任何配置，Spring Boot的这款插件会自动定位应用程序的入口Class，执行以下Maven命令即可打包：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure></div><p>使用<code>java -jar</code>命令即可运行。</p><h4 id="打包时排除开发者工具"><a href="#打包时排除开发者工具" class="headerlink" title="打包时排除开发者工具"></a>打包时排除开发者工具</h4><p>使用早期的Spring Boot版本时，需要配置一下才能排除<code>spring-boot-devtools</code>这个依赖：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeDevtools</span>&gt;</span>true<span class="tag">&lt;/<span class="name">excludeDevtools</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h4 id="指定打包文件名称"><a href="#指定打包文件名称" class="headerlink" title="指定打包文件名称"></a>指定打包文件名称</h4><p>如果不喜欢默认的项目名+版本号作为文件名，可以加一个配置指定文件名：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>awesome-app<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>这样打包后的文件名就是<code>awesome-app.jar</code>。</p><h3 id="瘦身打包应用减小jar包体积"><a href="#瘦身打包应用减小jar包体积" class="headerlink" title="瘦身打包应用减小jar包体积"></a><strong>瘦身打包</strong>应用减小jar包体积</h3><h4 id="打包后体积过大问题原因"><a href="#打包后体积过大问题原因" class="headerlink" title="打包后体积过大问题原因"></a>打包后体积过大问题原因</h4><p>使用Spring Boot提供的<code>spring-boot-maven-plugin</code>打包Spring Boot应用，可以直接获得一个完整的可运行的jar包，把它上传到服务器上再运行就极其方便。</p><p>但是这种方式也不是没有缺点。最大的缺点就是包太大了，动不动几十MB，在网速不给力的情况下，上传服务器非常耗时。并且，其中我们引用到的Tomcat、Spring和其他第三方组件，只要版本号不变，这些jar就相当于每次都重复打进去，再重复上传了一遍。</p><p>真正经常改动的代码其实是我们自己编写的代码。如果只打包我们自己编写的代码，通常jar包也就几百KB。但是，运行的时候，classpath中没有依赖的jar包，肯定会报错。</p><p>所以问题来了：如何只打包我们自己编写的代码，同时又自动把依赖包下载到某处，并自动引入到classpath中。解决方案就是使用<code>spring-boot-thin-launcher</code>。</p><h4 id="瘦身打包配置"><a href="#瘦身打包配置" class="headerlink" title="瘦身打包配置"></a><strong>瘦身打包配置</strong></h4><p>给原来的<code>spring-boot-maven-plugin</code>增加一个<code>&lt;dependency&gt;</code>：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludeDevtools</span>&gt;</span>true<span class="tag">&lt;/<span class="name">excludeDevtools</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot.experimental<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-thin-layout<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--瘦身插件:版本应该是和org.springframework.boot版本有关系,版本不匹配会运行报错--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.28.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--java -Dthin.root=. -jar target/springboot-hello-1.0-SNAPSHOT.jar--&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--java -Dthin.dryrun=true -Dthin.root=. -jar</span></span><br><span class="line"><span class="comment">           target/springboot-hello-1.0-SNAPSHOT.jar--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><strong>注意版本问题</strong>：</p><ul><li>SpringBoot版本：<code>3.0.2</code></li><li>spring-boot-thin-layout版本：<code>1.0.28.RELEASE</code></li></ul><p>打包命令：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package </span><br><span class="line">ll target # 查看打包输出</span><br></pre></td></tr></table></figure></div><h4 id="瘦身打包插件原理"><a href="#瘦身打包插件原理" class="headerlink" title="瘦身打包插件原理"></a>瘦身打包插件原理</h4><p>利用<code>spring-boot-thin-launcher</code>可以给Spring Boot应用瘦身。其原理是<strong>记录app依赖的jar包，在首次运行时先下载依赖项并缓存到本地</strong>。</p><p>实际上<code>spring-boot-thin-launcher</code>这个插件改变了<code>spring-boot-maven-plugin</code>的默认行为。它输出的jar包只包含我们自己代码编译后的class，一个很小的<code>ThinJarWrapper</code>，以及解析<code>pom.xml</code>后得到的所有依赖jar的列表。</p><p>运行的时候，入口实际上是<code>ThinJarWrapper</code>，它会先在指定目录搜索看看依赖的jar包是否都存在，如果不存在，先从Maven中央仓库下载到本地，然后，再执行我们自己编写的<code>main()</code>入口方法。这种方式有点类似很多在线安装程序：用户下载后得到的是一个很小的exe安装程序，执行安装程序时，会首先在线下载所需的若干巨大的文件，再进行真正的安装。</p><p>这个<code>spring-boot-thin-launcher</code>在启动时搜索的默认目录是用户主目录的<code>.m2</code>，我们也可以指定下载目录，例如，将下载目录指定为当前目录：</p><p>运行命令：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dthin.root=. -jar awesome-app.jar</span><br></pre></td></tr></table></figure></div><p>上述命令通过环境变量<code>thin.root</code>传入当前目录，执行后发现当前目录下自动生成了一个<code>repository</code>目录，这和Maven的默认下载目录<code>~/.m2/repository</code>的结构是完全一样的，只是它仅包含<code>awesome-app.jar</code>所需的运行期依赖项。</p><p>注意：只有首次运行时会自动下载依赖项，再次运行时由于无需下载，所以启动速度会大大加快。如果删除了repository目录，再次运行时就会再次触发下载。</p><h5 id="瘦身打包——预热"><a href="#瘦身打包——预热" class="headerlink" title="瘦身打包——预热"></a>瘦身打包——预热</h5><p>把79KB大小的<code>awesome-app.jar</code>直接扔到服务器执行，上传过程就非常快。但是，第一次在服务器上运行<code>awesome-app.jar</code>时，仍需要从Maven中央仓库下载大量的jar包，所以，<code>spring-boot-thin-launcher</code>还提供了一个<code>dryrun</code>选项，专门用来下载依赖项而不执行实际代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dthin.dryrun=true -Dthin.root=. -jar awesome-app.jar</span><br></pre></td></tr></table></figure></div><p><em><strong>如果执行报错，可能是版本的原因，换个版本试试</strong></em>。</p><p>执行上述代码会在当前目录创建<code>repository</code>目录，并下载所有依赖项，但并不会运行我们编写的<code>main()</code>方法。此过程称之为“预热”（warm up）。</p><p>如果服务器由于安全限制不允许从外网下载文件，那么可以在本地预热，然后把<code>awesome-app.jar</code>和<code>repository</code>目录上传到服务器。只要依赖项没有变化，后续改动只需要上传<code>awesome-app.jar</code>即可。</p><h3 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h3><p>在配置文件中，我们经常使用如下的格式对某个key进行配置：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: $&#123;APP_PORT:18081&#125;</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: $&#123;APP_NAME:unnamed&#125;</span><br></pre></td></tr></table></figure></div><p>这种<code>${APP_PORT:18081}</code>意思是，首先从环境变量查找<code>APP_PORT</code>，如果环境变量定义了，那么使用环境变量的值，否则，使用默认值<code>18081</code>。</p><p>这使得我们在开发和部署时更加方便，因为开发时无需设定任何环境变量，直接使用默认值即本地数据库，而实际线上运行的时候，只需要传入环境变量即可：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APP_PORT=801 java -Dthin.dryrun=false -Dthin.root=. -jar target/springboot-hello-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></div><h3 id="使用profiles进行不同环境的配置"><a href="#使用profiles进行不同环境的配置" class="headerlink" title="使用profiles进行不同环境的配置"></a>使用profiles进行不同环境的配置</h3><ul><li>通过Profile可以实现一套代码在不同环境启用不同的配置和功能。</li><li>Spring Boot允许在一个配置文件中针对不同Profile进行配置；</li><li>Spring Boot在未指定Profile时默认为default。</li></ul><p>Profile本身是Spring提供的功能，Profile表示一个环境的概念，如开发、测试和生产这3个环境：</p><ul><li>native</li><li>test</li><li>production</li></ul><p>或者按git分支定义master、dev这些环境：</p><ul><li>master</li><li>dev</li></ul><p>在启动一个Spring应用程序的时候，可以传入一个或多个环境，例如：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspring.profiles.active=test,master</span><br></pre></td></tr></table></figure></div><p>Spring Boot对Profiles的支持在于，可以在application.yml中为每个环境进行配置。下面是一个示例配置：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;APP_PORT:18081&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;APP_NAME:unnamed&#125;</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:hsqldb:file:testdb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">sa</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.hsqldb.jdbc.JDBCDriver</span></span><br><span class="line">    <span class="comment"># HikariCP配置:</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">validation-timeout:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pebble:</span></span><br><span class="line">  <span class="attr">suffix:</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  Spring Boot对Profiles的支持在于，可以在application.yml中为每个环境进行配置。下面是一个示例配置：</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">test,debug</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">info,</span> <span class="string">health,</span> <span class="string">beans,</span> <span class="string">env,</span> <span class="string">metrics</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;APP_PORT:8000&#125;</span></span><br><span class="line">  <span class="comment"># 使用环境变量: APP_PORT=801 java -Dthin.dryrun=false -Dthin.root=. -Dspring.profiles.active=test -jar target/springboot-hello-1.0-SNAPSHOT.jar</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">production</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pebble:</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#  注意到分隔符---，最前面的配置是默认配置，不需要指定Profile，后面的每段配置都必须以spring.config.activate.on-profile.profiles: xxx开头，表示一个Profile。</span></span><br><span class="line"><span class="comment">#  上述配置默认使用的前面配置的端口，但是在test环境下，使用8000端口，在production环境下，使用80端口，并且启用Pebble的缓存。</span></span><br><span class="line"><span class="comment">#  如果不指定任何Profile，直接启动应用程序，那么Profile实际上就是default，可以从Spring Boot启动日志看</span></span><br><span class="line"><span class="comment">#  可以使用条件装配 @Profile("default") @Profile("test") @Profile("production")实现不同环境下使用不同的bean</span></span><br></pre></td></tr></table></figure></div><p>指定了<code>-Dspring.profiles.active=test</code>，那么Profile实际上就是<code>test</code>，，可以从Spring Boot启动日志看出：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  APP_PORT=801 java -Dthin.dryrun=false -Dthin.root=. -Dspring.profiles.active=test -jar target/springboot-hello-1.0-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v3.0.2)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2023-02-06T22:44:23.010+08:00  INFO 2452 --- [           main] com.itranswarp.learnjava.Application     : The following 1 profile is active: "test"</span><br><span class="line">...</span><br><span class="line">2023-02-06T22:44:24.419+08:00  INFO 2452 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 801 (http)</span><br><span class="line">...</span><br><span class="line">2023-02-06T22:44:25.837+08:00  INFO 2452 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 801 (http) with context path ''</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><h4 id="使用profiles进行条件装配"><a href="#使用profiles进行条件装配" class="headerlink" title="使用profiles进行条件装配"></a>使用profiles进行条件装配</h4><p>在接口实现类的 Bean 上使用<code>@Profile(&quot;default&quot;)</code>注解，即默认启用该 Bean；在另一个实现类上使用<code>@Profile(&quot;!default&quot;)</code>注解，即非<code>default</code>环境时，启用该 Bean。</p><p>这样，一套代码，就实现了不同环境启用不同的配置。根据<code>Component</code>的不同<code>@Profile</code>注解，决定装配哪个<code>Component</code>的过程就是<strong>条件装配</strong>。</p><h3 id="使用conditional进行条件装配"><a href="#使用conditional进行条件装配" class="headerlink" title="使用conditional进行条件装配"></a>使用conditional进行条件装配</h3><h3 id="加载配置到bean中"><a href="#加载配置到bean中" class="headerlink" title="加载配置到bean中"></a>加载配置到bean中</h3>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Spring与SpringBoot&quot;&gt;&lt;a href=&quot;#Spring与SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;Spring与SpringBoot&quot;&gt;&lt;/a&gt;Spring与SpringBoot&lt;/h2&gt;&lt;p&gt;Spring框架，它的主要功能包括IoC容器、AOP支持、事务支持、MVC开发以及强大的第三方集成功能等。&lt;/p&gt;
&lt;p&gt;那么，Spring Boot又是什么？&lt;strong&gt;它和Spring是什么关系&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot&lt;/a&gt;是一个基于Spring的套件，它帮我们预组装了Spring的一系列组件，以便以尽可能少的代码和配置来开发基于Spring的Java应用程序。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="SpringBoot" scheme="https://xiaoyan94.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>浏览器window对象中的本地存储和会话存储</title>
    <link href="https://xiaoyan94.github.io/2021/01/20/%E6%B5%8F%E8%A7%88%E5%99%A8window%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%92%8C%E4%BC%9A%E8%AF%9D%E5%AD%98%E5%82%A8/"/>
    <id>https://xiaoyan94.github.io/2021/01/20/%E6%B5%8F%E8%A7%88%E5%99%A8window%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%92%8C%E4%BC%9A%E8%AF%9D%E5%AD%98%E5%82%A8/</id>
    <published>2021-01-20T11:00:33.000Z</published>
    <updated>2023-02-25T00:19:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案<br>本地存储特性。</p><ul><li>1 数据存储在用户浏览器中</li><li>2 设置、读取方便、甚至页面刷新不丢失数据</li><li>3 容量较大，sessionStorage约5M、localStorage约20M</li><li>4 只能存储字符串，可以将对象JSON.stringify() 编码后存储</li></ul><h2 id="1-window-sessionStorage"><a href="#1-window-sessionStorage" class="headerlink" title="1 window.sessionStorage"></a>1 window.sessionStorage</h2><p>方法：</p><ul><li>存储数据 ： sessionStorage.setItem(key, value)</li><li>获取数据 ： sessionStorage.getItem(key)</li><li>删除数据 ： sessionStorage.removeItem(key)</li><li>删除所有数据 ： sessionStorage.clear()</li></ul><ol><li>生命周期为关闭浏览器窗口</li><li>在同一个窗口（页面）下数据可以共享</li><li>以键值对的形式存储使用</li></ol><p>例子：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"set"</span>&gt;</span>存储数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"get"</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"remove"</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>清空所有数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(localStorage.getItem(<span class="string">'username'</span>));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ipt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> <span class="keyword">set</span> = document.querySelector(<span class="string">'.set'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> <span class="keyword">get</span> = document.querySelector(<span class="string">'.get'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> remove = <span class="built_in">document</span>.querySelector(<span class="string">'.remove'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> del = <span class="built_in">document</span>.querySelector(<span class="string">'.del'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">set</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 点击之后，可以把表单里面的值存储起来</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> val = ipt.value;</span></span><br><span class="line"><span class="actionscript">    sessionStorage.setItem(<span class="string">'uname'</span>, val);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// sessionStorage.setItem('pwd', val);</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  <span class="keyword">get</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当我们点击了之后，就可以把表单里面的值获取过来</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">'uname'</span>));</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  remove.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    sessionStorage.removeItem(<span class="string">'uname'</span>);</span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="actionscript">  del.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    sessionStorage.clear(); <span class="comment">// 清除所有的</span></span></span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="2-window-localStorage"><a href="#2-window-localStorage" class="headerlink" title="2 window.localStorage"></a>2 window.localStorage</h2><ul><li>存储数据 ： localStorage.setItem(key, value)</li><li>获取数据 ： localStorage.getItem(key)</li><li>删除数据 ： localStorage.removeItem(key)</li><li>删除所有数据 ： localStorage.clear()</li></ul><ol><li>声明周期永久生效，除非手动删除 否则关闭页面也会存在</li><li>可以多窗口（页面）共享（同一浏览器可以共享）</li><li>以键值对的形式存储使用</li></ol><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"set"</span>&gt;</span>存储数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"get"</span>&gt;</span>获取数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"remove"</span>&gt;</span>删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"del"</span>&gt;</span>清空所有数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ipt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> <span class="keyword">set</span> = document.querySelector(<span class="string">'.set'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> <span class="keyword">get</span> = document.querySelector(<span class="string">'.get'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> remove = <span class="built_in">document</span>.querySelector(<span class="string">'.remove'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> del = <span class="built_in">document</span>.querySelector(<span class="string">'.del'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">set</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> val = ipt.value;</span></span><br><span class="line"><span class="actionscript">    localStorage.setItem(<span class="string">'username'</span>, val);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  <span class="keyword">get</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(localStorage.getItem(<span class="string">'username'</span>));</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  remove.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    localStorage.removeItem(<span class="string">'username'</span>);</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="actionscript">  del.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line">    localStorage.clear();</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"remember"</span>&gt;</span> 记住用户名</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> username = <span class="built_in">document</span>.querySelector(<span class="string">'#username'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> remember = <span class="built_in">document</span>.querySelector(<span class="string">'#remember'</span>);</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">if</span> (localStorage.getItem(<span class="string">'username'</span>)) &#123;</span></span><br><span class="line"><span class="actionscript">    username.value = localStorage.getItem(<span class="string">'username'</span>);</span></span><br><span class="line"><span class="actionscript">    remember.checked = <span class="literal">true</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="actionscript">  remember.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> (<span class="keyword">this</span>.checked) &#123;</span></span><br><span class="line"><span class="actionscript">      localStorage.setItem(<span class="string">'username'</span>, username.value)</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">      localStorage.removeItem(<span class="string">'username'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>应用系统集成——访问控制</title>
    <link href="https://xiaoyan94.github.io/2020/08/23/%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90%E2%80%94%E2%80%94%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/"/>
    <id>https://xiaoyan94.github.io/2020/08/23/%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90%E2%80%94%E2%80%94%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</id>
    <published>2020-08-23T10:49:45.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="1bb7e1202d7a56ba3f9ba51803905a18787776e14e75a8d6b0aeae234a166ab3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="竹云" scheme="https://xiaoyan94.github.io/tags/%E7%AB%B9%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>应用系统集成 —— 身份管理</title>
    <link href="https://xiaoyan94.github.io/2020/08/23/%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90%E2%80%94%E2%80%94%E8%BA%AB%E4%BB%BD%E7%AE%A1%E7%90%86/"/>
    <id>https://xiaoyan94.github.io/2020/08/23/%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90%E2%80%94%E2%80%94%E8%BA%AB%E4%BB%BD%E7%AE%A1%E7%90%86/</id>
    <published>2020-08-23T08:28:41.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="ecd8a414eeeb5b79a3c423c7e517f2e8c5a17c121839b5d52b64410e320056e2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    
    <category term="竹云" scheme="https://xiaoyan94.github.io/tags/%E7%AB%B9%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>导出 jar 包的几种方式（命令行、Idea、Eclipse）</title>
    <link href="https://xiaoyan94.github.io/2020/08/23/%E5%AF%BC%E5%87%BAjar%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://xiaoyan94.github.io/2020/08/23/%E5%AF%BC%E5%87%BAjar%E5%8C%85%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-08-22T18:05:51.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>要单独将一个处理器类导出为 jar 包，除了用 Eclipse，用 <code>jar</code> 命令和 maven 打包也是很方便的。本文介绍了导出 Jar 包的几种方式。</p><a id="more"></a><h3 id="第一种，使用-Eclipse-的-Export-功能"><a href="#第一种，使用-Eclipse-的-Export-功能" class="headerlink" title="第一种，使用 Eclipse 的 Export 功能"></a>第一种，使用 <code>Eclipse</code> 的 <code>Export</code> 功能</h3><ul><li>新建 <code>lib</code> 目录放入第三方 jar 包，然后点击 <code>Add to Path</code></li><li>在类的 java 文件上右键 <code>Export</code> 选择导出 <code>Jar</code> 包</li></ul><h3 id="第二种，使用-mvn-package-命令"><a href="#第二种，使用-mvn-package-命令" class="headerlink" title="第二种，使用 mvn package 命令"></a>第二种，使用 <code>mvn package</code> 命令</h3><p>首先将使用到的第三方 jar 包安装到 Maven 本地仓库：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  yan  ~/Downloads  mvn install:install-file -Dfile=bfw-api-1.3.1.jar -DgroupId=com.bamboocloud -DartifactId=bfw-api-1.3.1 -Dversion=1.3.1 -Dpackaging=jar</span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ------------------&lt; org.apache.maven:standalone-pom &gt;-------------------</span><br><span class="line">[INFO] Building Maven Stub Project (No POM) 1</span><br><span class="line">[INFO] --------------------------------[ pom ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---</span><br><span class="line">[INFO] Installing /Users/yan/Downloads/bfw-api-1.3.1.jar to /Users/yan/.m2/repository/com/bamboocloud/bfw-api-1.3.1/1.3.1/bfw-api-1.3.1-1.3.1.jar</span><br><span class="line">[INFO] Installing /var/folders/bp/qj5wrpcx2vldm47jrf2pwhg00000gn/T/mvninstall4925133153419211597.pom to /Users/yan/.m2/repository/com/bamboocloud/bfw-api-1.3.1/1.3.1/bfw-api-1.3.1-1.3.1.pom</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  0.311 s</span><br><span class="line">[INFO] Finished at: 2020-08-23T01:20:17+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">  yan  ~/Downloads </span><br><span class="line">  yan  ~/Downloads  mvn install:install-file -Dfile=bim-api-6.5.0.jar -DgroupId=com.bamboocloud -DartifactId=bim-api-6.5.0 -Dversion=6.5.0 -Dpackaging=jar</span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ------------------&lt; org.apache.maven:standalone-pom &gt;-------------------</span><br><span class="line">[INFO] Building Maven Stub Project (No POM) 1</span><br><span class="line">[INFO] --------------------------------[ pom ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---</span><br><span class="line">[INFO] Installing /Users/yan/Downloads/bim-api-6.5.0.jar to /Users/yan/.m2/repository/com/bamboocloud/bim-api-6.5.0/6.5.0/bim-api-6.5.0-6.5.0.jar</span><br><span class="line">[INFO] Installing /var/folders/bp/qj5wrpcx2vldm47jrf2pwhg00000gn/T/mvninstall7064391259515368380.pom to /Users/yan/.m2/repository/com/bamboocloud/bim-api-6.5.0/6.5.0/bim-api-6.5.0-6.5.0.pom</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  0.398 s</span><br><span class="line">[INFO] Finished at: 2020-08-23T01:18:54+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">  yan  ~/Downloads </span><br></pre></td></tr></table></figure></div><ul><li>在 Idea 设置中找到 Maven 设置，点击进入仓库更新本地仓库，这样可以在 <code>pom.xml</code> 文件中有代码补全自动提示</li></ul><p>然后在 <code>pom.xml</code> 中引用安装在本地仓库的 jar 包</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定 java 版本号以解决 Maven 编译 Error:</span></span><br><span class="line"><span class="comment">    [ERROR] 不再支持源选项 5。请使用 7 或更高版本。</span></span><br><span class="line"><span class="comment">    [ERROR] 不再支持目标选项 5。请使用 7 或更高版本。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bamboocloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>BCJavaHandler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        安装到 Maven 本地仓库的 jar 包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bamboocloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bfw-api-1.3.1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bamboocloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bim-api-6.5.0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>然后进入项目根目录，打包</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">  yan  ~/IdeaProjects/BCJavaHandler  mvn clean  </span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] -------------------&lt; com.bamboocloud:BCJavaHandler &gt;--------------------</span><br><span class="line">[INFO] Building BCJavaHandler 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ BCJavaHandler ---</span><br><span class="line">[INFO] Deleting /Users/yan/IdeaProjects/BCJavaHandler/target</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  0.264 s</span><br><span class="line">[INFO] Finished at: 2020-08-23T01:32:04+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">  yan  ~/IdeaProjects/BCJavaHandler  mvn package</span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] -------------------&lt; com.bamboocloud:BCJavaHandler &gt;--------------------</span><br><span class="line">[INFO] Building BCJavaHandler 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ BCJavaHandler ---</span><br><span class="line">[INFO] Using <span class="string">'UTF-8'</span> encoding to copy filtered resources.</span><br><span class="line">[INFO] Copying 0 resource</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ BCJavaHandler ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[INFO] Compiling 1 <span class="built_in">source</span> file to /Users/yan/IdeaProjects/BCJavaHandler/target/classes</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ BCJavaHandler ---</span><br><span class="line">[INFO] Using <span class="string">'UTF-8'</span> encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory /Users/yan/IdeaProjects/BCJavaHandler/src/<span class="built_in">test</span>/resources</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ BCJavaHandler ---</span><br><span class="line">[INFO] Nothing to compile - all classes are up to date</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-surefire-plugin:2.12.4:<span class="built_in">test</span> (default-test) @ BCJavaHandler ---</span><br><span class="line">[INFO] No tests to run.</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ BCJavaHandler ---</span><br><span class="line">[INFO] Building jar: /Users/yan/IdeaProjects/BCJavaHandler/target/BCJavaHandler-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  1.789 s</span><br><span class="line">[INFO] Finished at: 2020-08-23T01:32:08+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">  yan  ~/IdeaProjects/BCJavaHandler  ll</span><br><span class="line">total 16</span><br><span class="line">-rw-r--r--  1 yan  staff    80B  8 23 01:07 BCJavaHandler.iml</span><br><span class="line">-rw-r--r--  1 yan  staff   1.4K  8 23 01:31 pom.xml</span><br><span class="line">drwxr-xr-x  4 yan  staff   128B  8 23 01:07 src</span><br><span class="line">drwxr-xr-x  8 yan  staff   256B  8 23 01:34 target</span><br><span class="line">  yan  ~/IdeaProjects/BCJavaHandler  <span class="built_in">cd</span> target</span><br><span class="line">  yan  ~/IdeaProjects/BCJavaHandler/target  ll</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r--@ 1 yan  staff   3.0K  8 23 01:32 BCJavaHandler-1.0-SNAPSHOT.jar</span><br><span class="line">drwxr-xr-x  4 yan  staff   128B  8 23 01:52 classes</span><br><span class="line">drwxr-xr-x  3 yan  staff    96B  8 23 01:32 generated-sources</span><br><span class="line">drwxr-xr-x  3 yan  staff    96B  8 23 01:32 maven-archiver</span><br><span class="line">drwxr-xr-x  3 yan  staff    96B  8 23 01:32 maven-status</span><br></pre></td></tr></table></figure></div><h3 id="第三种，使用-jar-cf-命令"><a href="#第三种，使用-jar-cf-命令" class="headerlink" title="第三种，使用 jar -cf 命令"></a>第三种，使用 <code>jar -cf</code> 命令</h3><p>找到 class 所在目录，进入与包名一级的目录，使用 <code>jar</code> 命令创建 jar 包</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  yan  ~/IdeaProjects/BCJavaHandler  <span class="built_in">cd</span> target/classes/</span><br><span class="line">  yan  ~/IdeaProjects/BCJavaHandler/target/classes  ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x  3 yan  staff    96B  8 23 01:32 com</span><br><span class="line">  yan  ~/IdeaProjects/BCJavaHandler/target/classes  jar -cf convert_test_v0.1_jar.jar com</span><br><span class="line">  yan  ~/IdeaProjects/BCJavaHandler/target/classes  ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  3 yan  staff    96B  8 23 01:32 com</span><br><span class="line">-rw-r--r--  1 yan  staff   1.7K  8 23 01:52 convert_test_v0.1_jar.jar</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;要单独将一个处理器类导出为 jar 包，除了用 Eclipse，用 &lt;code&gt;jar&lt;/code&gt; 命令和 maven 打包也是很方便的。本文介绍了导出 Jar 包的几种方式。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="Maven" scheme="https://xiaoyan94.github.io/tags/Maven/"/>
    
    <category term="Idea" scheme="https://xiaoyan94.github.io/tags/Idea/"/>
    
  </entry>
  
  <entry>
    <title>JVM 07 对象的实例化内存布局与访问定位</title>
    <link href="https://xiaoyan94.github.io/2020/08/08/JVM-07/"/>
    <id>https://xiaoyan94.github.io/2020/08/08/JVM-07/</id>
    <published>2020-08-08T13:13:37.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象的实例化"><a href="#对象的实例化" class="headerlink" title="对象的实例化"></a>对象的实例化</h2><h3 id="对象实例化的几种方式"><a href="#对象实例化的几种方式" class="headerlink" title="对象实例化的几种方式"></a>对象实例化的几种方式</h3><p><em>美团</em>：  </p><ul><li>对象在 JVM 中饭是怎么存储的？</li><li>对象头信息里面有哪些东西？</li></ul><p><em>蚂蚁金服</em>：</p><ul><li>二面：Java 对象头里有什么？</li></ul><p><strong>对象的实例化</strong>：</p><ul><li>创建对象的方式<ul><li><code>new</code><ul><li><code>new</code> 最常见的方式</li><li>变形 1 : Xxx 的静态方法</li><li>变形 2 : XxxBuilder&#x2F;XxxFactory 的静态方法</li></ul></li><li>Class 的 <code>newInstance()</code><ul><li>反射的方式，只能调用空参的构造器，权限必须是 <code>public</code></li></ul></li><li>Constructor 的 <code>newInstance(Xxx)</code><ul><li>反射的方式，可以调用空参、带参的构造器。权限没有要求</li></ul></li><li>使用 <code>clone()</code><ul><li>不调用任何构造器，当前类需要实现 <code>Cloneable</code> 接口, 实现 <code>clone()</code></li></ul></li><li>使用反序列化<ul><li>从文件、网络中获取一个对象的二进制流</li></ul></li><li>第三方库 <code>Objenesis</code></li></ul></li><li>创建对象的步骤<ol><li>判断对象对应的类是否加载、链接、初始化<br> <em>虚拟机遇到一条 <code>new</code> 指令 ，首先去检查这个指令的参数能否在 Metaspace 的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解忻和初始化。( 即判断类元信息是否存在)。如果没有，那么在双亲委派模式下，使用当前类加载器以 <code>ClassLoader+包名+类名</code> 为 Key 进行查找对应的 .class 文件。如果没有找到文件，则抛出 <code>ClassNotFoundException</code> 异常，如果找到，则进行类加载，并生成对应的 <code>Class</code> 类对象</em></li><li>为对象分配内存<br> <em>首先计算对象占用空间大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小。</em><ol><li>如果内存规整<ol><li>指针碰撞</li></ol></li><li>如果内存不规整<ol><li>虚拟机需要维护一个列表</li><li>空闲列表分配</li></ol></li><li>说明</li></ol></li><li>处理并发安全问题<ol><li>采用 CAS 配上失败重试保证更新的原子性</li><li>每个线程预先分配一块 TLAB</li></ol></li><li>初始化分配到的空间<ol><li>所有属性设置默认值，保证对象实例字段在不赋值时可以直接使用</li></ol></li><li>设置对象的对象头</li><li>执行 <code>init</code> 方法进行初始化</li></ol></li></ul><p>从字节码角度看对象的创建过程</p><hr><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><hr><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><hr>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://xiaoyan94.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM 06 运行时数据区的总结与常见大厂面试题说明</title>
    <link href="https://xiaoyan94.github.io/2020/08/08/JVM-06/"/>
    <id>https://xiaoyan94.github.io/2020/08/08/JVM-06/</id>
    <published>2020-08-08T12:46:21.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>常见面试题</p><a id="more"></a><p><img src="/2020/08/08/JVM-06/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E7%9A%84%E6%80%BB%E7%BB%931.png" alt="运行时数据区的总结"></p><p><em>百度</em>:</p><ul><li>三面：说一下 JVM 内存模型吧，有哪些区？分别干什么的？</li></ul><p><em>蚂蚁金服</em>:</p><ul><li>Java8 的内存分代改进</li><li>JVM 内存分哪几个区，每个区的作用是什么？</li><li>一面: JVM 内存分布 &#x2F; 内存结构？栈和堆的区别？堆的结构？为什么两个 survivor 区？</li><li>二面: Eden 和 Survior 的比例分配</li></ul><p><em>小米</em>:</p><ul><li>jvm 内存分区，为什么要有新生代和老年代</li></ul><p><em>字节跳动</em>:</p><ul><li>二面: Java 的内存分区</li><li>二面：讲讲 jvm 运行时数据区</li><li>什么时候对象会进入老年代?</li></ul><p><em>京东</em>:</p><ul><li>JVM 的内存结构，Eden 和 Survivor 比例。</li><li>JVM 内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为 Eden 和 Survivor。</li></ul><p><em>天猫</em>: .</p><ul><li>一面: Jvm 内存模型以及分区，需要详细到每个区放什么。</li><li>一面: JVM 的内存模型，Java8 做了什么修改</li></ul><p><em>拼多多</em>:</p><ul><li>JVM 内存分哪几个区，每个区的作用是什么?</li></ul><p><em>美团</em>:</p><ul><li>java 内存分配</li><li>jvm 的永久代中会发生垃圾回收吗？</li><li>一面: jvm 内存分区，为什么要有新生代和老年代?</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;常见面试题&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://xiaoyan94.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM 05 运行时数据区之方法区 (MethodArea)</title>
    <link href="https://xiaoyan94.github.io/2020/07/17/JVM-05/"/>
    <id>https://xiaoyan94.github.io/2020/07/17/JVM-05/</id>
    <published>2020-07-17T06:36:32.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>方法区概述</p><ul><li><a href="#1-%E6%A0%88%E5%92%8C%E5%A0%86%E5%92%8C%E6%96%B9%E6%B3%95%E5%8C%BA%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E5%85%B3%E7%B3%BB">1 栈和堆和方法区间的交互关系</a></li><li><a href="#2-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E7%90%86%E8%A7%A3">2 方法区的理解</a><ul><li><a href="#%E6%96%B9%E6%B3%95%E5%8C%BA%E5%9C%A8%E5%93%AA%E9%87%8C">方法区在哪里</a></li><li><a href="#HotSpot%E4%B8%AD%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E6%BC%94%E8%BF%9B">HotSpot中方法区的演进</a></li></ul></li><li><a href="#3-%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95%E5%8C%BA%E5%A4%A7%E5%B0%8F%E4%B8%8EOOM">3 设置方法区大小与OOM</a></li><li><a href="#4-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84">4 方法区的内部结构</a><ul><li><a href="#%E6%96%B9%E6%B3%95%E5%8C%BA-Method-Area-%E5%AD%98%E5%82%A8%E4%BB%80%E4%B9%88">方法区 (Method Area) 存储什么</a><ul><li><a href="#%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF">类型信息</a></li><li><a href="#%E5%9F%9F-Field-%E4%BF%A1%E6%81%AF">域 (Field) 信息</a></li><li><a href="#%E6%96%B9%E6%B3%95-Method-%E4%BF%A1%E6%81%AF">方法 (Method) 信息</a></li><li><a href="#%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%92%E5%BA%A6%E4%B8%BE%E4%BE%8B%E6%9F%A5%E7%9C%8B">字节码角度举例查看</a></li></ul></li><li><a href="#non-final-%E7%9A%84%E7%B1%BB%E5%8F%98%E9%87%8F">non-final 的类变量</a></li><li><a href="#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E%E5%85%A8%E5%B1%80%E5%B8%B8%E9%87%8Ffinal-static">补充说明：全局常量：<code>final static</code></a></li><li><a href="#class-%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E7%90%86%E8%A7%A3">class 文件中常量池的理解</a><ul><li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0-VS-%E5%B8%B8%E9%87%8F%E6%B1%A0">运行时常量池 VS 常量池</a></li><li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%B8%B8%E9%87%8F%E6%B1%A0">为什么需要常量池</a></li><li><a href="#%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%AD%E6%9C%89%E4%BB%80%E4%B9%88">常量池中有什么</a></li><li><a href="#%E5%B0%8F%E7%BB%93">小结</a></li></ul></li><li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E7%90%86%E8%A7%A3">运行时常量池的理解</a><ul><li><a href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0">运行时常量池</a></li></ul></li></ul></li><li><a href="#5-%E6%96%B9%E6%B3%95%E5%8C%BA%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B">5 方法区使用举例</a></li><li><a href="#6-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E6%BC%94%E8%BF%9B%E7%BB%86%E8%8A%82">6 方法区的演进细节</a><ul><li><a href="#%E6%B0%B8%E4%B9%85%E4%BB%A3%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%A2%AB%E5%85%83%E7%A9%BA%E9%97%B4%E6%9B%BF%E6%8D%A2">永久代为什么要被元空间替换</a></li><li><a href="#StringTable%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%B0%83%E6%95%B4%E4%BD%8D%E7%BD%AE">StringTable为什么要调整位置</a></li><li><a href="#%E5%A6%82%E4%BD%95%E8%AF%81%E6%98%8E%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%AD%98%E5%9C%A8%E5%93%AA">如何证明静态变量存在哪</a></li></ul></li><li><a href="#7-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">7 方法区的垃圾回收</a></li><li><a href="#8-%E6%80%BB%E7%BB%93">8 总结</a></li></ul><a id="more"></a><h2 id="1-栈和堆和方法区间的交互关系"><a href="#1-栈和堆和方法区间的交互关系" class="headerlink" title="1 栈和堆和方法区间的交互关系"></a>1 栈和堆和方法区间的交互关系</h2><p><img src="/2020/07/17/JVM-05/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="运行时数据区结构图"></p><p>从运行时数据区结构来看，方法区是要讨论的另一个结构。</p><p>从线程共享与否的角度来看</p><p><img src="/2020/07/17/JVM-05/%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F.svg" alt="内存区域"></p><p>栈、堆、方法区的交互关系</p><p><img src="/2020/07/17/JVM-05/%E6%A0%88%E5%A0%86%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E4%BA%A4%E4%BA%92%E5%85%B3%E7%B3%BB.png" alt="栈、堆、方法区的交互关系"></p><hr><h2 id="2-方法区的理解"><a href="#2-方法区的理解" class="headerlink" title="2 方法区的理解"></a>2 方法区的理解</h2><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4" target="_blank" rel="noopener">摘自 Oracle 官网 JVM 规范 2.5.4. Method Area</a></p><p>The Java Virtual Machine has a method area that is shared among all Java Virtual Machine threads. The method area is analogous to the storage area for compiled code of a conventional language or analogous to the “text” segment in an operating system process. It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors, including the special methods (<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.9" target="_blank" rel="noopener">§2.9</a>) used in class and instance initialization and interface initialization.</p><p>The method area is created on virtual machine start-up. Although the method area is logically part of the heap, simple implementations may choose not to either garbage collect or compact it. This specification does not mandate the location of the method area or the policies used to manage compiled code. The method area may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger method area becomes unnecessary. The memory for the method area does not need to be contiguous.</p><p><em>A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the method area, as well as, in the case of a varying-size method area, control over the maximum and minimum method area size.</em></p><p>The following exceptional condition is associated with the method area:</p><ul><li><strong>If memory in the method area cannot be made available to satisfy an allocation request, the Java Virtual Machine throws an OutOfMemoryError.</strong></li></ul><h3 id="方法区在哪里"><a href="#方法区在哪里" class="headerlink" title="方法区在哪里"></a>方法区在哪里</h3><p>《Java 虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。” 但对于 HotSpot JVM 而言，方法区还有一个别名叫做 Non-Heap（非堆），目的就是要和堆分开。</p><p>所以，<strong>方法区看作是一块独立于 Java 堆的内存空间</strong>。</p><ul><li>方法区 (Method Area) 与 Java 堆一样，是各个线程共享的内存区域。</li><li>方法区在 JVM 启动的时候被创建，并且它的实际的物理内存空间中和 Java 堆区一样都可以是不连续的。</li><li>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。</li><li>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误: <code>java.lang.OutOfMemoryError: PermGen space</code> 或者 <code>java.lang.OutOfMemoryError: Metaspace</code><ul><li>加载大量第三方的 jar 包；Tomcat 部署的工程过多（30-50）个；大量动态的生产反射类</li></ul></li><li>关闭 JVM 就会释放这个区域的内存。</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAreaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面这段简单的代码，运行的时候会加载多少个类呢？</p><p><img src="/2020/07/17/JVM-05/LoadedClassesNumber.png" alt="Visual VM"></p><p>运行程序，使用 Visual VM 的 Sampler 查看发现如此简单的几句代码执行时竟然加载了一千五百多个类。</p><h3 id="HotSpot中方法区的演进"><a href="#HotSpot中方法区的演进" class="headerlink" title="HotSpot中方法区的演进"></a>HotSpot中方法区的演进</h3><ul><li>在 jdk7 及以前，习惯上把方法区，称为永久代。jdk8 开始，使用元空间取代了永久代。</li><li>本质上，方法区和永久代并不等价。仅是对 Hotspot 而言的。《Java 虚拟机规范》对如何实现方法区，不做统一要求。例如: BEA JRockit &#x2F; IBM J9 中不存在永久代的概念。<ul><li>➢ 现在来看，当年使用永久代，不是好的 idea。导致 Java 程序更容易 <code>OOM</code> (超过 <code>-XX:MaxPermSize</code> 上限)</li></ul></li></ul><p><img src="/2020/07/17/JVM-05/%E6%96%B9%E6%B3%95%E5%8C%BA1.svg" alt="方法区概述"></p><p>而到了 JDK 8 ，终于完全废弃了永久代的概念，该用与 JRockit、J9 一样在本地内存中实现的元空间（Metaspace）来代替</p><p>元空间的本质和永久代类似，都是对 JVM 规范中的方法区的实现 。不过元空间与永久代最大的区别在于；<strong>元空间不在虚拟机设置的内存中，而是使用本地内存</strong>。</p><p>永久代、元空间二者并不只是名字变了，内部机构也调整了。</p><p>根据《Java 虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将 抛出 OOM 异常。</p><hr><h2 id="3-设置方法区大小与OOM"><a href="#3-设置方法区大小与OOM" class="headerlink" title="3 设置方法区大小与OOM"></a>3 设置方法区大小与OOM</h2><p>方法区的大小不必是固定的，jvm 可以根据应用的需要动态调整。</p><ul><li>jdk7 及以前:<ul><li>➢ 通过 <code>-XX:PermSize</code> 来设置永久代初始分配空间。默认值是 20.75M</li><li>➢ <code>-XX:MaxPermSize</code> 来设定永久代最大可分配空间。32 位机器默认是 64M， 64 位机器模式是 82M</li><li>➢ 当 JVM 加载的类信 息容量超过了这个值，会报异常 <code>OutOfMemoryError : PermGen space</code>。</li></ul></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  测试设置方法区大小参数的默认值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  jdk7及以前：</span></span><br><span class="line"><span class="comment"> *  -XX:PermSize=100m -XX:MaxPermSize=100m</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  jdk8及以后：</span></span><br><span class="line"><span class="comment"> *  -XX:MetaspaceSize=100m  -XX:MaxMetaspaceSize=100m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  12:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAreaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>首先，在 Idea 中将环境调整为 JDK 7:</p><ol><li>打开 <code>Project Structure</code> - <code>Modules</code> - 选中当前 <code>chapter09</code> , 将 <code>Sources</code> 选项中的 <code>Language Level</code> 调整为 <code>7</code> ;</li><li>打开 <code>Run</code> - <code>Edit Configurations</code> ，将 <code>JRE</code> 调整为 <code>JDK7</code> .</li></ol><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  yan  ~/Documents/JVMDemo  jps</span><br><span class="line"><span class="number">90656</span> MethodAreaDemo</span><br><span class="line"><span class="number">59491</span> Main</span><br><span class="line"><span class="number">49030</span></span><br><span class="line"><span class="number">59257</span></span><br><span class="line"><span class="number">91596</span> Jps</span><br><span class="line"><span class="number">90655</span> Launcher</span><br><span class="line">  yan  ~/Documents/JVMDemo  jinfo -flag MetaspaceSize <span class="number">90656</span></span><br><span class="line">no such flag <span class="string">'MetaspaceSize'</span></span><br><span class="line">  yan  ~/Documents/JVMDemo  jinfo -flag PermSize <span class="number">90656</span></span><br><span class="line">-XX:PermSize=<span class="number">21757952</span></span><br></pre></td></tr></table></figure></div><p>21757952 &#x2F; 1024 &#x2F; 1024 &#x3D; 20.75 M</p><p>然后，将 <code>Language Level</code> 和 <code>JRE</code> 重新设置为 JDK 8，重新运行上面的程序和命令：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  yan  ~/Documents/JVMDemo  jps</span><br><span class="line"><span class="number">59491</span> Main</span><br><span class="line"><span class="number">91940</span> Jps</span><br><span class="line"><span class="number">91927</span> MethodAreaDemo</span><br><span class="line"><span class="number">49030</span></span><br><span class="line"><span class="number">91926</span> Launcher</span><br><span class="line"><span class="number">59257</span></span><br><span class="line">  yan  ~/Documents/JVMDemo  jinfo -flag PermSize <span class="number">91927</span></span><br><span class="line">no such flag <span class="string">'PermSize'</span></span><br><span class="line">  yan  ~/Documents/JVMDemo  jinfo -flag MetaspaceSize <span class="number">91927</span></span><br><span class="line">-XX:MetaspaceSize=<span class="number">21807104</span></span><br></pre></td></tr></table></figure></div><ul><li>jdk8 及以后:<ul><li>➢ 元数据区大小可以使用参数 <code>-XX:MetaspaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code> 指定，替代上述原有的两个参数。</li><li>➢ 默认值依赖于平台。windows 下，<code>-XX:MetaspaceSize</code> 是 21M， <code>-XX:MaxMetaspaceSize</code> 的值是 - 1，即没有限制。</li><li>➢ 与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会拋出异常 <code>OutOfMemoryError: Metaspace</code></li><li>➢ <code>-XX:MetaspaceSize</code> : 设置初始的元空间大小。 对于一个 64 位的服务器端 JVM 来说，其默认的 <code>-XX:MetaspaceSize</code> 值为 21MB. 这就是初始的高水位线，一旦触及这个水位线，Full GC 将会被触发并卸载没用的类 (即这些类对应的类加载器不再存活)，然后这个高水位线将会重置。新的高水位线的值取决于 GC 后释放了多少元空间。如果释放的空间不足，那么在不超过 <code>MaxMetaspaceSize</code> 时，适当提高该值。如果释放空间过多，则适当降低该值。</li><li>➢ 如果初始化的高水位线设置过低， 上述高水位线调整情况会发生很多次。 通过垃圾回收器的日志可以观察到 Full GC 多次调用。为了避免频繁地 GC，建议将 <code>XX:MetaspaceSize</code> 设置为一个相对较高的值。</li></ul></li></ul><p>OOMTest:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk6/7中：</span></span><br><span class="line"><span class="comment"> * -XX:PermSize=10m -XX:MaxPermSize=10m</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * jdk8中：</span></span><br><span class="line"><span class="comment"> * -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  22:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMTest</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OOMTest test = <span class="keyword">new</span> OOMTest();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                <span class="comment">//创建ClassWriter对象，用于生成类的二进制字节码</span></span><br><span class="line">                ClassWriter classWriter = <span class="keyword">new</span> ClassWriter(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//指明版本号，修饰符，类名，包名，父类，接口</span></span><br><span class="line">                classWriter.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, <span class="string">"Class"</span> + i, <span class="keyword">null</span>, <span class="string">"java/lang/Object"</span>, <span class="keyword">null</span>);</span><br><span class="line">                <span class="comment">//返回byte[]</span></span><br><span class="line">                <span class="keyword">byte</span>[] code = classWriter.toByteArray();</span><br><span class="line">                <span class="comment">//类的加载</span></span><br><span class="line">                test.defineClass(<span class="string">"Class"</span> + i, code, <span class="number">0</span>, code.length);<span class="comment">//Class对象</span></span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><iframe width="1665" height="596" src="https://www.youtube.com/embed/2jNi1siWLn0?list=PLtGk8Nqe2ZcK0xUtbQjHeX2gqgoOdKJnX" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><strong>如何解决这些OOM</strong>？（涉及调优，以后细说）</p><ol><li>要解决 OOM 异常或 heap space 的异常，一般的手段是首先通过内存映像分析工具 (如 Eclipse Memory Analyzer) 对 dump 出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏 (Memory Leak) 还是内存溢出 (Memory overflow)。</li><li>如果是内存泄漏，可进一步通过工具查看泄漏对象到 GC Roots 的引用链。于是就能找到泄漏对象是通过怎样的路径与 GCRoots 相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及 GC Roots 引用链的信息，就可以比较准确地定位出泄漏代码的位置。</li><li>如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数 (<code>-Xmx</code> 与 <code>-Xms</code>) ，与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li></ol><hr><h2 id="4-方法区的内部结构"><a href="#4-方法区的内部结构" class="headerlink" title="4 方法区的内部结构"></a>4 方法区的内部结构</h2><p><img src="/2020/07/17/JVM-05/%E6%96%B9%E6%B3%95%E5%8C%BA2.svg" alt="方法区内部结构简图"></p><h3 id="方法区-Method-Area-存储什么"><a href="#方法区-Method-Area-存储什么" class="headerlink" title="方法区 (Method Area) 存储什么"></a>方法区 (Method Area) 存储什么</h3><p>《深入理解 Java 虛拟机》书中对方法区 (Method Area) 存储内容描述如下:<br>它用于存储已被虚拟机加载的 <strong>类型信息、常量、静态变量、即时编译器编译后的代码缓存</strong> 等。</p><h4 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h4><p>对每个加载的类型 (类 class、接口 interface、枚举 enum、注解 annotation)，JVM 必须在方法区中存储以下类型信息:</p><ul><li>①这个类型的完整有效名称 (全名 &#x3D; 包名。类名)</li><li>②这个类型直接父类的完整有效名 (对于 interface 或是 java. lang .object，都没有父类)</li><li>③这个类型的修饰符 (public, abstract, final 的某个子集)</li><li>④这个类型直接接口的一个有序列表</li></ul><h4 id="域-Field-信息"><a href="#域-Field-信息" class="headerlink" title="域 (Field) 信息"></a>域 (Field) 信息</h4><ul><li>JVM 必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</li><li>域的相关信息包括：域名称、域类型、域修饰符 (public, private,protected, static, final, <em>volatile</em>, <em>transient</em> 的某个子集)</li></ul><h4 id="方法-Method-信息"><a href="#方法-Method-信息" class="headerlink" title="方法 (Method) 信息"></a>方法 (Method) 信息</h4><p>JVM 必须保存所有方法的以下信息，同域信息 - - 样包括声明顺序:</p><ul><li>方法名称</li><li>方法的返回类型 (或 void)</li><li>方法参数的数量和类型 (按顺序)</li><li>方法的修饰符 (public, private, protected， static, final,synchronized, native, abstract 的一个子集)</li><li>方法的字节码 (bytecodes)、 操作数栈、局部变量表及大小 (abstract 和 native 方法除外)</li><li>异常表 (abstract 和 native 方法除外)<ul><li>➢ 每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ul></li></ul><h4 id="字节码角度举例查看"><a href="#字节码角度举例查看" class="headerlink" title="字节码角度举例查看"></a>字节码角度举例查看</h4><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试方法区的内部构成</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  23:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInnerStrucTest</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;,<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String str = <span class="string">"测试方法的内部结构"</span>;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"count = "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span> cal)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> value = <span class="number">30</span>;</span><br><span class="line">            result = value / cal;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>javap</code> 解析字节码文件：<code>javap -v -p MethodInnerStrucTest.class &gt; a2.txt</code></p><p>加 <code>-p</code> 参数的原因是显示使用 <code>private</code> 修饰符修饰的内容</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line">Classfile /Users/yan/Documents/JVMDemo/out/production/chapter09/com/atguigu/java/MethodInnerStrucTest<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">  <span class="title">Last</span> <span class="title">modified</span> 2020年7月26日</span>; size <span class="number">1626</span> bytes</span><br><span class="line">  SHA-<span class="number">256</span> checksum <span class="number">0</span>d22603b5d8e755868a46a34db2d475555262f6854e1941535d1d232314ff9bb</span><br><span class="line">  Compiled from <span class="string">"MethodInnerStrucTest.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">atguigu</span>.<span class="title">java</span>.<span class="title">MethodInnerStrucTest</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Comparable</span>&lt;<span class="title">java</span>.<span class="title">lang</span>.<span class="title">String</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: (<span class="number">0x0021</span>) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #17                         // com/atguigu/java/MethodInnerStrucTest</span><br><span class="line">  super_class: #18                        // java/lang/Object</span><br><span class="line">  interfaces: <span class="number">2</span>, fields: <span class="number">2</span>, methods: <span class="number">6</span>, attributes: <span class="number">2</span></span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #18.#52        // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Fieldref           #17.#53        // com/atguigu/java/MethodInnerStrucTest.num:I</span><br><span class="line">   #3 = Fieldref           #54.#55        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #4 = Class              #56            // java/lang/StringBuilder</span><br><span class="line">   #5 = Methodref          #4.#52         // java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">   #6 = String             #57            // count =</span><br><span class="line">   #7 = Methodref          #4.#58         // java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">   #8 = Methodref          #4.#59         // java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span><br><span class="line">   #9 = Methodref          #4.#60         // java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">  #10 = Methodref          #61.#62        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">  #11 = Class              #63            // java/lang/Exception</span><br><span class="line">  #12 = Methodref          #11.#64        // java/lang/Exception.printStackTrace:()V</span><br><span class="line">  #13 = Class              #65            // java/lang/String</span><br><span class="line">  #14 = Methodref          #17.#66        // com/atguigu/java/MethodInnerStrucTest.compareTo:(Ljava/lang/String;)I</span><br><span class="line">  #15 = String             #67            // 测试方法的内部结构</span><br><span class="line">  #16 = Fieldref           #17.#68        // com/atguigu/java/MethodInnerStrucTest.str:Ljava/lang/String;</span><br><span class="line">  #17 = Class              #69            // com/atguigu/java/MethodInnerStrucTest</span><br><span class="line">  #18 = Class              #70            // java/lang/Object</span><br><span class="line">  #19 = Class              #71            // java/lang/Comparable</span><br><span class="line">  #20 = Class              #72            // java/io/Serializable</span><br><span class="line">  #21 = Utf8               num</span><br><span class="line">  #22 = Utf8               I</span><br><span class="line">  #23 = Utf8               str</span><br><span class="line">  #24 = Utf8               Ljava/lang/String;</span><br><span class="line">  #25 = Utf8               &lt;init&gt;</span><br><span class="line">  #26 = Utf8               ()V</span><br><span class="line">  #27 = Utf8               Code</span><br><span class="line">  #28 = Utf8               LineNumberTable</span><br><span class="line">  #29 = Utf8               LocalVariableTable</span><br><span class="line">  #30 = Utf8               this</span><br><span class="line">  #31 = Utf8               Lcom/atguigu/java/MethodInnerStrucTest;</span><br><span class="line">  #32 = Utf8               test1</span><br><span class="line">  #33 = Utf8               count</span><br><span class="line">  #34 = Utf8               test2</span><br><span class="line">  #35 = Utf8               (I)I</span><br><span class="line">  #36 = Utf8               value</span><br><span class="line">  #37 = Utf8               e</span><br><span class="line">  #38 = Utf8               Ljava/lang/Exception;</span><br><span class="line">  #39 = Utf8               cal</span><br><span class="line">  #40 = Utf8               result</span><br><span class="line">  #41 = Utf8               StackMapTable</span><br><span class="line">  #42 = Class              #63            // java/lang/Exception</span><br><span class="line">  #43 = Utf8               compareTo</span><br><span class="line">  #44 = Utf8               (Ljava/lang/String;)I</span><br><span class="line">  #45 = Utf8               o</span><br><span class="line">  #46 = Utf8               (Ljava/lang/Object;)I</span><br><span class="line">  #47 = Utf8               &lt;clinit&gt;</span><br><span class="line">  #48 = Utf8               Signature</span><br><span class="line">  #49 = Utf8               Ljava/lang/Object;Ljava/lang/Comparable&lt;Ljava/lang/String;&gt;;Ljava/io/Serializable;</span><br><span class="line">  #50 = Utf8               SourceFile</span><br><span class="line">  #51 = Utf8               MethodInnerStrucTest.java</span><br><span class="line">  #52 = NameAndType        #25:#26        // "&lt;init&gt;":()V</span><br><span class="line">  #53 = NameAndType        #21:#22        // num:I</span><br><span class="line">  #54 = Class              #73            // java/lang/System</span><br><span class="line">  #55 = NameAndType        #74:#75        // out:Ljava/io/PrintStream;</span><br><span class="line">  #56 = Utf8               java/lang/StringBuilder</span><br><span class="line">  #57 = Utf8               count =</span><br><span class="line">  #58 = NameAndType        #76:#77        // append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #59 = NameAndType        #76:#78        // append:(I)Ljava/lang/StringBuilder;</span><br><span class="line">  #60 = NameAndType        #79:#80        // toString:()Ljava/lang/String;</span><br><span class="line">  #61 = Class              #81            // java/io/PrintStream</span><br><span class="line">  #62 = NameAndType        #82:#83        // println:(Ljava/lang/String;)V</span><br><span class="line">  #63 = Utf8               java/lang/Exception</span><br><span class="line">  #64 = NameAndType        #84:#26        // printStackTrace:()V</span><br><span class="line">  #65 = Utf8               java/lang/String</span><br><span class="line">  #66 = NameAndType        #43:#44        // compareTo:(Ljava/lang/String;)I</span><br><span class="line">  #67 = Utf8               测试方法的内部结构</span><br><span class="line">  #68 = NameAndType        #23:#24        // str:Ljava/lang/String;</span><br><span class="line">  #69 = Utf8               com/atguigu/java/MethodInnerStrucTest</span><br><span class="line">  #70 = Utf8               java/lang/Object</span><br><span class="line">  #71 = Utf8               java/lang/Comparable</span><br><span class="line">  #72 = Utf8               java/io/Serializable</span><br><span class="line">  #73 = Utf8               java/lang/System</span><br><span class="line">  #74 = Utf8               out</span><br><span class="line">  #75 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #76 = Utf8               append</span><br><span class="line">  #77 = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #78 = Utf8               (I)Ljava/lang/StringBuilder;</span><br><span class="line">  #79 = Utf8               toString</span><br><span class="line">  #80 = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #81 = Utf8               java/io/PrintStream</span><br><span class="line">  #82 = Utf8               println</span><br><span class="line">  #83 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">  #84 = Utf8               printStackTrace</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> num;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> java.lang.String str;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">    flags: (<span class="number">0x000a</span>) ACC_PRIVATE, ACC_STATIC</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> com.atguigu.java.MethodInnerStrucTest();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: bipush        <span class="number">10</span></span><br><span class="line">         7: putfield      #2                  // Field num:I</span><br><span class="line">        <span class="number">10</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">4</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">11</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java/MethodInnerStrucTest;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">20</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         3: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         6: new           #4                  // class java/lang/StringBuilder</span><br><span class="line">         <span class="number">9</span>: dup</span><br><span class="line">        10: invokespecial #5                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">        13: ldc           #6                  // String count =</span><br><span class="line">        15: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">        <span class="number">18</span>: iload_1</span><br><span class="line">        19: invokevirtual #8                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span><br><span class="line">        22: invokevirtual #9                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">        25: invokevirtual #10                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        <span class="number">28</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">17</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">18</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">19</span>: <span class="number">28</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">29</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java/MethodInnerStrucTest;</span><br><span class="line">            <span class="number">3</span>      <span class="number">26</span>     <span class="number">1</span> count   I</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line">    descriptor: (I)I</span><br><span class="line">    flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_0</span><br><span class="line">         <span class="number">1</span>: istore_1</span><br><span class="line">         <span class="number">2</span>: bipush        <span class="number">30</span></span><br><span class="line">         <span class="number">4</span>: istore_2</span><br><span class="line">         <span class="number">5</span>: iload_2</span><br><span class="line">         <span class="number">6</span>: iload_0</span><br><span class="line">         <span class="number">7</span>: idiv</span><br><span class="line">         <span class="number">8</span>: istore_1</span><br><span class="line">         <span class="number">9</span>: goto          <span class="number">17</span></span><br><span class="line">        <span class="number">12</span>: astore_2</span><br><span class="line">        <span class="number">13</span>: aload_2</span><br><span class="line">        14: invokevirtual #12                 // Method java/lang/Exception.printStackTrace:()V</span><br><span class="line">        <span class="number">17</span>: iload_1</span><br><span class="line">        <span class="number">18</span>: ireturn</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">2</span>     <span class="number">9</span>    <span class="number">12</span>   Class java/lang/Exception</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">21</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">23</span>: <span class="number">2</span></span><br><span class="line">        line <span class="number">24</span>: <span class="number">5</span></span><br><span class="line">        line <span class="number">27</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">25</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">26</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">28</span>: <span class="number">17</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">5</span>       <span class="number">4</span>     <span class="number">2</span> value   I</span><br><span class="line">           <span class="number">13</span>       <span class="number">4</span>     <span class="number">2</span>     e   Ljava/lang/Exception;</span><br><span class="line">            <span class="number">0</span>      <span class="number">19</span>     <span class="number">0</span>   cal   I</span><br><span class="line">            <span class="number">2</span>      <span class="number">17</span>     <span class="number">1</span> result   I</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">          offset_delta = <span class="number">12</span></span><br><span class="line">          locals = [ <span class="keyword">int</span>, <span class="keyword">int</span> ]</span><br><span class="line">          stack = [ class java/lang/Exception ]</span><br><span class="line">        frame_type = <span class="number">4</span> <span class="comment">/* same */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">    descriptor: (Ljava/lang/String;)I</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: iconst_0</span><br><span class="line">         <span class="number">1</span>: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">33</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">2</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java/MethodInnerStrucTest;</span><br><span class="line">            <span class="number">0</span>       <span class="number">2</span>     <span class="number">1</span>     o   Ljava/lang/String;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(java.lang.Object)</span></span>;</span><br><span class="line">    descriptor: (Ljava/lang/Object;)I</span><br><span class="line">    flags: (<span class="number">0x1041</span>) ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">2</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: aload_1</span><br><span class="line">         2: checkcast     #13                 // class java/lang/String</span><br><span class="line">         5: invokevirtual #14                 // Method compareTo:(Ljava/lang/String;)I</span><br><span class="line">         <span class="number">8</span>: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java/MethodInnerStrucTest;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0008</span>) ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         0: ldc           #15                 // String 测试方法的内部结构</span><br><span class="line">         2: putstatic     #16                 // Field str:Ljava/lang/String;</span><br><span class="line">         <span class="number">5</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">13</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">Signature: #49                          // Ljava/lang/Object;Ljava/lang/Comparable&lt;Ljava/lang/String;&gt;;Ljava/io/Serializable;</span><br><span class="line">SourceFile: <span class="string">"MethodInnerStrucTest.java"</span></span><br></pre></td></tr></table></figure></div><h3 id="non-final-的类变量"><a href="#non-final-的类变量" class="headerlink" title="non-final 的类变量"></a>non-final 的类变量</h3><ul><li>静态变量和类关联在一起，随着类的加载而加载，它们成为类数据在逻辑上的一部分。</li><li>类变量被类的所有实例共享，即使没有类的实例时也可以访问它。</li></ul><p>比如下面的代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * non-final的类变量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  20:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAreaTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order = <span class="keyword">null</span>;</span><br><span class="line">        order.hello();</span><br><span class="line">        System.out.println(order.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> number = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在执行时是不会报空指针异常的。其编译后生成的字节码文件中实际上是直接调用的类的静态方法和静态变量。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">Classfile /Users/yan/Documents/JVMDemo/out/production/chapter09/com/atguigu/java/MethodAreaTest<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">  <span class="title">Last</span> <span class="title">modified</span> 2020年7月23日</span>; size <span class="number">676</span> bytes</span><br><span class="line">  SHA-<span class="number">256</span> checksum <span class="number">807</span>cacb27b90d94a2df4bb43df8748ef47e8e0304335d36100cb97d1f0c964a0</span><br><span class="line">  Compiled from <span class="string">"MethodAreaTest.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">atguigu</span>.<span class="title">java</span>.<span class="title">MethodAreaTest</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: (<span class="number">0x0021</span>) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #6                          // com/atguigu/java/MethodAreaTest</span><br><span class="line">  super_class: #7                         // java/lang/Object</span><br><span class="line">  interfaces: <span class="number">0</span>, fields: <span class="number">0</span>, methods: <span class="number">2</span>, attributes: <span class="number">1</span></span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #7.#23         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Methodref          #24.#25        // com/atguigu/java/Order.hello:()V</span><br><span class="line">   #3 = Fieldref           #26.#27        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #4 = Fieldref           #24.#28        // com/atguigu/java/Order.count:I</span><br><span class="line">   #5 = Methodref          #29.#30        // java/io/PrintStream.println:(I)V</span><br><span class="line">   #6 = Class              #31            // com/atguigu/java/MethodAreaTest</span><br><span class="line">   #7 = Class              #32            // java/lang/Object</span><br><span class="line">   #8 = Utf8               &lt;init&gt;</span><br><span class="line">   #9 = Utf8               ()V</span><br><span class="line">  #10 = Utf8               Code</span><br><span class="line">  #11 = Utf8               LineNumberTable</span><br><span class="line">  #12 = Utf8               LocalVariableTable</span><br><span class="line">  #13 = Utf8               this</span><br><span class="line">  #14 = Utf8               Lcom/atguigu/java/MethodAreaTest;</span><br><span class="line">  #15 = Utf8               main</span><br><span class="line">  #16 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #17 = Utf8               args</span><br><span class="line">  #18 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #19 = Utf8               order</span><br><span class="line">  #20 = Utf8               Lcom/atguigu/java/Order;</span><br><span class="line">  #21 = Utf8               SourceFile</span><br><span class="line">  #22 = Utf8               MethodAreaTest.java</span><br><span class="line">  #23 = NameAndType        #8:#9          // "&lt;init&gt;":()V</span><br><span class="line">  #24 = Class              #33            // com/atguigu/java/Order</span><br><span class="line">  #25 = NameAndType        #34:#9         // hello:()V</span><br><span class="line">  #26 = Class              #35            // java/lang/System</span><br><span class="line">  #27 = NameAndType        #36:#37        // out:Ljava/io/PrintStream;</span><br><span class="line">  #28 = NameAndType        #38:#39        // count:I</span><br><span class="line">  #29 = Class              #40            // java/io/PrintStream</span><br><span class="line">  #30 = NameAndType        #41:#42        // println:(I)V</span><br><span class="line">  #31 = Utf8               com/atguigu/java/MethodAreaTest</span><br><span class="line">  #32 = Utf8               java/lang/Object</span><br><span class="line">  #33 = Utf8               com/atguigu/java/Order</span><br><span class="line">  #34 = Utf8               hello</span><br><span class="line">  #35 = Utf8               java/lang/System</span><br><span class="line">  #36 = Utf8               out</span><br><span class="line">  #37 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #38 = Utf8               count</span><br><span class="line">  #39 = Utf8               I</span><br><span class="line">  #40 = Utf8               java/io/PrintStream</span><br><span class="line">  #41 = Utf8               println</span><br><span class="line">  #42 = Utf8               (I)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.atguigu.java.MethodAreaTest();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java/MethodAreaTest;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aconst_null</span><br><span class="line">         <span class="number">1</span>: astore_1</span><br><span class="line">         <span class="number">2</span>: aload_1</span><br><span class="line">         <span class="number">3</span>: pop</span><br><span class="line">         4: invokestatic  #2                  // Method com/atguigu/java/Order.hello:()V</span><br><span class="line">         7: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        <span class="number">10</span>: aload_1</span><br><span class="line">        <span class="number">11</span>: pop</span><br><span class="line">        12: getstatic     #4                  // Field com/atguigu/java/Order.count:I</span><br><span class="line">        15: invokevirtual #5                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">        <span class="number">18</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">2</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">7</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">18</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">19</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">2</span>      <span class="number">17</span>     <span class="number">1</span> order   Lcom/atguigu/java/Order;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"MethodAreaTest.java"</span></span><br></pre></td></tr></table></figure></div><h3 id="补充说明：全局常量：final-static"><a href="#补充说明：全局常量：final-static" class="headerlink" title="补充说明：全局常量：final static"></a>补充说明：全局常量：<code>final static</code></h3><p>被声明为 <code>final</code> 的类变量的处理方法则不同，每个全局常量在编译的时候就会被分配了。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">Classfile /Users/yan/Documents/JVMDemo/out/production/chapter09/com/atguigu/java/Order<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">  <span class="title">Last</span> <span class="title">modified</span> 2020年7月23日</span>; size <span class="number">615</span> bytes</span><br><span class="line">  SHA-<span class="number">256</span> checksum d47aa5a5154fe954fcf79b1b36e77c54565d5b454e89e8d545a0bb0d97d2e749</span><br><span class="line">  Compiled from <span class="string">"MethodAreaTest.java"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">atguigu</span>.<span class="title">java</span>.<span class="title">Order</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: (<span class="number">0x0020</span>) ACC_SUPER</span><br><span class="line">  this_class: #6                          // com/atguigu/java/Order</span><br><span class="line">  super_class: #7                         // java/lang/Object</span><br><span class="line">  interfaces: <span class="number">0</span>, fields: <span class="number">2</span>, methods: <span class="number">3</span>, attributes: <span class="number">1</span></span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #7.#24         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Fieldref           #25.#26        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #3 = String             #27            // hello!</span><br><span class="line">   #4 = Methodref          #28.#29        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">   #5 = Fieldref           #6.#30         // com/atguigu/java/Order.count:I</span><br><span class="line">   #6 = Class              #31            // com/atguigu/java/Order</span><br><span class="line">   #7 = Class              #32            // java/lang/Object</span><br><span class="line">   #8 = Utf8               count</span><br><span class="line">   #9 = Utf8               I</span><br><span class="line">  #10 = Utf8               number</span><br><span class="line">  #11 = Utf8               ConstantValue</span><br><span class="line">  #12 = Integer            2</span><br><span class="line">  #13 = Utf8               &lt;init&gt;</span><br><span class="line">  #14 = Utf8               ()V</span><br><span class="line">  #15 = Utf8               Code</span><br><span class="line">  #16 = Utf8               LineNumberTable</span><br><span class="line">  #17 = Utf8               LocalVariableTable</span><br><span class="line">  #18 = Utf8               this</span><br><span class="line">  #19 = Utf8               Lcom/atguigu/java/Order;</span><br><span class="line">  #20 = Utf8               hello</span><br><span class="line">  #21 = Utf8               &lt;clinit&gt;</span><br><span class="line">  #22 = Utf8               SourceFile</span><br><span class="line">  #23 = Utf8               MethodAreaTest.java</span><br><span class="line">  #24 = NameAndType        #13:#14        // "&lt;init&gt;":()V</span><br><span class="line">  #25 = Class              #33            // java/lang/System</span><br><span class="line">  #26 = NameAndType        #34:#35        // out:Ljava/io/PrintStream;</span><br><span class="line">  #27 = Utf8               hello!</span><br><span class="line">  #28 = Class              #36            // java/io/PrintStream</span><br><span class="line">  #29 = NameAndType        #37:#38        // println:(Ljava/lang/String;)V</span><br><span class="line">  #30 = NameAndType        #8:#9          // count:I</span><br><span class="line">  #31 = Utf8               com/atguigu/java/Order</span><br><span class="line">  #32 = Utf8               java/lang/Object</span><br><span class="line">  #33 = Utf8               java/lang/System</span><br><span class="line">  #34 = Utf8               out</span><br><span class="line">  #35 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #36 = Utf8               java/io/PrintStream</span><br><span class="line">  #37 = Utf8               println</span><br><span class="line">  #38 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> number;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: (<span class="number">0x0019</span>) ACC_PUBLIC, ACC_STATIC, ACC_FINAL</span><br><span class="line">    ConstantValue: <span class="keyword">int</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  com.atguigu.java.Order();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0000</span>)</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">16</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java/Order;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #3                  // String hello!</span><br><span class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">22</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">23</span>: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0008</span>) ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: iconst_1</span><br><span class="line">         1: putstatic     #5                  // Field count:I</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">17</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"MethodAreaTest.java"</span></span><br></pre></td></tr></table></figure></div><p>从</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">  descriptor: I</span><br><span class="line">  flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> number;</span><br><span class="line">  descriptor: I</span><br><span class="line">  flags: (<span class="number">0x0019</span>) ACC_PUBLIC, ACC_STATIC, ACC_FINAL</span><br><span class="line">  ConstantValue: <span class="keyword">int</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></div><p>可以看出来 <code>static final</code> 的变量在编译时就已经确定好值了，再从</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: (<span class="number">0x0008</span>) ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">       <span class="number">0</span>: iconst_1</span><br><span class="line">       1: putstatic     #5                  // Field count:I</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">17</span>: <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>可以看出来仅使用 <code>static</code> 修饰的类变量在类加载时才被初始化变量。实际上上面的代码对应的就是字节码中的 <code>&lt;clinit&gt;()</code> 方法，也就是<a href="https://xiaoyan94.github.io/2020/07/03/JVM-01/#%E5%88%9D%E5%A7%8B%E5%8C%96">类加载的<strong>初始化</strong>阶段</a>。</p><h3 id="class-文件中常量池的理解"><a href="#class-文件中常量池的理解" class="headerlink" title="class 文件中常量池的理解"></a>class 文件中常量池的理解</h3><h4 id="运行时常量池-VS-常量池"><a href="#运行时常量池-VS-常量池" class="headerlink" title="运行时常量池 VS 常量池"></a>运行时常量池 VS 常量池</h4><ul><li>方法区，内部包含了运行时常量池。</li><li>字节码文件中，内部包含了常量池。</li><li>要弄清楚方法区，需要理解清除 ClassFile ，因为加载类的信息都在方法区。</li><li>要弄清楚方法区的运行时常量池，需要理解清除 ClassFile 中的常量池。</li></ul><p>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述信息外，还包含一项信息那就是常量池表 (Constant Pool Table) ，包括各种字面量和对类型、域和方法的符号引用。</p><h4 id="为什么需要常量池"><a href="#为什么需要常量池" class="headerlink" title="为什么需要常量池"></a>为什么需要常量池</h4><p>一个 java 源文件中的类、接口，编译后产生一个字节码文件。而 Java 中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池，之前有介绍。</p><p>比如：如下的代码:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>虽然 <code>SimpleClass.java</code> 只有 194 字节，但是里面却使用了 <code>String</code>、<code>System</code>、<code>PrintStream</code> 及 <code>Object</code> 等结构。这里代码量其实已经很小了。如果代码多，引用到的结构会更多！这里就需要常量池了！</p><iframe width="1496" height="809" src="https://www.youtube.com/embed/ybbNRXVaBc8?list=PLtGk8Nqe2ZcK0xUtbQjHeX2gqgoOdKJnX" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h4 id="常量池中有什么"><a href="#常量池中有什么" class="headerlink" title="常量池中有什么"></a>常量池中有什么</h4><p>几种在常量池内存储的数据类型包括:</p><ul><li>数量值</li><li>字符串值</li><li>类引用</li><li>字段引用</li><li>方法引用</li></ul><p>例如下面这段代码:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAreaTest2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>Object foo = new Object();</code></p><p>将会被编译成如下字节码:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:  new #2  // Class java/lang/Object</span><br><span class="line"><span class="number">1</span>:  dup</span><br><span class="line">2:  invokespecial #3    // Method java/lang/Object "&lt;init&gt;"( ) V</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>常量池，可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。</p><h3 id="运行时常量池的理解"><a href="#运行时常量池的理解" class="headerlink" title="运行时常量池的理解"></a>运行时常量池的理解</h3><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><ul><li>运行时常量池 (Runtime Constant Pool) 是方法区的一部分。</li><li>常量池表 ( Constant Pool Table) 是 Class 文件的一部分，<strong>用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中</strong>。</li><li>运行时常量池，在加载类和接口到虛拟机后，就会创建对应的运行时常量池。</li><li>JVM 为每个已加载的类型 ( 类或接口) 都维护一个常量池。池中的数据项像数组项一样，是<strong>通过索引访问</strong>的。</li><li>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。<ul><li>➢ 运行时常量池，相对于 Class 文件常量池的另一重要特征是：<strong>具备动态性</strong>。</li></ul></li><li>运行时常量池类似于传统编程语言中的符号表 (symboltable)，但是它所包含的数据却比符号表要更加丰富一些。</li><li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛 <code>OutOfMemoryError</code> 异常。</li></ul><hr><h2 id="5-方法区使用举例"><a href="#5-方法区使用举例" class="headerlink" title="5 方法区使用举例"></a>5 方法区使用举例</h2><p>图示举例方法区的使用</p><iframe width="100%" height="480" src="https://www.youtube.com/embed/icLKv_ENEmE?list=PLtGk8Nqe2ZcK0xUtbQjHeX2gqgoOdKJnX" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><hr><h2 id="6-方法区的演进细节"><a href="#6-方法区的演进细节" class="headerlink" title="6 方法区的演进细节"></a>6 方法区的演进细节</h2><ol><li><p>首先明确：只有 HotSpot 才有永久代。</p><p> BEA JRockit、IBM J9等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java 虚拟机规范》管束，并不要求统一。</p></li><li><p>HotSpot 中方法区的变化：</p><table><thead><tr><th>0</th><th>1</th></tr></thead><tbody><tr><td>jdk1.6 及之前</td><td>有永久代 (permanent generation) ，静态变量存放在永久代上</td></tr><tr><td>jdk1.7</td><td>有永久代，但已经逐步 “去永久代”，字符串常量池、静态变量移除，保存在堆中</td></tr><tr><td>jdk1.8 及之后</td><td>无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆</td></tr></tbody></table></li></ol><p><img src="/2020/07/17/JVM-05/HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E6%BC%94%E8%BF%9B%E7%BB%86%E8%8A%82.svg" alt="HotSpot虚拟机中方法区的演进细节"></p><h3 id="永久代为什么要被元空间替换"><a href="#永久代为什么要被元空间替换" class="headerlink" title="永久代为什么要被元空间替换"></a>永久代为什么要被元空间替换</h3><p><a href="http://openjdk.java.net/jeps/122" target="_blank" rel="noopener">http://openjdk.java.net/jeps/122</a> 中关于 Remove the Permanent Generation 的描述：</p><blockquote><p><strong>Summary</strong><br>Remove the permanent generation from the Hotspot JVM and thus the need to tune the size of the permanent generation.</p></blockquote><p>从 Hotspot JVM 中删除永久代，因此不需要调整永久代的大小。</p><blockquote><p><strong>Motivation</strong><br>This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.</p></blockquote><p>这是 JRockit 和 Hotspot 融合工作的一部分。 JRockit 客户不需要配置永久代（因为 JRockit 没有永久代），并且习惯于不配置永久代。</p><p>随着 Java8 的到来，HotSpot VM 中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个<strong>与堆不相连的本地内存区域</strong>，这个区域叫做**元空间( Metaspace )**。</p><p>由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。</p><p>这项改动是很有必要的，原因有:</p><p>1） <strong>为永久代设置空间大小是很难确定的</strong>。<br>在某些场景下，如果动态加载类过多，容易产生 Perm 区的 OOM。比如某个实际 Web 工程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误。<br><code>&quot;Exception in thread &#39;dubbo client x.x connector&#39; java.lang.OutOfMemoryError: PermGen space&quot;</code><br>而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。<br>因此，默认情况下，元空间的大小仅受本地内存限制。</p><p>2） <strong>对永久代进行调优是很困难的</strong>。</p><p><a href="#7-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">方法区的垃圾回收</a></p><h3 id="StringTable为什么要调整位置"><a href="#StringTable为什么要调整位置" class="headerlink" title="StringTable为什么要调整位置"></a>StringTable为什么要调整位置</h3><p>与 Jdk1.6 不同，jdk7 中将 StringTable 放到了堆空间中。因为永久代的回收效率很低，在 full gc 的时候才会触发。而 full gc 是老年代的空间不足、永久代不足时才会触发。</p><p>这就导致 StringTable 回收效率不高。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存。</p><h3 id="如何证明静态变量存在哪"><a href="#如何证明静态变量存在哪" class="headerlink" title="如何证明静态变量存在哪"></a>如何证明静态变量存在哪</h3><iframe width="1144" height="576" src="https://www.youtube.com/embed/jXWKqUZgQUo?list=PLtGk8Nqe2ZcK0xUtbQjHeX2gqgoOdKJnX" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>参考《深入理解 Java 虚拟机》第三版：4.2.1 节</p><p>通过实验来回答一个简单问题：staticObj、instanceObj、localObj这三个变量本身（而不是它们所指向的对象）存放在哪里？</p><p>代码清单4-6　JHSDB测试代码</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * staticObj、instanceObj、localObj存放在哪里？</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JHSDB_TestCase</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> ObjectHolder staticObj = <span class="keyword">new</span> ObjectHolder();</span><br><span class="line">        ObjectHolder instanceObj = <span class="keyword">new</span> ObjectHolder();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ObjectHolder localObj = <span class="keyword">new</span> ObjectHolder();</span><br><span class="line">            System.out.println(<span class="string">"done"</span>); <span class="comment">// 这里设一个断点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectHolder</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> JHSDB_TestCase.Test();</span><br><span class="line">        test.foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>1.答案读者当然都知道：staticObj随着Test的类型信息存放在方法区，instanceObj随着Test的对象实例存放在Java堆，localObject则是存放在foo()方法栈帧的局部变量表中。这个答案是通过前两章学习的理论知识得出的，现在要做的是通过JHSDB来实践验证这一点。</p><p>2.从《Java虚拟机规范》所定义的概念模型来看，所有Class相关的信息都应该存放在方法区之中， 但方法区该如何实现，《Java虚拟机规范》并未做出规定，这就成了一件允许不同虚拟机自己灵活把握的事情。JDK 7及其以后版本的HotSpot虚拟机选择把静态变量与类型在Java语言一端的映射Class对象存放在一起，存储于Java堆之中，从我们的实验中也明确验证了这一点。</p><p>3.在JDK 7以前，即还没有开始“去永久代”行动时，这些静态变量是存放在永久代上的，JDK 7起把 静态变量、字符常量这些从永久代移除出去。</p></blockquote><hr><h2 id="7-方法区的垃圾回收"><a href="#7-方法区的垃圾回收" class="headerlink" title="7 方法区的垃圾回收"></a>7 方法区的垃圾回收</h2><p>有些人认为方法区 (如 HotSpot 虚拟机中的元空间或者永久代) 是没有垃圾收集行为的，其实不然。《Java 虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在 (如 JDK11 时期的 ZGC 收集器就不支持类卸载)。</p><p>一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前 Sun 公司的 Bug 列表中，曾出现过的若干个严重的 Bug 就是由于低版本的 HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。</p><p><strong>方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型</strong>。</p><p>● 先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近 Java 语言层次的常量概念，如文本字符串、被声明为 final 的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量:</p><ul><li>➢ 1、类和接口的全限定名</li><li>➢ 2、字段的名称和描述符</li><li>➢ 3、方法的名称和描述符</li></ul><p>● HotSpot 虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收。</p><p>● 回收废弃常量与回收 Java 堆中的对象非常类似。</p><p>● 判定一个常量是否 “废弃” 还是相对简单，而要判定一个类型是否属于 “不再被使用的类” 的条件就比较苛刻了。需要同时满足下面三个条件:</p><ul><li>➢ 该类所有的实例都已经被回收，也就是 Java 堆中不存在该类及其任何派生子类的实例。</li><li>➢ 加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如 OSGi、JSP 的重加载等，否则通常是很难达成的。</li><li>➢ 该类对应的 <code>java.lang.Class</code> 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><p>● Java 虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是 “被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot 虚拟机提供了 <code>-Xnoclassgc</code> 参数进行控制，还可以使用 <code>-verbose:class</code> 以及 <code>-XX:+TraceClass-Loading</code>、<code>-XX:+TraceClassUnLoading</code> 查看类加载和卸载信息</p><p>● 在大量使用反射、动态代理、CGLib 等字节码框架，动态生成 JSP 以及 OSGi 这类频繁自定义类加载器的场景中，<strong>通常都需要 Java 虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力</strong>。</p><hr><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8 总结"></a>8 总结</h2><p>常见面试题</p><p><em>百度</em>:</p><ul><li>三面：说一下 JVM 内存模型吧，有哪些区？分别干什么的？</li></ul><p><em>蚂蚁金服</em>:</p><ul><li>Java8 的内存分代改进</li><li>JVM 内存分哪几个区，每个区的作用是什么？</li><li>一面: JVM 内存分布 &#x2F; 内存结构？栈和堆的区别？堆的结构？为什么两个 survivor 区？</li><li>二面: Eden 和 Survior 的比例分配</li></ul><p><em>小米</em>:</p><ul><li>jvm 内存分区，为什么要有新生代和老年代</li></ul><p><em>字节跳动</em>:</p><ul><li>二面: Java 的内存分区</li><li>二面：讲讲 jvm 运行时数据区</li><li>什么时候对象会进入老年代?</li></ul><p><em>京东</em>:</p><ul><li>JVM 的内存结构，Eden 和 Survivor 比例。</li><li>JVM 内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为 Eden 和 Survivor。</li></ul><p><em>天猫</em>: .</p><ul><li>一面: Jvm 内存模型以及分区，需要详细到每个区放什么。</li><li>一面: JVM 的内存模型，Java8 做了什么修改</li></ul><p><em>拼多多</em>:</p><ul><li>JVM 内存分哪几个区，每个区的作用是什么?</li></ul><p><em>美团</em>:</p><ul><li>java 内存分配</li><li>jvm 的永久代中会发生垃圾回收吗？</li><li>一面: jvm 内存分区，为什么要有新生代和老年代?</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;方法区概述&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-%E6%A0%88%E5%92%8C%E5%A0%86%E5%92%8C%E6%96%B9%E6%B3%95%E5%8C%BA%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E5%85%B3%E7%B3%BB&quot;&gt;1 栈和堆和方法区间的交互关系&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E7%90%86%E8%A7%A3&quot;&gt;2 方法区的理解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%96%B9%E6%B3%95%E5%8C%BA%E5%9C%A8%E5%93%AA%E9%87%8C&quot;&gt;方法区在哪里&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#HotSpot%E4%B8%AD%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E6%BC%94%E8%BF%9B&quot;&gt;HotSpot中方法区的演进&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-%E8%AE%BE%E7%BD%AE%E6%96%B9%E6%B3%95%E5%8C%BA%E5%A4%A7%E5%B0%8F%E4%B8%8EOOM&quot;&gt;3 设置方法区大小与OOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84&quot;&gt;4 方法区的内部结构&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%96%B9%E6%B3%95%E5%8C%BA-Method-Area-%E5%AD%98%E5%82%A8%E4%BB%80%E4%B9%88&quot;&gt;方法区 (Method Area) 存储什么&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF&quot;&gt;类型信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%9F%9F-Field-%E4%BF%A1%E6%81%AF&quot;&gt;域 (Field) 信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%96%B9%E6%B3%95-Method-%E4%BF%A1%E6%81%AF&quot;&gt;方法 (Method) 信息&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%92%E5%BA%A6%E4%B8%BE%E4%BE%8B%E6%9F%A5%E7%9C%8B&quot;&gt;字节码角度举例查看&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#non-final-%E7%9A%84%E7%B1%BB%E5%8F%98%E9%87%8F&quot;&gt;non-final 的类变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%A1%A5%E5%85%85%E8%AF%B4%E6%98%8E%E5%85%A8%E5%B1%80%E5%B8%B8%E9%87%8Ffinal-static&quot;&gt;补充说明：全局常量：&lt;code&gt;final static&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#class-%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E7%90%86%E8%A7%A3&quot;&gt;class 文件中常量池的理解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0-VS-%E5%B8%B8%E9%87%8F%E6%B1%A0&quot;&gt;运行时常量池 VS 常量池&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%B8%B8%E9%87%8F%E6%B1%A0&quot;&gt;为什么需要常量池&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%AD%E6%9C%89%E4%BB%80%E4%B9%88&quot;&gt;常量池中有什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%B0%8F%E7%BB%93&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%9A%84%E7%90%86%E8%A7%A3&quot;&gt;运行时常量池的理解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E8%BF%90%E8%A1%8C%E6%97%B6%E5%B8%B8%E9%87%8F%E6%B1%A0&quot;&gt;运行时常量池&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-%E6%96%B9%E6%B3%95%E5%8C%BA%E4%BD%BF%E7%94%A8%E4%B8%BE%E4%BE%8B&quot;&gt;5 方法区使用举例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E6%BC%94%E8%BF%9B%E7%BB%86%E8%8A%82&quot;&gt;6 方法区的演进细节&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E6%B0%B8%E4%B9%85%E4%BB%A3%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%A2%AB%E5%85%83%E7%A9%BA%E9%97%B4%E6%9B%BF%E6%8D%A2&quot;&gt;永久代为什么要被元空间替换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#StringTable%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%B0%83%E6%95%B4%E4%BD%8D%E7%BD%AE&quot;&gt;StringTable为什么要调整位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%E5%A6%82%E4%BD%95%E8%AF%81%E6%98%8E%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E5%AD%98%E5%9C%A8%E5%93%AA&quot;&gt;如何证明静态变量存在哪&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-%E6%96%B9%E6%B3%95%E5%8C%BA%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6&quot;&gt;7 方法区的垃圾回收&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8-%E6%80%BB%E7%BB%93&quot;&gt;8 总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://xiaoyan94.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM 04 运行时数据区之堆 (Heap)</title>
    <link href="https://xiaoyan94.github.io/2020/07/11/JVM-04/"/>
    <id>https://xiaoyan94.github.io/2020/07/11/JVM-04/</id>
    <published>2020-07-11T09:02:59.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-堆的核心概述"><a href="#1-堆的核心概述" class="headerlink" title="1 堆的核心概述"></a>1 堆的核心概述</h2><ul><li>● 一个 JVM 实例只存在一个堆内存，堆也是 Java 内存管理的核心区域。</li><li>● Java 堆区在 JVM 启动的时候即被创建，其空间大小也就确定了。是 JVM 管理的最大一块内存空间。<ul><li>➢ 堆内存的大小是可以调节的。</li></ul></li><li>● 《Java 虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</li><li>● 所有的线程共享 Java 堆，在这里还可以划分线程私有的缓冲区 (ThreadLocal Allocation Buffer， TLAB)</li></ul><p>一个 JVM 实例对应一个进程，方法区和堆是一个进程一份，而程序计数器、本地方法栈、虚拟机栈是一个线程对应一份，一个进程中的所有线程共享方法区和堆（并不是完整的堆都一定是共享的，比如 TLAB）。</p><a id="more"></a><ul><li><a href="#1-%E5%A0%86%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E8%BF%B0">1 堆的核心概述</a><ul><li><a href="#%E5%86%85%E5%AD%98%E7%BB%86%E5%88%86">内存细分</a></li></ul></li><li><a href="#2-%E8%AE%BE%E7%BD%AE%E5%A0%86%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F%E4%B8%8E-OOM">2 设置堆内存大小与 OOM</a><ul><li><a href="#%E5%A0%86%E7%A9%BA%E9%97%B4%E5%A4%A7%E5%B0%8F%E7%9A%84%E8%AE%BE%E7%BD%AE">堆空间大小的设置</a></li><li><a href="#OutOfMemoryError-%E7%9A%84%E8%AF%B4%E6%98%8E%E4%B8%8E%E4%B8%BE%E4%BE%8B"><code>OutOfMemoryError</code> 的说明与举例</a></li></ul></li><li><a href="#3-%E5%B9%B4%E8%BD%BB%E4%BB%A3%E4%B8%8E%E8%80%81%E5%B9%B4%E4%BB%A3">3 年轻代与老年代</a></li><li><a href="#4-%E5%9B%BE%E8%A7%A3%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E8%BF%87%E7%A8%8B">4 图解对象分配过程</a></li><li><a href="#5-Minor-GC-%E5%92%8C-Major-GC-%E5%92%8C-Full-GC">5 Minor GC 和 Major GC 和 Full GC</a><ul><li><a href="#%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E5%88%86%E4%BB%A3%E5%BC%8FGC%E7%AD%96%E7%95%A5%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6">最简单的分代式GC策略的触发条件</a></li><li><a href="#GC%E4%B8%BE%E4%BE%8B%E4%B8%8E%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90">GC举例与日志分析</a></li></ul></li><li><a href="#6-%E5%A0%86%E7%A9%BA%E9%97%B4%E5%88%86%E4%BB%A3%E6%80%9D%E6%83%B3">6 堆空间分代思想</a></li><li><a href="#7-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5">7 内存分配策略</a></li><li><a href="#8-%E4%B8%BA%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E5%86%85%E5%AD%98TLAB">8 为对象分配内存：TLAB</a></li><li><a href="#9-%E5%B0%8F%E7%BB%93%E5%A0%86%E7%A9%BA%E9%97%B4%E7%9A%84%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE">9 小结堆空间的参数设置</a></li><li><a href="#X-%E5%A0%86%E6%98%AF%E5%88%86%E9%85%8D%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%94%AF%E4%B8%80%E9%80%89%E6%8B%A9%E5%90%97">X 堆是分配对象的唯一选择吗</a><ul><li><a href="#%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0">逃逸分析概述</a></li><li><a href="#%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E4%B9%8B%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96">逃逸分析之代码优化</a><ul><li><a href="#%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E4%B9%8B%E6%A0%88%E4%B8%8A%E5%88%86%E9%85%8D">代码优化之栈上分配</a></li><li><a href="#%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E4%B9%8B%E5%90%8C%E6%AD%A5%E7%9C%81%E7%95%A5%E6%B6%88%E9%99%A4">代码优化之同步省略（消除）</a></li><li><a href="#-%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96%E4%B9%8B%E6%A0%87%E9%87%8F%E6%9B%BF%E6%8D%A2">🌿 代码优化之标量替换</a></li><li><a href="#%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90%E5%B0%8F%E7%BB%93">逃逸分析小结</a></li></ul></li></ul></li><li><a href="#%E6%9C%AC%E7%AB%A0%E5%B0%8F%E7%BB%93">本章小结</a></li></ul><h3 id="内存细分"><a href="#内存细分" class="headerlink" title="内存细分"></a>内存细分</h3><p>现代垃圾收集器大部分都基于分代收集理论设计，堆空间细分为：</p><p>Java 7 及之前堆内存逻辑上分为三部分：新生区 + 养老区 +<strong>永久区</strong></p><ul><li>➢ Young Generation Space 新生区 Young&#x2F;New  <ul><li>又被划分为 Eden 区和 Survivor 区</li></ul></li><li>➢ Tenure generation space 养老区 0ld&#x2F;Tenure</li><li>➢ Permanent Space 永久区 Perm</li></ul><p>Java 8 及之后堆内存逻辑上分为三部分：新生区 + 养老区 +<strong>元空间</strong></p><ul><li>➢ Young Generation Space 新生区 Young&#x2F;New<ul><li>又被划分为 Eden 区和 Survivor 区</li></ul></li><li>➢ Tenure generation space 养老区 0ld&#x2F;Tenure</li><li>➢ Meta Space 元空间 Meta</li></ul><p>约定：新生区 &#x2F; 新生代 &#x2F; 年轻代、养老区 &#x2F; 老年区 &#x2F; 老年代、永久区 &#x2F; 永久代</p><p><img src="/2020/07/11/JVM-04/%E5%A0%86%E7%A9%BA%E9%97%B4%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84.png" alt="堆空间内部结构"></p><p><img src="/2020/07/11/JVM-04/%E6%B0%B8%E4%B9%85%E4%BB%A3%E5%92%8C%E5%85%83%E7%A9%BA%E9%97%B4.jpeg" alt="永久代和元空间"></p><p>演示 JVM 实例：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -Xms10m -Xmx10m</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">"start..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep (<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println (<span class="string">"end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -Xms20m -Xmx20m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  16:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">"start..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep (<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println (<span class="string">"end..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在 Idea 中，依次点击 <code>Run</code> - <code>Edit Configurations</code> 在 <code>VM options</code> 中输入参数 <code>-Xms20m -Xmx20m</code>。然后打开 <a href="https://visualvm.github.io/" target="_blank" rel="noopener">Visual VM</a>，这个软件在 JDK 1.8 以后就不再内置，需要 <a href="https://visualvm.github.io/download.html" target="_blank" rel="noopener">手动下载</a>， 在 <code>Tools</code> - <code>Plugins</code> 中安装 <code>Visual GC</code> 插件。</p><p><img src="/2020/07/11/JVM-04/HeapDemo0.png" alt="HeapDemo Overview"></p><p>从上图中可以看到设置的 JVM 内存参数。</p><p><img src="/2020/07/11/JVM-04/HeapDemo.png" alt="HeapDemo"></p><p><img src="/2020/07/11/JVM-04/HeapDemo1.png" alt="HeapDemo1"></p><p>从以上图中可以看到，（JDK1.8 下运行时）伊甸园区、<strong>两个幸存者区</strong>、老年区加起来正好是我们设置的总内存大小 20M。（实测JDK1.7 下运行时，伊甸园区、<em>一个幸存者区</em>、老年区加起来是 20M）</p><hr><ul><li>《Java 虚拟机规范》中对 Java 堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。(The heap is the run-time data area from which memory for all class instances and arrays is allocated )<ul><li>➢ 我要说的是：“几乎” 所有的对象实例都在这里分配内存。—— 从实际使用角度看的。</li></ul></li><li>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</li><li>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</li><li>堆，是 GC ( Garbage Collection, 垃圾收集器）执行垃圾回收的重点区域。</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  17:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleHeap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">// 属性、成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleHeap</span> <span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">"My ID is"</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        SimpleHeap sl = <span class="keyword">new</span> SimpleHeap (<span class="number">1</span>);</span><br><span class="line">        SimpleHeap s2 = <span class="keyword">new</span> SimpleHeap (<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> [] arr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        Object [] arr1 = <span class="keyword">new</span> Object [<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>设置 VM 参数：<code>-Xms10m -Xmx10m -XX:+PrintGCDetails</code> , 在 JDK1.8 下运行 SimpleHeap</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">2560</span>K, used <span class="number">1406</span>K [<span class="number">0x00000007bfd00000</span>, <span class="number">0x00000007c0000000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">2048</span>K, <span class="number">68</span>% used [<span class="number">0x00000007bfd00000</span>,<span class="number">0x00000007bfe5fbe8</span>,<span class="number">0x00000007bff00000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bff80000</span>,<span class="number">0x00000007bff80000</span>,<span class="number">0x00000007c0000000</span>)</span><br><span class="line">  to   space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bff00000</span>,<span class="number">0x00000007bff00000</span>,<span class="number">0x00000007bff80000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">7168</span>K, used <span class="number">0</span>K [<span class="number">0x00000007bf600000</span>, <span class="number">0x00000007bfd00000</span>, <span class="number">0x00000007bfd00000</span>)</span><br><span class="line">  object space <span class="number">7168</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bf600000</span>,<span class="number">0x00000007bf600000</span>,<span class="number">0x00000007bfd00000</span>)</span><br><span class="line"> Metaspace       used <span class="number">2950</span>K, capacity <span class="number">4496</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 320<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure></div><p>在 JDK1.7 下运行：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">3072</span>K, used <span class="number">1176</span>K [<span class="number">0x00000007ffc80000</span>, <span class="number">0x0000000800000000</span>, <span class="number">0x0000000800000000</span>)</span><br><span class="line">  eden space <span class="number">2560</span>K, <span class="number">45</span>% used [<span class="number">0x00000007ffc80000</span>,<span class="number">0x00000007ffda6258</span>,<span class="number">0x00000007fff00000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000007fff80000</span>,<span class="number">0x00000007fff80000</span>,<span class="number">0x0000000800000000</span>)</span><br><span class="line">  to   space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000007fff00000</span>,<span class="number">0x00000007fff00000</span>,<span class="number">0x00000007fff80000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">7168</span>K, used <span class="number">0</span>K [<span class="number">0x00000007ff580000</span>, <span class="number">0x00000007ffc80000</span>, <span class="number">0x00000007ffc80000</span>)</span><br><span class="line">  object space <span class="number">7168</span>K, <span class="number">0</span>% used [<span class="number">0x00000007ff580000</span>,<span class="number">0x00000007ff580000</span>,<span class="number">0x00000007ffc80000</span>)</span><br><span class="line"> PSPermGen       total <span class="number">21504</span>K, used <span class="number">2859</span>K [<span class="number">0x00000007fa380000</span>, <span class="number">0x00000007fb880000</span>, <span class="number">0x00000007ff580000</span>)</span><br><span class="line">  object space <span class="number">21504</span>K, <span class="number">13</span>% used [<span class="number">0x00000007fa380000</span>,<span class="number">0x00000007fa64af68</span>,<span class="number">0x00000007fb880000</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>可以看到，JDK1.8 以后就是元空间了。</p><p><img src="/2020/07/11/JVM-04/SimpleHeap.png" alt="局部变量表、堆、方法区"></p><p>对象、数组在堆中创建，局部变量表中只保留对他们的引用。</p><hr><h2 id="2-设置堆内存大小与-OOM"><a href="#2-设置堆内存大小与-OOM" class="headerlink" title="2 设置堆内存大小与 OOM"></a>2 设置堆内存大小与 OOM</h2><h3 id="堆空间大小的设置"><a href="#堆空间大小的设置" class="headerlink" title="堆空间大小的设置"></a>堆空间大小的设置</h3><ul><li>Java 堆区用于存储 Java 对象实例，那么堆的大小在 JVM 启动时就已经设定好了，大家可以通过选项 “<code>-Xmx</code>“ 和”<code>-Xms</code>“ 来进行设置。<ul><li>➢“<code>-Xms</code>“ 用于表示堆区的起始内存，等价于 <code>-XX: InitialHeapSize</code></li><li>➢“<code>-Xmx</code>“ 则用于表示堆区的最大内存，等价于 <code>-XX :MaxHeapSize</code></li></ul></li><li>一旦堆区中的内存大小超过 “<code>-Xmx</code>“ 所指定的最大内存时，将会抛出 <code>OutOfMemoryError</code> 异常。</li><li>通常会将 <code>-Xms</code> 和 <code>-Xmx</code> 两个参数配置相同的值，其目的是为了能够在 java 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。</li><li>默认情况下，初始内存大小：物理电脑内存大小 &#x2F; 64</li><li>最大内存大小：物理电脑内存大小 &#x2F; 4</li></ul><p><code>-X</code> 参数用法：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. 设置堆空间大小的参数</span></span><br><span class="line"><span class="comment"> * -Xms 用来设置堆空间（年轻代 + 老年代）的初始内存大小</span></span><br><span class="line"><span class="comment"> *      -X 是 jvm 的运行参数</span></span><br><span class="line"><span class="comment"> *      ms 是 memory start</span></span><br><span class="line"><span class="comment"> * -Xmx 用来设置堆空间（年轻代 + 老年代）的最大内存大小</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. 默认堆空间的大小</span></span><br><span class="line"><span class="comment"> *    初始内存大小：物理电脑内存大小 / 64</span></span><br><span class="line"><span class="comment"> *             最大内存大小：物理电脑内存大小 / 4</span></span><br><span class="line"><span class="comment"> * 3. 手动设置：-Xms600m -Xmx600m</span></span><br><span class="line"><span class="comment"> *     开发中建议将初始堆内存和最大的堆内存设置成相同的值。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4. 查看设置的参数：方式一： jps   /  jstat -gc 进程 id</span></span><br><span class="line"><span class="comment"> *                  方式二：-XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  20:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSpaceInitial</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回 Java 虚拟机中的堆内存总量</span></span><br><span class="line">        <span class="keyword">long</span> initialMemory = Runtime.getRuntime ().totalMemory () / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line">        <span class="comment">// 返回 Java 虚拟机试图使用的最大堆内存量</span></span><br><span class="line">        <span class="keyword">long</span> maxMemory = Runtime.getRuntime ().maxMemory () / <span class="number">1024</span> / <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println (<span class="string">"-Xms :"</span> + initialMemory + <span class="string">"M"</span>);</span><br><span class="line">        System.out.println (<span class="string">"-Xmx :"</span> + maxMemory + <span class="string">"M"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认设置时，即不设置虚拟机参数使用默认分配内存大小</span></span><br><span class="line"><span class="comment">//        System.out.println ("系统内存大小为：" + initialMemory * 64.0 / 1024 + "G");</span></span><br><span class="line"><span class="comment">//        System.out.println ("系统内存大小为：" + maxMemory * 4.0 / 1024 + "G");</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep (<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>程序输出：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-Xms : <span class="number">575</span>M</span><br><span class="line">-Xmx : <span class="number">575</span>M</span><br></pre></td></tr></table></figure></div><p>为什么输出结果不是设置的 600M？</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  jps</span><br><span class="line">32736</span><br><span class="line">49124 Launcher</span><br><span class="line">49125 HeapSpaceInitial</span><br><span class="line">49161 Jps</span><br><span class="line">34013 Main</span><br><span class="line">  jstat -gc 49125</span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT    CGC    CGCT     GCT</span><br><span class="line">25600.0 25600.0  0.0    0.0   153600.0 15360.5   409600.0     0.0     4480.0 780.7  384.0   76.6       0    0.000   0      0.000   -          -    0.000</span><br></pre></td></tr></table></figure></div><p>通过下面两个柿子：</p><ol><li>25600 (S0C) + 25600 (S1C) + 153600 (EC) + 409600 (OC) &#x3D; 614400, 614400 ÷ 1024 &#x3D; 600</li><li>25600 (S0C&#x2F;S1C) + 153600 (EC) + 409600 (OC) &#x3D; 588800, 588800 ÷ 1024 &#x3D; 575</li></ol><p>可知，575 为两个幸存者区其中一个幸存者区 + 伊甸园区 + 老年区的大小总和。</p><p>也可以使用 <code>-XX:+PrintGCDetails</code> 查看：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-Xms : <span class="number">575</span>M</span><br><span class="line">-Xmx : <span class="number">575</span>M</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">179200</span>K, used <span class="number">9216</span>K [<span class="number">0x00000007b3800000</span>, <span class="number">0x00000007c0000000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">153600</span>K, <span class="number">6</span>% used [<span class="number">0x00000007b3800000</span>,<span class="number">0x00000007b41001a0</span>,<span class="number">0x00000007bce00000</span>)</span><br><span class="line">  from space <span class="number">25600</span>K, <span class="number">0</span>% used [<span class="number">0x00000007be700000</span>,<span class="number">0x00000007be700000</span>,<span class="number">0x00000007c0000000</span>)</span><br><span class="line">  to   space <span class="number">25600</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bce00000</span>,<span class="number">0x00000007bce00000</span>,<span class="number">0x00000007be700000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">409600</span>K, used <span class="number">0</span>K [<span class="number">0x000000079a800000</span>, <span class="number">0x00000007b3800000</span>, <span class="number">0x00000007b3800000</span>)</span><br><span class="line">  object space <span class="number">409600</span>K, <span class="number">0</span>% used [<span class="number">0x000000079a800000</span>,<span class="number">0x000000079a800000</span>,<span class="number">0x00000007b3800000</span>)</span><br><span class="line"> Metaspace       used <span class="number">2953</span>K, capacity <span class="number">4496</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 321<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure></div><p>179200K &#x3D; 153600K + 25600K ，年轻代总大小为伊甸园区 + 一个幸存者 (from 或 to) 区的大小。</p><h3 id="OutOfMemoryError-的说明与举例"><a href="#OutOfMemoryError-的说明与举例" class="headerlink" title="OutOfMemoryError 的说明与举例"></a><code>OutOfMemoryError</code> 的说明与举例</h3><p>演示程序：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -Xms600m -Xmx600m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  21:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOMTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Picture&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep (<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace ();</span><br><span class="line">            &#125;</span><br><span class="line">            list.add (<span class="keyword">new</span> Picture (<span class="keyword">new</span> Random ().nextInt (<span class="number">1024</span> * <span class="number">1024</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Picture</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span> [] pixels;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Picture</span> <span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pixels = <span class="keyword">new</span> <span class="keyword">byte</span> [length];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>程序最终肯定会输出异常信息：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">  at com.atguigu.java.Picture.&lt;init&gt;(OOMTest.java:<span class="number">29</span>)</span><br><span class="line">  at com.atguigu.java.OOMTest.main (OOMTest.java:<span class="number">20</span>)</span><br></pre></td></tr></table></figure></div><p>在 Visual VM 中，通过 Visual GC 可以动态监控堆内存变化情况，通过 Sampler - Memory 还可以分析是什么原因导致堆内存溢出异常。</p><p><img src="/2020/07/11/JVM-04/VisualVM.gif" alt="VisualVM - Visual GC"><br><img src="/2020/07/11/JVM-04/VisualVMSampler.png" alt="VisualVM - Sampler - Memory"></p><hr><h2 id="3-年轻代与老年代"><a href="#3-年轻代与老年代" class="headerlink" title="3 年轻代与老年代"></a>3 年轻代与老年代</h2><ul><li>存储在 JVM 中的 Java 对象可以被划分为两类：<ul><li>➢ 一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速</li><li>➢ 另外一类对象的生命周期却非常长，在某些极端的情况下还能够与 JVM 的生命周期保持一致。</li></ul></li><li>Java 堆区进一步细分的话，可以划分为年轻代 (YoungGen) 和老年代 (OldGen)</li><li>其中年轻代又可以划分为 Eden 空间、Survivor0 空间和 Survivor1 空间（有时也叫做 from 区、to 区）。</li></ul><p><img src="/2020/07/11/JVM-04/HeapMemoryDivision.png" alt="堆空间内部结构划分"></p><p>下面这参数开发中一般不会调：</p><p>配置新生代与老年代在堆结构的占比。</p><ul><li>➢ 默认 <code>-XX:NewRatio=2</code>，表示新生代占 1，老年代占 2，新生代占整个堆的 1&#x2F;3</li><li>➢ 可以修改 <code>-XX:NewRatio=4</code>，表示新生代占 1，老年代占 4，新生代占整个堆的 1&#x2F;5</li></ul><p>测试：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -Xms600m -Xmx600m</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * -XX:NewRatio ： 设置新生代与老年代的比例。默认值是 2.</span></span><br><span class="line"><span class="comment"> * -XX:SurvivorRatio ：设置新生代中 Eden 区与 Survivor 区的比例。默认值是 8</span></span><br><span class="line"><span class="comment"> * -XX:-UseAdaptiveSizePolicy ：关闭自适应的内存分配策略  （暂时用不到）</span></span><br><span class="line"><span class="comment"> * -Xmn: 设置新生代的空间的大小。 （一般不设置）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  17:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EdenSurvivorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">"我只是来打个酱油～"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep (<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>设置 VM Option 参数：<code>-Xms600m -Xmx600m</code> ，可以使用 <code>jinfo</code> 命令查看 <code>NewRatio</code> 参数：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> ✘  yan  ~  jps <span class="comment">#jps</span></span><br><span class="line">32736</span><br><span class="line">34013 Main</span><br><span class="line">53645 Launcher</span><br><span class="line">54110 Jps</span><br><span class="line">53646 EdenSurvivorTest</span><br><span class="line">  yan  ~  jinfo -flag NewRatio 53646 <span class="comment">#jinfo</span></span><br><span class="line">-XX:NewRatio=2</span><br><span class="line">  yan  ~  jinfo -flag SurvivorRatio 53646</span><br><span class="line">-XX:SurvivorRatio=8</span><br></pre></td></tr></table></figure></div><p>使用不同的参数运行程序进行测试，得到下表：</p><table><thead><tr><th>参数</th><th>Eden Space</th><th>Survivor 0</th><th>Survivor 1</th><th>Old Gen</th><th>SurvivorRatio</th><th>NewRatio</th></tr></thead><tbody><tr><td><code>-Xms600m -Xmx600m</code></td><td>150</td><td>25</td><td>25</td><td>400</td><td>6</td><td>2</td></tr><tr><td><code>-Xms600m -Xmx600m -XX:-UseAdaptiveSizePolicy</code></td><td>150</td><td>25</td><td>25</td><td>400</td><td>6</td><td>2</td></tr><tr><td><code>-Xms600m -Xmx600m -XX:SurvivorRatio=8</code></td><td>160</td><td>20</td><td>20</td><td>400</td><td>8</td><td>2</td></tr><tr><td><code>-Xms600m -Xmx600m -XX:SurvivorRatio=8 -XX:NewRatio=3</code></td><td>120</td><td>15</td><td>15</td><td>450</td><td>8</td><td>3</td></tr></tbody></table><p>虽然默认的 <code>SurvivorRatio</code> 是 8，官方文档也是 8，但是实际运行中伊甸园区和幸存者区的比例是 150:25 &#x3D; 6:1，即使使用 <code>-XX:-UseAdaptiveSizePolicy</code> ：关闭自适应的内存分配策略，也还是 6:1。除非显式地使用 <code>-XX:SurvivorRatio=8</code> 显式指定比例为 8:1</p><ul><li>在 HotSpot 中，Eden 空间和另外两个 Survivor 空间缺省所占的比例是 8:1:1</li><li>当然开发人员可以通过选项 “<code>-XX:SurvivorRatio</code>“ 调整这个空间比例。比如 <code>-XX:SurvivorRatio=8</code></li><li><strong>几乎所有</strong> 的 Java 对象都是在 Eden 区被 new 出来的。</li><li>绝大部分的 Java 对象的销毁都在新生代进行了。<ul><li>➢ IBM 公司的专门研究表明，新生代中 80% 的对象都是 “朝生夕死” 的。</li></ul></li><li>可以使用选项 “<code>-Xmn</code>“ 设置新生代最大内存大小</li><li>➢这个参数一般使用默认值就可以了。</li></ul><p><img src="/2020/07/11/JVM-04/Survivor.png" alt="年轻代与老年代的关系"></p><p><a href="Plumbr%20Handbook%20Java%20Garbage%20Collection.pdf">参考文档：Plumbr Handbook Java Garbage Collection.pdf</a></p><hr><h2 id="4-图解对象分配过程"><a href="#4-图解对象分配过程" class="headerlink" title="4 图解对象分配过程"></a>4 图解对象分配过程</h2><p>为新对象分配内存是一件非常严谨和复杂的任务，JVM 的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑 GC 执行完内存回收后是否会在内存空间中产生内存碎片。</p><ol><li>new 的对象先放伊甸园区。此区有大小限制。</li><li>当伊甸园的空间填满时，程序又需要创建对象，JVM 的垃圾回收器将对伊甸园区进行垃圾回收 (Minor GC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区。</li><li>然后将伊甸园区中的剩余对象移动到幸存者 0 区。</li><li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者 0 区的，如果没有回收，就会放到幸存者 1 区。</li><li>如果再次经历垃圾回收，此时会重新放回幸存者 0 区，接着再去幸存者 1 区。</li><li>啥时候能去养老区呢？可以设置次数。默认是 15 次。<ul><li>可以设置参数: <code>-XX:MaxTenuringThreshold=&lt;N&gt;</code> 进行设置。</li></ul></li></ol><p><img src="/2020/07/11/JVM-04/%E6%96%B0%E7%94%9F%E4%BB%A3%E5%AF%B9%E8%B1%A1%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E8%BF%87%E7%A8%8B.png" alt="新生代对象内存分配与回收过程"></p><p>当伊甸园区满的时候，会触发 YGC&#x2F;MinorGC，会将伊甸园区和幸存者区 (from 区) 一起回收。但是幸存者区满的时候不会触发 YGC&#x2F;MinorGC。</p><p>总结：</p><p><strong>针对幸存者 s0，s1 区的总结：复制之后有交换，谁空谁是 to</strong>。</p><p><strong>关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不在永久区 &#x2F; 元空间收集</strong>。</p><p>对象分配特殊情况：</p><p><img src="/2020/07/11/JVM-04/%E5%AF%B9%E8%B1%A1%E5%88%86%E9%85%8D%E7%89%B9%E6%AE%8A%E6%83%85%E5%86%B5.png" alt="对象分配特殊情况"></p><p>代码举例与 JVisualVM 演示对象的分配过程：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * -Xms600m -Xmx600m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  17:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapInstanceTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span> [] buffer = <span class="keyword">new</span> <span class="keyword">byte</span> [<span class="keyword">new</span> Random ().nextInt (<span class="number">1024</span> * <span class="number">200</span>)];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;HeapInstanceTest&gt; list = <span class="keyword">new</span> ArrayList&lt;HeapInstanceTest&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            list.add (<span class="keyword">new</span> HeapInstanceTest ());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep (<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace ();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>VisualVM - Visual GC：</p><p><img src="/2020/07/11/JVM-04/VisualVMVisualGC.png" alt="查看年轻区、老年区各时间段内存占用对应的图像走势"></p><p>最后，堆空间中老年区满，没有可用空间来为对象继续分配内存，程序会异常终止：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line"> at com.atguigu.java1.HeapInstanceTest.&lt;init&gt;(HeapInstanceTest.java:<span class="number">12</span>)</span><br><span class="line"> at com.atguigu.java1.HeapInstanceTest.main (HeapInstanceTest.java:<span class="number">17</span>)</span><br></pre></td></tr></table></figure></div><p>常用调优工具：</p><ul><li>JDK 命令行：<code>jmap</code>, <code>jinfo</code>, <code>jstat</code>,<code>javap</code> 等</li><li>Eclipse : Memory Analyzer Tool</li><li>Jconsole</li><li>VisualVM</li><li>Jprofiler</li><li>Java Flight Recorder</li><li>GCViewer</li><li>GC Easy</li></ul><p><a href="https://blog.csdn.net/wytocsdn/article/details/79258247" target="_blank" rel="noopener">在 <code>Idea</code> 中配置 <code>JProfiler</code></a>：</p><ol><li>安装 JProfiler：官网下载安装 <a href="https://www.ej-technologies.com/download/jprofiler/files" target="_blank" rel="noopener">https://www.ej-technologies.com/download/jprofiler/files</a></li><li>安装 JProfiler Idea 插件：在 <code>Idea</code> 插件市场搜索 JProfiler 安装，在插件设置中设置 JProfiler 目录。</li><li>点击 <code>Run</code> 旁边的 JProfiler 图标运行。</li></ol><hr><h2 id="5-Minor-GC-和-Major-GC-和-Full-GC"><a href="#5-Minor-GC-和-Major-GC-和-Full-GC" class="headerlink" title="5 Minor GC 和 Major GC 和 Full GC"></a>5 Minor GC 和 Major GC 和 Full GC</h2><p>JVM 在进行 GC 时，并非每次都对上面三个内存区域（新生代、老年代、方法区）一起回收的，大部分时候回收的都是指新生代。</p><p>针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集 (Partial GC)，一种是整堆收集 (Full GC)</p><ul><li>部分收集：不是完整收集整个 Java 堆的垃圾收集。其中又分为:<ul><li>➢ 新生代收集 (Minor GC &#x2F; Young GC) : 只是新生代（Eden、s0、s1）的垃圾收集</li><li>➢ 老年代收集 (Major GC &#x2F; Old GC) : 只是老年代的垃圾收集。<ul><li>目前，只有 CMS GC 会有单独收集老年代的行为。<ul><li><em>注意，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收</em>。</li></ul></li></ul></li><li>➢ 混合收集 (Mixed GC): 收集整个新生代以及部分老年代的垃圾收集。<ul><li>目前，只有 G1 GC 会有这种行为</li></ul></li></ul></li><li>整堆收集 (Full GC): 收集整个 java 堆和方法区的垃圾收集。</li></ul><hr><h3 id="最简单的分代式GC策略的触发条件"><a href="#最简单的分代式GC策略的触发条件" class="headerlink" title="最简单的分代式GC策略的触发条件"></a>最简单的分代式GC策略的触发条件</h3><ul><li><p>● <strong>年轻代 GC (Minor GC ) 触发机制</strong>:</p><ul><li>➢ 当年轻代空间不足时，就会触发 Minor GC，这里的年轻代满指的是 Eden 代满，Survivor 满不会引发 GC。(每次 Minor GC 会清理年轻代的内存。)</li><li>➢ 因为 Java<strong>对象大多都具备朝生夕灭的特性</strong>，所以 MinorGC 非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</li><li>➢ Minor GC 会引发 STW， 暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行。</li></ul></li><li><p>● <strong>老年代 GC (Major GC&#x2F;Full GC) 触发机制</strong>:</p><ul><li>➢ 指发生在老年代的 GC，对象从老年代消失时，我们说 “Major GC” 或 “Full GC” 发生了。</li><li>➢ 出现了 Major GC， 经常会伴随至少一次的 Minor GC (但非绝对的，在 Parallel Scavenge 收集器的收集策略里就有直接进行 Major GC 的策略选择过程)。<ul><li>也就是在老年代空间不足时，会先尝试触发 Minor GC。如果之后空间还不足，则触发 Major GC</li></ul></li><li>➢ Major GC 的速度一般会比 Minor GC 慢 10 倍以上，STW 的时间更长。</li><li>➢ 如果 Major GC 后，内存还不足，就报 <code>OOM</code> 了。</li></ul></li><li><p>● <strong>Full GC 触发机制: (后面细讲)</strong><br>触发 Full GC 执行的情况有如下五种:  </p><ul><li>(1) 调用 <code>System.gc()</code> 时，系统建议执行 <strong>Full GC</strong>，但是不必然执行</li><li>(2) 老年代空间不足</li><li>(3) 方法区空间不足</li><li>(4) 通过 Minor GC 后进入老年代的平均大小大于老年代的可用内存</li><li>(5) 由 Eden 区、survivor space0 (From Space) 区向 survivor space1 (To Space) 区复制时，对象大小大于 To Space 可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li></ul><p>说明: <strong>Full GC 是开发或调优中尽量要避免的。这样暂时时间会短一些</strong>。</p></li></ul><h3 id="GC举例与日志分析"><a href="#GC举例与日志分析" class="headerlink" title="GC举例与日志分析"></a>GC举例与日志分析</h3><p>测试代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试MinorGC 、 MajorGC、FullGC</span></span><br><span class="line"><span class="comment"> * -Xms9m -Xmx9m -XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  14:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GCTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            String a = <span class="string">"atguigu.com"</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                list.add(a);</span><br><span class="line">                a = a + a;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"遍历次数为："</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>设置 VM options，运行：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">2036</span>K-&gt;<span class="number">496</span>K(<span class="number">2560</span>K)] <span class="number">2036</span>K-&gt;<span class="number">871</span>K(<span class="number">9728</span>K), <span class="number">0.0062912</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.01</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">1964</span>K-&gt;<span class="number">480</span>K(<span class="number">2560</span>K)] <span class="number">2340</span>K-&gt;<span class="number">1682</span>K(<span class="number">9728</span>K), <span class="number">0.0017672</span> secs] [Times: user=<span class="number">0.01</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">1941</span>K-&gt;<span class="number">160</span>K(<span class="number">2560</span>K)] <span class="number">3144</span>K-&gt;<span class="number">2770</span>K(<span class="number">9728</span>K), <span class="number">0.0017537</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Ergonomics)</span> [PSYoungGen: 1008K-&gt;0<span class="title">K</span><span class="params">(<span class="number">2560</span>K)</span>] [ParOldGen: 6834K-&gt;4588<span class="title">K</span><span class="params">(<span class="number">7168</span>K)</span>] 7843K-&gt;4588<span class="title">K</span><span class="params">(<span class="number">9728</span>K)</span>, [Metaspace: 3012K-&gt;3012<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0051738 secs] [Times: user</span>=<span class="number">0.02</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">[GC (Allocation Failure) [PSYoungGen: <span class="number">0</span>K-&gt;<span class="number">0</span>K(<span class="number">2560</span>K)] <span class="number">4588</span>K-&gt;<span class="number">4588</span>K(<span class="number">9728</span>K), <span class="number">0.0009531</span> secs] [Times: user=<span class="number">0.00</span> sys=<span class="number">0.00</span>, real=<span class="number">0.01</span> secs]</span><br><span class="line">[<span class="function">Full <span class="title">GC</span> <span class="params">(Allocation Failure)</span> [PSYoungGen: 0K-&gt;0<span class="title">K</span><span class="params">(<span class="number">2560</span>K)</span>] [ParOldGen: 4588K-&gt;4570<span class="title">K</span><span class="params">(<span class="number">7168</span>K)</span>] 4588K-&gt;4570<span class="title">K</span><span class="params">(<span class="number">9728</span>K)</span>, [Metaspace: 3012K-&gt;3012<span class="title">K</span><span class="params">(<span class="number">1056768</span>K)</span>], 0.0038536 secs] [Times: user</span>=<span class="number">0.02</span> sys=<span class="number">0.00</span>, real=<span class="number">0.00</span> secs]</span><br><span class="line">遍历次数为：<span class="number">16</span></span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">2560</span>K, used <span class="number">136</span>K [<span class="number">0x00000007bfd00000</span>, <span class="number">0x00000007c0000000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">2048</span>K, <span class="number">6</span>% used [<span class="number">0x00000007bfd00000</span>,<span class="number">0x00000007bfd22300</span>,<span class="number">0x00000007bff00000</span>)</span><br><span class="line">  from space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bff80000</span>,<span class="number">0x00000007bff80000</span>,<span class="number">0x00000007c0000000</span>)</span><br><span class="line">  to   space <span class="number">512</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bff00000</span>,<span class="number">0x00000007bff00000</span>,<span class="number">0x00000007bff80000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">7168</span>K, used <span class="number">4570</span>K [<span class="number">0x00000007bf600000</span>, <span class="number">0x00000007bfd00000</span>, <span class="number">0x00000007bfd00000</span>)</span><br><span class="line">  object space <span class="number">7168</span>K, <span class="number">63</span>% used [<span class="number">0x00000007bf600000</span>,<span class="number">0x00000007bfa76938</span>,<span class="number">0x00000007bfd00000</span>)</span><br><span class="line"> Metaspace       used <span class="number">3086</span>K, capacity <span class="number">4496</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 337<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line"> at java.util.Arrays.copyOf(Arrays.java:<span class="number">3332</span>)</span><br><span class="line"> at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:<span class="number">124</span>)</span><br><span class="line"> at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:<span class="number">448</span>)</span><br><span class="line"> at java.lang.StringBuilder.append(StringBuilder.java:<span class="number">136</span>)</span><br><span class="line"> at com.atguigu.java1.GCTest.main(GCTest.java:<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p><em>分析</em>：</p><p><code>[GC (Allocation Failure) [PSYoungGen: 2036K-&gt;496K(2560K)] 2036K-&gt;871K(9728K), 0.0062912 secs] [Times: user=0.01 sys=0.01, real=0.00 secs]</code></p><p>年轻代GC：GC前年轻代 2036K，GC后年轻代496K (年轻代总大小2560K, 2.5M)；GC前堆2036K，GC后堆871K（堆总大小9728K, 9.5M 包括老年代）</p><p>GC后年轻代大小没有变成 0K，因为有一部分对象保存在幸存者区没有被垃圾回收。</p><p><code>[Full GC (Ergonomics) [PSYoungGen: 1008K-&gt;0K(2560K)] [ParOldGen: 6834K-&gt;4588K(7168K)] 7843K-&gt;4588K(9728K), [Metaspace: 3012K-&gt;3012K(1056768K)], 0.0051738 secs] [Times: user=0.02 sys=0.00, real=0.00 secs]</code></p><p>Full GC：GC前年轻代1008K，GC后年轻代0K （年轻代总大小2560K，2.5M）；GC前老年代6834K，GC后老年代4588K （老年代总大小7168K，7M）；GC前堆7834K，GC后堆4588K （堆总大小 9728K, 9.5M ）</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 2560K, used 136K [0x00000007bfd00000, 0x00000007c0000000, 0x00000007c0000000)</span><br><span class="line">  eden space 2048K, 6% used [0x00000007bfd00000,0x00000007bfd22300,0x00000007bff00000)</span><br><span class="line">  from space 512K, 0% used [0x00000007bff80000,0x00000007bff80000,0x00000007c0000000)</span><br><span class="line">  to   space 512K, 0% used [0x00000007bff00000,0x00000007bff00000,0x00000007bff80000)</span><br><span class="line"> ParOldGen       total 7168K, used 4570K [0x00000007bf600000, 0x00000007bfd00000, 0x00000007bfd00000)</span><br><span class="line">  object space 7168K, 63% used [0x00000007bf600000,0x00000007bfa76938,0x00000007bfd00000)</span><br><span class="line"> Metaspace       used 3086K, capacity 4496K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 337K, capacity 388K, committed 512K, reserved 1048576K</span><br></pre></td></tr></table></figure></div><p>年轻代2560K，2.5M ；伊甸园区2M，from、to各0.5M<br>老年代7168K，7 M  </p><p>🤔🤔从上面日志可以看出，堆空间实际上大于设置的参数9M❓</p><hr><iframe width="1015" height="549" src="https://www.youtube.com/embed/vY-gi_7M_Mc?list=PLtGk8Nqe2ZcK0xUtbQjHeX2gqgoOdKJnX" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><hr><h2 id="6-堆空间分代思想"><a href="#6-堆空间分代思想" class="headerlink" title="6 堆空间分代思想"></a>6 堆空间分代思想</h2><p>为什么需要对 Java 堆进行分代？不分代就不能正常工作了吗？</p><ul><li>经研究，不同对象的生命周期不同。70%-99% 的对象是临时对象。<ul><li>➢ 新生代：有 Eden、两块大小相同的 Survivor (又称为 from&#x2F;to， s0&#x2F;s1) 构成，to 总为空。</li><li>➢ 老年代：存放新生代中经历多次 GC 仍然存活的对象。</li></ul></li><li>其实不分代完全可以，分代的唯一理由就是优化 Gc 性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC 的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方， 当 GC 的时候先把这块存储 “朝生夕死” 对象的区域进行回收，这样就会腾出很大的空间出来。</li></ul><hr><h2 id="7-内存分配策略"><a href="#7-内存分配策略" class="headerlink" title="7 内存分配策略"></a>7 内存分配策略</h2><p>如果对象在 Eden 出生并经过第次 MinorGC 后仍然存活，并且能被 Survivor 容纳的话，将被移动到 survivor 空间中，并将对象年龄设为 1。对象在 Survivor 区中每熬过一次 MinorGC，年龄就增加 1 岁，当它的年龄增加到一定<br>程度 (默认为 15 岁，其实每个 JVM、每个 GC 都有所不同) 时，就会被晋升到老年代中。</p><p>对象晋升老年代的年龄阈值，可以通过选项 <code>-XX:MaxTenuringThreshold</code> 来设置</p><p>针对不同年龄段的对象分配原则如下所示:</p><ul><li>● 优先分配到 Eden</li><li>● 大对象直接分配到老年代<ul><li>尽量避免程序中出现过多的大对象</li></ul></li><li>● 长期存活的对象分配到老年代</li><li>● 动态对象年龄判断<ul><li>如果 Survivor 区中相同年龄的所有对象大小的总和大于 Survivor 空间的一半，<strong>年龄大于或等于</strong>该年龄的对象可以直接进入老年代，无须等到 <code>MaxTenuringThreshold</code> 中要求的年龄。</li></ul></li><li>● 空间分配担保<ul><li><code>-XX:HandlePromotionFailure</code></li></ul></li></ul><p>测试：大对象直接分配到老年代</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试：大对象直接进入老年代</span></span><br><span class="line"><span class="comment"> * -Xms60m -Xmx60m -XX:NewRatio=2 -XX:SurvivorRatio=8 -XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  21:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YoungOldAreaTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">20</span>];<span class="comment">//20m</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>设置 VM options 为 <code>-Xms60m -Xmx60m -XX:NewRatio=2 -XX:SurvivorRatio=8 -XX:+PrintGCDetails</code> ，在 Java 8 下运行：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">18432</span>K, used <span class="number">2308</span>K [<span class="number">0x00000007bec00000</span>, <span class="number">0x00000007c0000000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">16384</span>K, <span class="number">14</span>% used [<span class="number">0x00000007bec00000</span>,<span class="number">0x00000007bee41048</span>,<span class="number">0x00000007bfc00000</span>)</span><br><span class="line">  from space <span class="number">2048</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bfe00000</span>,<span class="number">0x00000007bfe00000</span>,<span class="number">0x00000007c0000000</span>)</span><br><span class="line">  to   space <span class="number">2048</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bfc00000</span>,<span class="number">0x00000007bfc00000</span>,<span class="number">0x00000007bfe00000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">40960</span>K, used <span class="number">20480</span>K [<span class="number">0x00000007bc400000</span>, <span class="number">0x00000007bec00000</span>, <span class="number">0x00000007bec00000</span>)</span><br><span class="line">  object space <span class="number">40960</span>K, <span class="number">50</span>% used [<span class="number">0x00000007bc400000</span>,<span class="number">0x00000007bd800010</span>,<span class="number">0x00000007bec00000</span>)</span><br><span class="line"> Metaspace       used <span class="number">3080</span>K, capacity <span class="number">4496</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 337<span class="title">K</span>, <span class="title">capacity</span> 388<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure></div><p>在 JDK1.7 下运行结果如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">18432</span>K, used <span class="number">1967</span>K [<span class="number">0x00000007fec00000</span>, <span class="number">0x0000000800000000</span>, <span class="number">0x0000000800000000</span>)</span><br><span class="line">  eden space <span class="number">16384</span>K, <span class="number">12</span>% used [<span class="number">0x00000007fec00000</span>,<span class="number">0x00000007fedebc28</span>,<span class="number">0x00000007ffc00000</span>)</span><br><span class="line">  from space <span class="number">2048</span>K, <span class="number">0</span>% used [<span class="number">0x00000007ffe00000</span>,<span class="number">0x00000007ffe00000</span>,<span class="number">0x0000000800000000</span>)</span><br><span class="line">  to   space <span class="number">2048</span>K, <span class="number">0</span>% used [<span class="number">0x00000007ffc00000</span>,<span class="number">0x00000007ffc00000</span>,<span class="number">0x00000007ffe00000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">40960</span>K, used <span class="number">20480</span>K [<span class="number">0x00000007fc400000</span>, <span class="number">0x00000007fec00000</span>, <span class="number">0x00000007fec00000</span>)</span><br><span class="line">  object space <span class="number">40960</span>K, <span class="number">50</span>% used [<span class="number">0x00000007fc400000</span>,<span class="number">0x00000007fd800010</span>,<span class="number">0x00000007fec00000</span>)</span><br><span class="line"> PSPermGen       total <span class="number">21504</span>K, used <span class="number">2986</span>K [<span class="number">0x00000007f7200000</span>, <span class="number">0x00000007f8700000</span>, <span class="number">0x00000007fc400000</span>)</span><br><span class="line">  object space <span class="number">21504</span>K, <span class="number">13</span>% used [<span class="number">0x00000007f7200000</span>,<span class="number">0x00000007f74eab58</span>,<span class="number">0x00000007f8700000</span>)</span><br></pre></td></tr></table></figure></div><p>设置了堆空间最小 &#x2F; 大为 60M，新生代与老年代之间的比例为 2:1，伊甸园区与幸存者区之间的比例为 8:1:1，打印 GC 日志详情。新生代（伊甸园区 16M + 两个幸存者区 2M*2）20M，老年代 40M，老年代已用空间 20M，由此可见，伊甸园区容纳不下 20M 的数组，分配的一个 20M 的数组直接进入了老年代。</p><hr><h2 id="8-为对象分配内存：TLAB"><a href="#8-为对象分配内存：TLAB" class="headerlink" title="8 为对象分配内存：TLAB"></a>8 为对象分配内存：TLAB</h2><p><strong>为什么有 TLAB ( Thread Local Allocation Buffer )</strong> ?</p><ul><li>● 堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</li><li>● 由于对象实例的创建在 JVM 中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</li><li>● 为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度。</li></ul><p><strong>什么是 TLAB</strong> ?</p><ul><li>从内存模型而不是垃圾收集的角度，对 Eden 区域继续进行划分，JVM <strong>为每个线程分配了一个私有缓存区域</strong>，它包含在 Eden 空间内。</li><li>多线程同时分配内存时，使用 TLAB 可以避免一系列的<del>非</del>线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为<strong>快速分配</strong>策略。</li><li>据我所知所有 OpenJDK 衍生出来的 JVM 都提供了 TLAB 的设计。</li></ul><p><strong>TLAB 的再说明</strong>:</p><ul><li>尽管不是所有的对象实例都能够在 TLAB 中成功分配内存 (因为空间很小)，但 <strong>JVM 确实是将 TLAB 作为内存分配的首选</strong> （使用命令 <code>jinfo -flag UseTLAB pid</code> 查看 TLAB 是否开启，默认是开启的）。</li><li>在程序中，开发人员可以通过选项 “<code>-XX:UseTLAB</code>“ 设置是否开启 TLAB 空间。</li><li>默认情况下，TLAB 空间的内存非常小，**仅占有整个 Eden 空间的 1%**，可以使用命令 <code>jinfo -flag TLABWasteTargetPercent pid</code> 查看 TLAB 占伊甸园区的百分比，当然我们可以通过选项 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">“<code>-XX:TLABWasteTargetPercent</code>“</a> 设置 TLAB 空间所占用 Eden 空间的百分比大小。</li><li>一旦对象在 TLAB 空间分配内存失败时，JVM 就会尝试着 <strong>通过使用加锁机制</strong> 确保数据操作的原子性，从而直接在 Eden 空间中分配内存。</li></ul><p><img src="/2020/07/11/JVM-04/TLAB.png" alt="对象分配过程：TLAB"></p><hr><h2 id="9-小结堆空间的参数设置"><a href="#9-小结堆空间的参数设置" class="headerlink" title="9 小结堆空间的参数设置"></a>9 小结堆空间的参数设置</h2><p>堆空间的参数设置</p><p>官网说明：<a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p><ul><li><code>-XX:+PrintFlagsInitial</code> : 查看所有的参数的默认初始值</li><li><code>-XX:+PrintFlagsFinal</code> : 查看所有的参数的最终值 (可能会存在修改，不再是初始值)</li><li><code>-Xms</code> : 初始堆空间内存 ( 默认为物理内存的 1&#x2F;64)</li><li><code>-Xmx</code> : 最大堆空间内存 ( 默认为物理内存的 1&#x2F;4)</li><li><code>-Xmn</code> : 设置新生代的大小。(初始值及最大值)</li><li><code>-XX:NewRatio</code> : 配置新生代与老年代在堆结构的占比</li><li><code>-XX:SurvivorRatio</code> : 设置新生代中 Eden 和 S0&#x2F;S1 空间的比例</li><li><code>-XX:MaxTenuringThreshold</code> : 设置新生代垃圾的最大年龄</li><li><code>-XX:+PrintGCDetails</code> : 输出详细的 GC 处理日志<ul><li>➢ 打印 GC 简要信息: ① <code>-XX:+PrintGC</code> ② <code>-verbose:gc</code></li></ul></li><li><code>-XX:HandlePromotionFailure</code> : 是否设置空间分配担保</li></ul><p><strong>关于参数</strong> <code>-XX:SurvivorRatio</code></p><p>年轻代中，若伊甸园区设置过大，幸存者区较小，则容易导致在 YGC &#x2F; Minor GC 时，伊甸园区中剩余的对象直接晋升老年代，则分代的意义就不大了。</p><p>若伊甸园区设置过小，幸存者区过大，则容易导致 YGC &#x2F; Minor GC 的频率增加，更加频繁的垃圾回收会增加 STW 的总体时间，影响程序的性能。</p><p>从性能调优的角度，都应该降低 GC 的频率。</p><p><strong>关于参数</strong> <code>-XX:HandlePromotionFailure</code></p><p>在发生 Minor GC 之前，虚拟机会<strong>检查老年代最大可用的连续空间是否大于新生代所有对象的总空间</strong>。</p><ul><li>如果大于，则此次 Minor GC 是安全的</li><li>如果小于，则虚拟机会查看 <code>-XX:HandlePromotionFailure</code> 设置值是否允许担保失败。<ul><li>如果 <code>HandlePromotionFailure</code>&#x3D;true， 那么会继续<strong>检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小</strong>。<ul><li>如果大于，则尝试进行一次 Minor GC，但这次 Minor GC 依然是有风险的；</li><li>如果小于，则改为进行一次 Full GC。</li></ul></li><li>如果 <code>HandlePromotionFailure</code>&#x3D;false， 则改为进行一次 Full GC。</li></ul></li></ul><p>在 JDK6 Update24 之后，HandlePromotionFailure 参数不会再影响到虛拟机的空间分配担保策略，观察 OpenJDK 中的源码变化，虽然源码中还定义了 HandlePromotionFailure 参数，但是在代码中已经不会再使用它。JDK6 Update24 之后的规则变为<strong>只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行 Minor GC， 否则将进行 Full GC</strong>。</p><hr><h2 id="X-堆是分配对象的唯一选择吗"><a href="#X-堆是分配对象的唯一选择吗" class="headerlink" title="X 堆是分配对象的唯一选择吗"></a>X 堆是分配对象的唯一选择吗</h2><p><strong>堆是分配对象的唯一选择吗</strong> ？</p><p>在《深入理解 Java 虚拟机》中关于 Java 堆内存有这样一段描述:</p><p>随着 JIT 编译期的发展与<strong>逃逸分析技术</strong>逐渐成熟，<strong>栈上分配、标量替换优化技术</strong>将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么 “绝对” 了。</p><p>在 Java 虚拟机中，对象是在 Java 堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是如果经过<strong>逃逸分析 (Escape Analysis) 后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配</strong>。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。</p><p>此外，前面提到的基于 OpenJDK 深度定制的 TaoBaoVM, 其中创新的 GCIH (GC invisible heap) 技术实现 off-heap, 将生命周期较长的 Java 对象从 heap 中移至 heap 外，并且 GC 不能管理 GCIH 内部的 Java 对象，以此达到降低 GC 的回收频率和提升 GC 的回收效率的目的。</p><h3 id="逃逸分析概述"><a href="#逃逸分析概述" class="headerlink" title="逃逸分析概述"></a>逃逸分析概述</h3><ul><li>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</li><li>这是一种可以有效减少Java程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</li><li>通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</li><li>逃逸分析的基本行为就是分析对象动态作用域:;<ul><li>➢ 当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li><li>➢ 当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li></ul></li></ul><p>例如：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">my_method</span><span class="params">()</span></span>&#123;</span><br><span class="line">    V v = <span class="keyword">new</span> V();</span><br><span class="line">    <span class="comment">// use v</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    v = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>没有发生逃逸的现象，则可以分配到栈上，随着方法执行的结束，栈空间就被移除。</p><p>由例如，</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title">createStringBuffer</span><span class="params">(String s2, String s2)</span></span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述代码中，如果想要 StringBuffer sb 不逃出方法，可以这样写：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createStringBuffer</span><span class="params">(String s2, String s2)</span></span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>逃逸分析的各种情况：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 逃逸分析</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  如何快速的判断是否发生了逃逸分析，大家就看new的对象实体是否有可能在方法外被调用。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 下午 4:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EscapeAnalysis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EscapeAnalysis obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法返回EscapeAnalysis对象，发生逃逸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EscapeAnalysis <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj == <span class="keyword">null</span>? <span class="keyword">new</span> EscapeAnalysis() : obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    为成员属性赋值，发生逃逸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = <span class="keyword">new</span> EscapeAnalysis();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//思考：如果当前的obj引用声明为static的？仍然会发生逃逸。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    对象的作用域仅在当前方法中有效，没有发生逃逸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useEscapeAnalysis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EscapeAnalysis e = <span class="keyword">new</span> EscapeAnalysis();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    引用成员变量的值，发生逃逸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useEscapeAnalysis1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        EscapeAnalysis e = getInstance();</span><br><span class="line">        <span class="comment">//getInstance().xxx()同样会发生逃逸</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>参数设置:</p><ul><li>● 在 JDK 6u23 版本之后，HotSpot 中默认就已经开启了逃逸分析。</li><li>● 如果使用的是较早的版本，开发人员则可以通过:<ul><li>➢ 选项 “<code>-XX:+DoEscapeAnalysis</code>“ 显式开启逃逸分析</li><li>➢ 通过选项 “<code>-XX:+PrintEscapeAnalysis</code>“ 查看逃逸分析的筛选结果。<ul><li>（实测这个参数不被识别，报错 <code>Unrecognized VM option &#39;PrintEscapeAnalysis&#39;</code> 创建 JVM 失败，需要使用带 debug 的 JDK，例如第三方编译的 <code>java-1.8.0-openjdk-fastdebug-1.8.0.111-1.b15.ojdkbuild.windows.x86_64.zip</code> ）</li></ul></li></ul></li></ul><p>结论：<strong>开发中能使用局部变量的，就不要使用在方法外定义。</strong></p><h3 id="逃逸分析之代码优化"><a href="#逃逸分析之代码优化" class="headerlink" title="逃逸分析之代码优化"></a>逃逸分析之代码优化</h3><p>使用逃逸分析，编译器可以对代码做如下优化:</p><ul><li>一、<strong>栈上分配</strong>。将堆分配转化为栈分配。如果-一个对象在子程序中被分配, 要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配。</li><li>二、<strong>同步省略</strong>。如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</li><li>三、<strong>分离对象或标量替换</strong>。有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分(或全部)可以不存储在内存，而是存储在 CPU 寄存器中。</li></ul><h4 id="代码优化之栈上分配"><a href="#代码优化之栈上分配" class="headerlink" title="代码优化之栈上分配"></a>代码优化之栈上分配</h4><ul><li>JIT 编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</li><li>常见的栈上分配的场景<ul><li>➢ 在逃逸分析中，已经说明了。逃逸出方法：分别是给成员变量赋值、方法返回值、实例引用传递。</li></ul></li></ul><p>代码演示：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 栈上分配测试</span></span><br><span class="line"><span class="comment"> * -Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  10:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackAllocation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查看执行时间</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"花费的时间为： "</span> + (end - start) + <span class="string">" ms"</span>);</span><br><span class="line">        <span class="comment">// 为了方便查看堆内存中对象个数，线程sleep</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();<span class="comment">//未发生逃逸</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>两种情况下运行，使用 VisualVM Sampler 查看 Memory 情况。</p><p>设置 VM options 为 <code>-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails</code>, 运行;</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">花费的时间为： <span class="number">97</span> ms</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">305664</span>K, used <span class="number">188744</span>K [<span class="number">0x00000007aab00000</span>, <span class="number">0x00000007c0000000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">262144</span>K, <span class="number">72</span>% used [<span class="number">0x00000007aab00000</span>,<span class="number">0x00000007b63521c8</span>,<span class="number">0x00000007bab00000</span>)</span><br><span class="line">  from space <span class="number">43520</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bd580000</span>,<span class="number">0x00000007bd580000</span>,<span class="number">0x00000007c0000000</span>)</span><br><span class="line">  to   space <span class="number">43520</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bab00000</span>,<span class="number">0x00000007bab00000</span>,<span class="number">0x00000007bd580000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">699392</span>K, used <span class="number">0</span>K [<span class="number">0x0000000780000000</span>, <span class="number">0x00000007aab00000</span>, <span class="number">0x00000007aab00000</span>)</span><br><span class="line">  object space <span class="number">699392</span>K, <span class="number">0</span>% used [<span class="number">0x0000000780000000</span>,<span class="number">0x0000000780000000</span>,<span class="number">0x00000007aab00000</span>)</span><br><span class="line"> Metaspace       used <span class="number">3608</span>K, capacity <span class="number">4540</span>K, committed <span class="number">4864</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 399<span class="title">K</span>, <span class="title">capacity</span> 428<span class="title">K</span>, <span class="title">committed</span> 512<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure></div><p><img src="/2020/07/11/JVM-04/StackAllocation1.png" alt="关闭逃逸分析"></p><p>对比 VM options 为 <code>-Xmx1G -Xms1G -XX:+DoEscapeAnalysis -XX:+PrintGCDetails</code>, 运行。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">花费的时间为： <span class="number">4</span> ms</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">305664</span>K, used <span class="number">78643</span>K [<span class="number">0x00000007aab00000</span>, <span class="number">0x00000007c0000000</span>, <span class="number">0x00000007c0000000</span>)</span><br><span class="line">  eden space <span class="number">262144</span>K, <span class="number">30</span>% used [<span class="number">0x00000007aab00000</span>,<span class="number">0x00000007af7ccfd8</span>,<span class="number">0x00000007bab00000</span>)</span><br><span class="line">  from space <span class="number">43520</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bd580000</span>,<span class="number">0x00000007bd580000</span>,<span class="number">0x00000007c0000000</span>)</span><br><span class="line">  to   space <span class="number">43520</span>K, <span class="number">0</span>% used [<span class="number">0x00000007bab00000</span>,<span class="number">0x00000007bab00000</span>,<span class="number">0x00000007bd580000</span>)</span><br><span class="line"> ParOldGen       total <span class="number">699392</span>K, used <span class="number">0</span>K [<span class="number">0x0000000780000000</span>, <span class="number">0x00000007aab00000</span>, <span class="number">0x00000007aab00000</span>)</span><br><span class="line">  object space <span class="number">699392</span>K, <span class="number">0</span>% used [<span class="number">0x0000000780000000</span>,<span class="number">0x0000000780000000</span>,<span class="number">0x00000007aab00000</span>)</span><br><span class="line"> Metaspace       used <span class="number">8857</span>K, capacity <span class="number">9194</span>K, committed <span class="number">9344</span>K, reserved <span class="number">1056768</span>K</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">space</span>    <span class="title">used</span> 1037<span class="title">K</span>, <span class="title">capacity</span> 1132<span class="title">K</span>, <span class="title">committed</span> 1152<span class="title">K</span>, <span class="title">reserved</span> 1048576<span class="title">K</span></span></span><br></pre></td></tr></table></figure></div><p><img src="/2020/07/11/JVM-04/StackAllocation2.png" alt="开启逃逸分析"></p><p>从上面可以看出是否开启逃逸分析时的内存占用情况，开启了逃逸分析内存占用明显降低，由于使用了栈上分配，不用维护 1000 万个 User 对象了，而且创建 1000 万个 User 对象所用时间也明显降低。</p><p>在 Windows (使用的是上面提到的 fastdebug JDK，否则 <code>+PrintEscapeAnalysis</code> 不可用) 中运行上述程序，打印逃逸分析日志：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\yan\java&gt; java <span class="literal">-Xmx1G</span> <span class="literal">-Xms1G</span> <span class="literal">-XX</span>:+DoEscapeAnalysis <span class="literal">-XX</span>:+PrintGCDetails <span class="literal">-XX</span>:+PrintEscapeAnalysis <span class="string">'StackAllocation'</span></span><br><span class="line"></span><br><span class="line">======== Connection graph <span class="keyword">for</span>  StackAllocation::alloc</span><br><span class="line">JavaObject NoEscape(NoEscape) [ [ <span class="number">36</span> ]]   <span class="number">24</span>    Allocate        ===  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">1</span> ( <span class="number">22</span>  <span class="number">20</span>  <span class="number">21</span>  <span class="number">1</span>  <span class="number">1</span> ) [[ <span class="number">25</span>  <span class="number">26</span>  <span class="number">27</span>  <span class="number">34</span>  <span class="number">35</span>  <span class="number">36</span> ]]  rawptr:NotNull ( int:&gt;=<span class="number">0</span>, java/lang/Object:NotNull *, bool, top ) StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> !jvms: StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span></span><br><span class="line">LocalVar [ <span class="number">24</span><span class="type">P</span> [ ]]   <span class="number">36</span>        Proj    ===  <span class="number">24</span>  [[ <span class="number">37</span> ]] <span class="comment">#5 !jvms: StackAllocation::alloc @ bci:0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======== Connection graph <span class="keyword">for</span>  StackAllocation::main</span><br><span class="line">JavaObject NoEscape(NoEscape) [ [ <span class="number">119</span> ]]   <span class="number">107</span>  Allocate        ===  <span class="number">86</span>  <span class="number">76</span>  <span class="number">103</span>  <span class="number">8</span>  <span class="number">1</span> ( <span class="number">32</span>  <span class="number">105</span>  <span class="number">20</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">29</span>  <span class="number">1</span>  <span class="number">79</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span> ) [[ <span class="number">108</span>  <span class="number">109</span>  <span class="number">110</span>  <span class="number">117</span>  <span class="number">118</span>  <span class="number">119</span> ]]  rawptr:NotNull ( int:&gt;=<span class="number">0</span>, java/lang/Object:NotNull *, bool, top ) StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> StackAllocation::main <span class="selector-tag">@</span> bci:<span class="number">12</span> !jvms: StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> StackAllocation::main <span class="selector-tag">@</span> bci:<span class="number">12</span></span><br><span class="line">LocalVar [ <span class="number">107</span><span class="type">P</span> [ ]]   <span class="number">119</span>      Proj    ===  <span class="number">107</span>  [[ <span class="number">120</span> ]] <span class="comment">#5 !jvms: StackAllocation::alloc @ bci:0 StackAllocation::main @ bci:12</span></span><br><span class="line"></span><br><span class="line">花费的时间为： <span class="number">15</span> ms</span><br><span class="line"></span><br><span class="line">======== Connection graph <span class="keyword">for</span>  StackAllocation::main</span><br><span class="line">JavaObject NoEscape(NoEscape) [ [ <span class="number">98</span> ]]   <span class="number">86</span>    Allocate        ===  <span class="number">366</span>  <span class="number">68</span>  <span class="number">358</span>  <span class="number">8</span>  <span class="number">1</span> ( <span class="number">84</span>  <span class="number">83</span>  <span class="number">26</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">24</span>  <span class="number">1</span>  <span class="number">70</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span> ) [[ <span class="number">87</span>  <span class="number">88</span>  <span class="number">89</span>  <span class="number">96</span>  <span class="number">97</span>  <span class="number">98</span> ]]  rawptr:NotNull ( int:&gt;=<span class="number">0</span>, java/lang/Object:NotNull *, bool, top ) StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> StackAllocation::main <span class="selector-tag">@</span> bci:<span class="number">12</span> !jvms: StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> StackAllocation::main <span class="selector-tag">@</span> bci:<span class="number">12</span></span><br><span class="line">LocalVar [ <span class="number">86</span><span class="type">P</span> [ ]]   <span class="number">98</span>        Proj    ===  <span class="number">86</span>  [[ <span class="number">99</span> ]] <span class="comment">#5 !jvms: StackAllocation::alloc @ bci:0 StackAllocation::main @ bci:12</span></span><br><span class="line"></span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">305664</span>K, used <span class="number">36700</span>K [<span class="number">0</span><span class="type">x00000000eab00000</span>, <span class="number">0</span><span class="type">x0000000100000000</span>, <span class="number">0</span><span class="type">x0000000100000000</span>)</span><br><span class="line">  <span class="type">eden</span> <span class="type">space</span> <span class="number">262144</span><span class="type">K</span>, <span class="number">14</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000eab00000</span>,<span class="number">0</span><span class="type">x00000000eced7188</span>,<span class="number">0</span><span class="type">x00000000fab00000</span>)</span><br><span class="line">  <span class="type">from</span> <span class="type">space</span> <span class="number">43520</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000fd580000</span>,<span class="number">0</span><span class="type">x00000000fd580000</span>,<span class="number">0</span><span class="type">x0000000100000000</span>)</span><br><span class="line">  <span class="type">to</span>   <span class="type">space</span> <span class="number">43520</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000fab00000</span>,<span class="number">0</span><span class="type">x00000000fab00000</span>,<span class="number">0</span><span class="type">x00000000fd580000</span>)</span><br><span class="line"> <span class="type">ParOldGen</span>       <span class="type">total</span> <span class="number">699392</span><span class="type">K</span>, <span class="type">used</span> <span class="number">0</span><span class="type">K</span> [<span class="number">0</span><span class="type">x00000000c0000000</span>, <span class="number">0</span><span class="type">x00000000eab00000</span>, <span class="number">0</span><span class="type">x00000000eab00000</span>)</span><br><span class="line">  <span class="type">object</span> <span class="type">space</span> <span class="number">699392</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000c0000000</span>,<span class="number">0</span><span class="type">x00000000c0000000</span>,<span class="number">0</span><span class="type">x00000000eab00000</span>)</span><br><span class="line"> <span class="type">Metaspace</span>       <span class="type">used</span> <span class="number">2885</span><span class="type">K</span>, <span class="type">capacity</span> <span class="number">4486</span><span class="type">K</span>, <span class="type">committed</span> <span class="number">4864</span><span class="type">K</span>, <span class="type">reserved</span> <span class="number">1056768</span><span class="type">K</span></span><br><span class="line">  <span class="type">class</span> <span class="type">space</span>    <span class="type">used</span> <span class="number">273</span><span class="type">K</span>, <span class="type">capacity</span> <span class="number">386</span><span class="type">K</span>, <span class="type">committed</span> <span class="number">512</span><span class="type">K</span>, <span class="type">reserved</span> <span class="number">1048576</span><span class="type">K</span></span><br><span class="line"></span><br><span class="line"><span class="type">PS</span> <span class="type">C</span>:\<span class="type">Users</span>\<span class="type">yan</span>\<span class="type">java</span>&gt; <span class="type">java</span> -<span class="type">Xmx1G</span> -<span class="type">Xms1G</span> -<span class="type">XX</span>:-<span class="type">DoEscapeAnalysis</span> -<span class="type">XX</span>:+<span class="type">PrintGCDetails</span> -<span class="type">XX</span>:+<span class="type">PrintEscapeAnalysis</span> <span class="string">'StackAllocation'</span></span><br><span class="line">花费的时间为： <span class="number">47</span> <span class="type">ms</span></span><br><span class="line"><span class="type">Heap</span></span><br><span class="line"> <span class="type">PSYoungGen</span>      <span class="type">total</span> <span class="number">305664</span><span class="type">K</span>, <span class="type">used</span> <span class="number">167772</span><span class="type">K</span> [<span class="number">0</span><span class="type">x00000000eab00000</span>, <span class="number">0</span><span class="type">x0000000100000000</span>, <span class="number">0</span><span class="type">x0000000100000000</span>)</span><br><span class="line">  <span class="type">eden</span> <span class="type">space</span> <span class="number">262144</span><span class="type">K</span>, <span class="number">64</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000eab00000</span>,<span class="number">0</span><span class="type">x00000000f4ed72c8</span>,<span class="number">0</span><span class="type">x00000000fab00000</span>)</span><br><span class="line">  <span class="type">from</span> <span class="type">space</span> <span class="number">43520</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000fd580000</span>,<span class="number">0</span><span class="type">x00000000fd580000</span>,<span class="number">0</span><span class="type">x0000000100000000</span>)</span><br><span class="line">  <span class="type">to</span>   <span class="type">space</span> <span class="number">43520</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000fab00000</span>,<span class="number">0</span><span class="type">x00000000fab00000</span>,<span class="number">0</span><span class="type">x00000000fd580000</span>)</span><br><span class="line"> <span class="type">ParOld</span></span><br></pre></td></tr></table></figure></div><p>如果将 heap 的大小设置为 256M , 并且不使用逃逸分析，可以看到发生了 GC：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\yan\java&gt; java <span class="literal">-Xmx256M</span> <span class="literal">-Xms256M</span> <span class="literal">-XX</span>:<span class="literal">-DoEscapeAnalysis</span> <span class="literal">-XX</span>:+PrintGCDetails <span class="literal">-XX</span>:+PrintEscapeAnalysis <span class="string">'StackAllocation'</span></span><br><span class="line">[<span class="type">GC</span> (<span class="type">Allocation</span> <span class="type">Failure</span>) [<span class="type">PSYoungGen</span>: <span class="number">65536</span><span class="type">K</span>-&gt;<span class="number">760</span><span class="type">K</span>(<span class="number">76288</span><span class="type">K</span>)] <span class="number">65536</span><span class="type">K</span>-&gt;<span class="number">768</span><span class="type">K</span>(<span class="number">251392</span><span class="type">K</span>), <span class="number">0.0093114</span> <span class="type">secs</span>] [<span class="type">Times</span>: <span class="type">user</span>=<span class="number">0.00</span> <span class="type">sys</span>=<span class="number">0.00</span>, <span class="type">real</span>=<span class="number">0.00</span> <span class="type">secs</span>]</span><br><span class="line">[<span class="type">GC</span> (<span class="type">Allocation</span> <span class="type">Failure</span>) [<span class="type">PSYoungGen</span>: <span class="number">66296</span><span class="type">K</span>-&gt;<span class="number">688</span><span class="type">K</span>(<span class="number">76288</span><span class="type">K</span>)] <span class="number">66304</span><span class="type">K</span>-&gt;<span class="number">696</span><span class="type">K</span>(<span class="number">251392</span><span class="type">K</span>), <span class="number">0.0071857</span> <span class="type">secs</span>] [<span class="type">Times</span>: <span class="type">user</span>=<span class="number">0.02</span> <span class="type">sys</span>=<span class="number">0.00</span>, <span class="type">real</span>=<span class="number">0.02</span> <span class="type">secs</span>]</span><br><span class="line">花费的时间为： <span class="number">63</span> ms</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">76288</span>K, used <span class="number">29524</span>K [<span class="number">0</span><span class="type">x00000000fab00000</span>, <span class="number">0</span><span class="type">x0000000100000000</span>, <span class="number">0</span><span class="type">x0000000100000000</span>)</span><br><span class="line">  <span class="type">eden</span> <span class="type">space</span> <span class="number">65536</span><span class="type">K</span>, <span class="number">44</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000fab00000</span>,<span class="number">0</span><span class="type">x00000000fc729048</span>,<span class="number">0</span><span class="type">x00000000feb00000</span>)</span><br><span class="line">  <span class="type">from</span> <span class="type">space</span> <span class="number">10752</span><span class="type">K</span>, <span class="number">6</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000ff580000</span>,<span class="number">0</span><span class="type">x00000000ff62c040</span>,<span class="number">0</span><span class="type">x0000000100000000</span>)</span><br><span class="line">  <span class="type">to</span>   <span class="type">space</span> <span class="number">10752</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000feb00000</span>,<span class="number">0</span><span class="type">x00000000feb00000</span>,<span class="number">0</span><span class="type">x00000000ff580000</span>)</span><br><span class="line"> <span class="type">ParOldGen</span>       <span class="type">total</span> <span class="number">175104</span><span class="type">K</span>, <span class="type">used</span> <span class="number">8</span><span class="type">K</span> [<span class="number">0</span><span class="type">x00000000f0000000</span>, <span class="number">0</span><span class="type">x00000000fab00000</span>, <span class="number">0</span><span class="type">x00000000fab00000</span>)</span><br><span class="line">  <span class="type">object</span> <span class="type">space</span> <span class="number">175104</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000f0000000</span>,<span class="number">0</span><span class="type">x00000000f0002000</span>,<span class="number">0</span><span class="type">x00000000fab00000</span>)</span><br><span class="line"> <span class="type">Metaspace</span>       <span class="type">used</span> <span class="number">2885</span><span class="type">K</span>, <span class="type">capacity</span> <span class="number">4486</span><span class="type">K</span>, <span class="type">committed</span> <span class="number">4864</span><span class="type">K</span>, <span class="type">reserved</span> <span class="number">1056768</span><span class="type">K</span></span><br><span class="line">  <span class="type">class</span> <span class="type">space</span>    <span class="type">used</span> <span class="number">273</span><span class="type">K</span>, <span class="type">capacity</span> <span class="number">386</span><span class="type">K</span>, <span class="type">committed</span> <span class="number">512</span><span class="type">K</span>, <span class="type">reserved</span> <span class="number">1048576</span><span class="type">K</span></span><br></pre></td></tr></table></figure></div><p>如果将 heap 的大小设置为 256M , 开启使用逃逸分析，可以看到没有发生 GC ：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\yan\java&gt; java <span class="literal">-Xmx256M</span> <span class="literal">-Xms256M</span> <span class="literal">-XX</span>:+DoEscapeAnalysis <span class="literal">-XX</span>:+PrintGCDetails <span class="literal">-XX</span>:+PrintEscapeAnalysis <span class="string">'StackAllocation'</span></span><br><span class="line"></span><br><span class="line">======== Connection graph <span class="keyword">for</span>  StackAllocation::alloc</span><br><span class="line">JavaObject NoEscape(NoEscape) [ [ <span class="number">36</span> ]]   <span class="number">24</span>    Allocate        ===  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">1</span> ( <span class="number">22</span>  <span class="number">20</span>  <span class="number">21</span>  <span class="number">1</span>  <span class="number">1</span> ) [[ <span class="number">25</span>  <span class="number">26</span>  <span class="number">27</span>  <span class="number">34</span>  <span class="number">35</span>  <span class="number">36</span> ]]  rawptr:NotNull ( int:&gt;=<span class="number">0</span>, java/lang/Object:NotNull *, bool, top ) StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> !jvms: StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span></span><br><span class="line">LocalVar [ <span class="number">24</span><span class="type">P</span> [ ]]   <span class="number">36</span>        Proj    ===  <span class="number">24</span>  [[ <span class="number">37</span> ]] <span class="comment">#5 !jvms: StackAllocation::alloc @ bci:0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======== Connection graph <span class="keyword">for</span>  StackAllocation::main</span><br><span class="line">JavaObject NoEscape(NoEscape) [ [ <span class="number">119</span> ]]   <span class="number">107</span>  Allocate        ===  <span class="number">86</span>  <span class="number">76</span>  <span class="number">103</span>  <span class="number">8</span>  <span class="number">1</span> ( <span class="number">32</span>  <span class="number">105</span>  <span class="number">20</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">29</span>  <span class="number">1</span>  <span class="number">79</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span> ) [[ <span class="number">108</span>  <span class="number">109</span>  <span class="number">110</span>  <span class="number">117</span>  <span class="number">118</span>  <span class="number">119</span> ]]  rawptr:NotNull ( int:&gt;=<span class="number">0</span>, java/lang/Object:NotNull *, bool, top ) StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> StackAllocation::main <span class="selector-tag">@</span> bci:<span class="number">12</span> !jvms: StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> StackAllocation::main <span class="selector-tag">@</span> bci:<span class="number">12</span></span><br><span class="line">LocalVar [ <span class="number">107</span><span class="type">P</span> [ ]]   <span class="number">119</span>      Proj    ===  <span class="number">107</span>  [[ <span class="number">120</span> ]] <span class="comment">#5 !jvms: StackAllocation::alloc @ bci:0 StackAllocation::main @ bci:12</span></span><br><span class="line"></span><br><span class="line">花费的时间为： <span class="number">31</span> ms</span><br><span class="line">======== Connection graph <span class="keyword">for</span></span><br><span class="line"> StackAllocation::main</span><br><span class="line">JavaObject NoEscape(NoEscape) [ [ <span class="number">98</span> ]]   <span class="number">86</span>    Allocate        ===  <span class="number">366</span>  <span class="number">68</span>  <span class="number">358</span>  <span class="number">8</span>  <span class="number">1</span> ( <span class="number">84</span>  <span class="number">83</span>  <span class="number">26</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">24</span>  <span class="number">1</span>  <span class="number">70</span>  <span class="number">1</span>  <span class="number">1</span>  <span class="number">1</span> ) [[ <span class="number">87</span>  <span class="number">88</span>  <span class="number">89</span>  <span class="number">96</span>  <span class="number">97</span>  <span class="number">98</span> ]]  rawptr:NotNull ( int:&gt;=<span class="number">0</span>, java/lang/Object:NotNull *, bool, top ) StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> StackAllocation::main <span class="selector-tag">@</span> bci:<span class="number">12</span> !jvms: StackAllocation::alloc <span class="selector-tag">@</span> bci:<span class="number">0</span> StackAllocation::main <span class="selector-tag">@</span> bci:<span class="number">12</span></span><br><span class="line">LocalVar [ <span class="number">86</span><span class="type">P</span> [ ]]   <span class="number">98</span>        Proj    ===  <span class="number">86</span>  [[ <span class="number">99</span> ]] <span class="comment">#5 !jvms: StackAllocation::alloc @ bci:0 StackAllocation::main @ bci:12</span></span><br><span class="line"></span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total <span class="number">76288</span>K, used <span class="number">26214</span>K [<span class="number">0</span><span class="type">x00000000fab00000</span>, <span class="number">0</span><span class="type">x0000000100000000</span>, <span class="number">0</span><span class="type">x0000000100000000</span>)</span><br><span class="line">  <span class="type">eden</span> <span class="type">space</span> <span class="number">65536</span><span class="type">K</span>, <span class="number">40</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000fab00000</span>,<span class="number">0</span><span class="type">x00000000fc499a88</span>,<span class="number">0</span><span class="type">x00000000feb00000</span>)</span><br><span class="line">  <span class="type">from</span> <span class="type">space</span> <span class="number">10752</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000ff580000</span>,<span class="number">0</span><span class="type">x00000000ff580000</span>,<span class="number">0</span><span class="type">x0000000100000000</span>)</span><br><span class="line">  <span class="type">to</span>   <span class="type">space</span> <span class="number">10752</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000feb00000</span>,<span class="number">0</span><span class="type">x00000000feb00000</span>,<span class="number">0</span><span class="type">x00000000ff580000</span>)</span><br><span class="line"> <span class="type">ParOldGen</span>       <span class="type">total</span> <span class="number">175104</span><span class="type">K</span>, <span class="type">used</span> <span class="number">0</span><span class="type">K</span> [<span class="number">0</span><span class="type">x00000000f0000000</span>, <span class="number">0</span><span class="type">x00000000fab00000</span>, <span class="number">0</span><span class="type">x00000000fab00000</span>)</span><br><span class="line">  <span class="type">object</span> <span class="type">space</span> <span class="number">175104</span><span class="type">K</span>, <span class="number">0</span>% <span class="type">used</span> [<span class="number">0</span><span class="type">x00000000f0000000</span>,<span class="number">0</span><span class="type">x00000000f0000000</span>,<span class="number">0</span><span class="type">x00000000fab00000</span>)</span><br><span class="line"> <span class="type">Metaspace</span>       <span class="type">used</span> <span class="number">2885</span><span class="type">K</span>, <span class="type">capacity</span> <span class="number">4486</span><span class="type">K</span>, <span class="type">committed</span> <span class="number">4864</span><span class="type">K</span>, <span class="type">reserved</span> <span class="number">1056768</span><span class="type">K</span></span><br><span class="line">  <span class="type">class</span> <span class="type">space</span>    <span class="type">used</span> <span class="number">273</span><span class="type">K</span>, <span class="type">capacity</span> <span class="number">386</span><span class="type">K</span>, <span class="type">committed</span> <span class="number">512</span><span class="type">K</span>, <span class="type">reserved</span> <span class="number">1048576</span><span class="type">K</span></span><br><span class="line"><span class="type">PS</span> <span class="type">C</span>:\<span class="type">Users</span>\<span class="type">yan</span>\<span class="type">java</span>&gt;</span><br></pre></td></tr></table></figure></div><h4 id="代码优化之同步省略（消除）"><a href="#代码优化之同步省略（消除）" class="headerlink" title="代码优化之同步省略（消除）"></a>代码优化之同步省略（消除）</h4><ul><li>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</li><li>在动态编译同步块的时候，JIT 编译器可以借助逃逸分析来<strong>判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程</strong>。如果（是上述情况、）没有（被发布到其他线程），那么 JIT 编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫<strong>锁消除</strong>。</li></ul><p>如以下代码:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object hollis = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">synchronized</span>(hollis)&#123;</span><br><span class="line">        System.out.println(hollis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>代码中对 hollis 这个对象进行加锁，但是 hollis 对象的生命周期只在 f() 方法中，并不会被其他线程所访问到，所以在 JIT 编译阶段就会被优化掉。优化成:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Object hollis = <span class="keyword">new</span> Object();</span><br><span class="line">    System.out.println(hollis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>实际上，上面这么写也起不到同步作用，因为使用本地局部变量当作锁对象，每个进程调用这个方法都会 new 一个新的锁对象，从而每个线程所使用的对象监视器都是不同的，起不到同步的作用。<br>而且，上面那种写法 javac 编译阶段生成的字节码中还是会有同步的字节码指令生成 （ <code>monitorenter</code> 和 <code>monitorexit</code> ）。f() 对应字节码指令如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> 0 new #2 &lt;java/lang/Object&gt;</span><br><span class="line"> <span class="number">3</span> dup</span><br><span class="line"> 4 invokespecial #1 &lt;java/lang/Object.&lt;init&gt;&gt;</span><br><span class="line"> <span class="number">7</span> astore_1</span><br><span class="line"> <span class="number">8</span> aload_1</span><br><span class="line"> <span class="number">9</span> dup</span><br><span class="line"><span class="number">10</span> astore_2</span><br><span class="line"><span class="number">11</span> monitorenter</span><br><span class="line">12 getstatic #3 &lt;java/lang/System.out&gt;</span><br><span class="line"><span class="number">15</span> aload_1</span><br><span class="line">16 invokevirtual #4 &lt;java/io/PrintStream.println&gt;</span><br><span class="line"><span class="number">19</span> aload_2</span><br><span class="line"><span class="number">20</span> monitorexit</span><br><span class="line"><span class="number">21</span> goto <span class="number">29</span> (+<span class="number">8</span>)</span><br><span class="line"><span class="number">24</span> astore_3</span><br><span class="line"><span class="number">25</span> aload_2</span><br><span class="line"><span class="number">26</span> monitorexit</span><br><span class="line"><span class="number">27</span> aload_3</span><br><span class="line"><span class="number">28</span> athrow</span><br><span class="line"><span class="number">29</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></div><h4 id="🌿-代码优化之标量替换"><a href="#🌿-代码优化之标量替换" class="headerlink" title="🌿 代码优化之标量替换"></a>🌿 代码优化之标量替换</h4><p><strong>标量 (Scalar)</strong> 是指一个无法再分解成更小的数据的数据。Java 中的原始数据类型就是标量。</p><p>相对的，那些还可以分解的数据叫做<strong>聚合量 (Aggregate)</strong> ，Java 中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p><p>在 JIT 阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过 JIT 优化，就会把这个对象拆解成若千个其中包含的若干个成员变量来代替。这个过程就是<strong>标量替换</strong>。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    alloc();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Point point = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">"point.x="</span> + point.x + <span class="string">"; point.y="</span> + point.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以上代码，经过标量替换后，就会变成:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">    System.out.println(<span class="string">"point.x="</span> + x + <span class="string">"; point.y="</span> + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看到，Point 这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个聚合量了。那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。</p><p>标量替换为栈上分配提供了很好的基础。</p><p><strong>标量替换参数设置</strong>:</p><p>参数 <code>-XX:+EliminateAllocations</code> : 开启了标量替换(默认打开)，允许将对象打散分配在栈上。</p><p>测试：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标量替换测试</span></span><br><span class="line"><span class="comment"> *  -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:-EliminateAllocations</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart  shkstart@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020  12:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScalarReplace</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">public</span> String name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User u = <span class="keyword">new</span> User();<span class="comment">//未发生逃逸</span></span><br><span class="line">        u.id = <span class="number">5</span>;</span><br><span class="line">        u.name = <span class="string">"www.atguigu.com"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"花费的时间为： "</span> + (end - start) + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Customer&#123;</span></span><br><span class="line"><span class="comment">    String name;</span></span><br><span class="line"><span class="comment">    int id;</span></span><br><span class="line"><span class="comment">    Account acct;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Account&#123;</span></span><br><span class="line"><span class="comment">    double balance;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></div><p>上述代码在主函数中进行了 10000000 次 alloc() 。 调用进行对象创建，由于 User 对象实例需要占据约 16 字节的空间，因此累计分配空间达到将近 152 MB。如果堆空间小于这个值，就必然会发生 GC。 使用如下参数运行上述代码:  </p><p><code>-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations +PrintEliminateAllocations</code>  </p><p>这里使用参数如下:  </p><ul><li>● 参数 <code>-server</code>: 启动 server 模式， 因为在 Server 模式下，才可以启用逃逸分析 (不用手动写这个参数是因为使用 <code>java -version</code> 可以查看到 JDK 版本默认就是 Server VM)。  </li><li>● 参数 <code>-XX:+DoEscapeAnalysis</code> : 启用逃逸分析  </li><li>● 参数 <code>-Xmx10m</code> : 指定了堆空间最大为 10MB  </li><li>● 参数 <code>-XX:+PrintGC</code> : 将打印 GC 日志。  </li><li>● 参数 <code>-XX:+EliminateAllocations</code> : 开启了标量替换 (默认打开)，允许将对象打散分配在栈上，比如对 象拥有 id 和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配。  </li><li><code>+PrintEliminateAllocations</code> : 打印标量替换信息，Non-product builds: Print out when allocations are eliminated，非产品版本，需要使用 debug JDK 运行。</li></ul><p>设置 VM options 为 <code>-Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:-EliminateAllocations</code>，先不使用标量替换 <code>-XX:-EliminateAllocations</code>，运行上述程序：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[GC (Allocation Failure)  <span class="number">25600</span>K-&gt;<span class="number">584</span>K(<span class="number">98304</span>K), <span class="number">0.0015866</span> secs]</span><br><span class="line">[GC (Allocation Failure)  <span class="number">26184</span>K-&gt;<span class="number">616</span>K(<span class="number">98304</span>K), <span class="number">0.0014574</span> secs]</span><br><span class="line">[GC (Allocation Failure)  <span class="number">26216</span>K-&gt;<span class="number">520</span>K(<span class="number">98304</span>K), <span class="number">0.0013473</span> secs]</span><br><span class="line">[GC (Allocation Failure)  <span class="number">26120</span>K-&gt;<span class="number">536</span>K(<span class="number">98304</span>K), <span class="number">0.0012746</span> secs]</span><br><span class="line">[GC (Allocation Failure)  <span class="number">26136</span>K-&gt;<span class="number">456</span>K(<span class="number">98304</span>K), <span class="number">0.0013713</span> secs]</span><br><span class="line">[GC (Allocation Failure)  <span class="number">26056</span>K-&gt;<span class="number">480</span>K(<span class="number">101376</span>K), <span class="number">0.0016144</span> secs]</span><br><span class="line">[GC (Allocation Failure)  <span class="number">32224</span>K-&gt;<span class="number">440</span>K(<span class="number">101376</span>K), <span class="number">0.0015301</span> secs]</span><br><span class="line">[GC (Allocation Failure)  <span class="number">32184</span>K-&gt;<span class="number">440</span>K(<span class="number">101376</span>K), <span class="number">0.0011484</span> secs]</span><br><span class="line">花费的时间为： <span class="number">82</span> ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>设置 VM options 为 <code>-Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations</code>，使用标量替换 <code>-XX:+EliminateAllocations</code>，再次运行上述程序：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">花费的时间为： <span class="number">4</span> ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code</span><br></pre></td></tr></table></figure></div><p>从程序的运行结果对比来看，开启标量替换时，没有发生垃圾回收，而且执行 <code>alloc()</code> 方法创建对象 1000 万次的时间很明显降低了。</p><h4 id="逃逸分析小结"><a href="#逃逸分析小结" class="headerlink" title="逃逸分析小结"></a>逃逸分析小结</h4><p>逃逸分析小结:逃逸分析并不成熟</p><ul><li>关于逃逸分析的论文在 1999 年就已经发表了，但直到 JDK 1.6 才有实现，而且这项技术到如今也并不是十分成熟的。</li><li>其根本原因就是 <strong>无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程</strong>。</li><li>一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</li><li>虽然这项技术并不十分成熟，但是它也<strong>是即时编译器优化技术中一个十分重要的手段</strong>。</li><li>注意到有一些观点，认为通过逃逸分析，JVM 会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于 JVM 设计者的选择。据我所知，Oracle Hotspot JVM 中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。<ul><li>前面演示的程序之所以会有栈上分配的那种效果，可以理解为：逃逸分析 + 标量替换 &#x3D;&gt; 栈上分配；基于逃逸分析和标量替换，某种程度上可以说是达到了栈上分配的效果。</li></ul></li><li>目前很多书籍还是基于 JDK 7 以前的版本，JDK 已经发生了很大变化，intern 字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern 字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。</li></ul><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><ul><li>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</li><li>老年代放置长生命周期的对象，通常都是从 Survivor 区域筛选拷贝过来的 Java 对象。当然，也有特殊情况，我们知道普通的对象会被分配在 TLAB 上；如果对象较大，JVM 会试图直接分配在 Eden 其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM 就会直接分配到老年代。</li><li>当 GC 只发生在年轻代中，回收年轻代对象的行为被称为 Minor GC。当 GC 发生在老年代时则被称为 Major GC 或者 Full GC。一般的，Minor GC 的发生频率要比 MajorGC 高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-堆的核心概述&quot;&gt;&lt;a href=&quot;#1-堆的核心概述&quot; class=&quot;headerlink&quot; title=&quot;1 堆的核心概述&quot;&gt;&lt;/a&gt;1 堆的核心概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;● 一个 JVM 实例只存在一个堆内存，堆也是 Java 内存管理的核心区域。&lt;/li&gt;
&lt;li&gt;● Java 堆区在 JVM 启动的时候即被创建，其空间大小也就确定了。是 JVM 管理的最大一块内存空间。&lt;ul&gt;
&lt;li&gt;➢ 堆内存的大小是可以调节的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;● 《Java 虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。&lt;/li&gt;
&lt;li&gt;● 所有的线程共享 Java 堆，在这里还可以划分线程私有的缓冲区 (ThreadLocal Allocation Buffer， TLAB)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个 JVM 实例对应一个进程，方法区和堆是一个进程一份，而程序计数器、本地方法栈、虚拟机栈是一个线程对应一份，一个进程中的所有线程共享方法区和堆（并不是完整的堆都一定是共享的，比如 TLAB）。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://xiaoyan94.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM 03 运行时数据区之虚拟机栈 (Stack)</title>
    <link href="https://xiaoyan94.github.io/2020/07/05/JVM-03/"/>
    <id>https://xiaoyan94.github.io/2020/07/05/JVM-03/</id>
    <published>2020-07-05T08:06:02.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>1 虚拟机栈概述</li><li>2 栈的存储单位</li><li>3 局部变量表</li><li>4 操作数栈</li><li>5 代码追踪</li><li>6 栈顶缓存技术</li><li>7 动态链接</li><li>8 方法的调用:解析与分派</li><li>9 方法返回地址</li><li>10 一些附加信息</li><li>11 栈的相关面试题</li></ul><a id="more"></a><h2 id="1-虚拟机栈概述"><a href="#1-虚拟机栈概述" class="headerlink" title="1 虚拟机栈概述"></a>1 虚拟机栈概述</h2><p>由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的。</p><p><strong>优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</strong></p><p>有不少Java开发人员一提到Java内存结构，就会非常粗粒度地将JVM中的内存区理解为仅有Java堆(heap)和Java栈(stack)?为什么?</p><p><em>不全面。也许堆和栈太重要。</em></p><p>内存中的栈与堆</p><p><strong>栈是运行时的单位，而堆是存储的单位。</strong></p><p>即: 栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。  堆解决的是数据存储的问题，即数据怎么放、放在哪儿。</p><hr><h3 id="虚拟机栈基本内容"><a href="#虚拟机栈基本内容" class="headerlink" title="虚拟机栈基本内容"></a>虚拟机栈基本内容</h3><p>● <strong>Java虚拟机栈是什么</strong>?</p><p>Java虚拟机栈(Java Virtual Machine Stack) ，早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧(Stack Frame) ，对应着一次次的Java方法调用。<br>➢ 是线程私有的</p><p>● <strong>生命周期</strong></p><p>生命周期和线程一致。</p><p>● <strong>作用</strong></p><p>主管Java程序的运行，它保存方法的局部变量（八种基本数据类型、对象的引用地址）、部分结果，并参与方法的调用和返回。<br>➢ 局部变量 vs 成员变量(或属性)<br>➢ 基本数据变量 VS 引用类型变量(类、数组、接口)</p><hr><p>栈的特点(优点)</p><ul><li>● 栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器。</li><li>● JVM直接 对Java栈的操作只有两个:  <ul><li>➢ 每个方法执行，伴随着进栈(入栈、压栈)  </li><li>➢ 执行结束后的出栈工作</li></ul></li><li>● 对于栈来说不存在垃圾回收问题</li></ul><hr><p>面试题: 开发中遇到的异常有哪些?</p><p>栈中可能出现的异常<br>● Java虚拟机规范<strong>允许Java栈的大小是动态的或者是固定不变的</strong>。<br>➢ 如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个 <code>StackOverflowError</code> 异常。<br>➢ 如果Java虛拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个 <code>OutOfMemoryError</code> 异常。</p><hr><p>设置栈内存大小</p><p>我们可以使用参数 <code>-Xss</code> 选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。</p><p>IntelliJ IDEA 设置栈大小的方法：点击 <code>Run</code> - <code>Edit Configurations</code> - <code>VM options</code> ，输入 <code>-Xss256K</code> 或 <code>-Xss256k</code> ，设置栈的大小为256k （k、m、g或K、M、G是单位，大小写均可）。</p><p>以下运行环境：Java8、macOS。下面的程序输出视运行环境不同（系统不同、JDK版本不同均有影响）而有不同的结果。</p><p>StackDeepTest.java</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackDeepTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        recursion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            recursion();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"deep of calling = "</span> + count);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>使用默认设置栈的大小时，程序输出：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deep of calling = <span class="number">22387</span></span><br><span class="line">java.lang.StackOverflowError</span><br><span class="line"> at com.atguigu.java.StackDeepTest.recursion(StackDeepTest.java:<span class="number">8</span>)</span><br><span class="line"> at com.atguigu.java.StackDeepTest.recursion(StackDeepTest.java:<span class="number">8</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><p>指定栈的大小为256K时，程序输出：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deep of calling = <span class="number">2712</span></span><br><span class="line">java.lang.StackOverflowError</span><br><span class="line"> at com.atguigu.java.StackDeepTest.recursion(StackDeepTest.java:<span class="number">8</span>)</span><br><span class="line"> at com.atguigu.java.StackDeepTest.recursion(StackDeepTest.java:<span class="number">8</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><hr><p>StackErrorTest.java</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示栈中的异常:StackOverflowError</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 下午 9:08</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  默认情况下：count : 11420</span></span><br><span class="line"><span class="comment"> *  设置栈的大小： -Xss256k : count : 2465</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackErrorTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        count++;</span><br><span class="line">        main(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="2-栈的存储单位"><a href="#2-栈的存储单位" class="headerlink" title="2 栈的存储单位"></a>2 栈的存储单位</h2><h3 id="栈中存储什么"><a href="#栈中存储什么" class="headerlink" title="栈中存储什么"></a>栈中存储什么</h3><ul><li>每个线程都有自己的栈，栈中的数据都是以 <strong>栈帧(Stack Frame) 的格式存在</strong>。</li><li>在这个线程上正在执行的每个方法都各自对应一个栈帧(Stack Frame )。</li><li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。</li></ul><h3 id="栈运行原理"><a href="#栈运行原理" class="headerlink" title="栈运行原理"></a>栈运行原理</h3><ul><li>JVM直接对Java栈的操作只有两个，就是对栈帧的<strong>压栈</strong>和<strong>出栈</strong>，遵循“先进后出”&#x2F;“后进先出”原则。</li><li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧(栈顶栈帧)是有效的，这个栈帧被称为**当前栈帧(Current Frame)<strong>，与当前栈帧相对应的方法就是</strong>当前方法(CurrentMethod)<strong>，定义这个方法的类就是</strong>当前类(Current Class)**。</li><li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作。</li><li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。</li><li>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个栈帧之中引用另外一个线程的栈帧。</li><li>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。</li><li>Java方法有两种返回函数的方式，一种是正常的函数返回，使用return指令;另外一种是抛出异常（没有处理的异常）。不管使用哪种方式，都会导致栈帧被弹出。</li></ul><p>StackFrameTest.java</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 下午 4:11</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 方法的结束方式分为两种：① 正常结束，以return为代表  ② 方法执行中出现未捕获处理的异常，以抛出异常的方式结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackFrameTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            StackFrameTest test = <span class="keyword">new</span> StackFrameTest();</span><br><span class="line">            test.method1();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"main()正常结束"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method1()开始执行..."</span>);</span><br><span class="line">        method2();</span><br><span class="line">        System.out.println(<span class="string">"method1()执行结束..."</span>);</span><br><span class="line">        <span class="comment">//        System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        return ;//可以省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method2()开始执行..."</span>);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> m = (<span class="keyword">int</span>) method3();</span><br><span class="line">        System.out.println(<span class="string">"method2()即将结束..."</span>);</span><br><span class="line">        <span class="keyword">return</span> i + m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"method3()开始执行..."</span>);</span><br><span class="line">        <span class="keyword">double</span> j = <span class="number">20.0</span>;</span><br><span class="line">        System.out.println(<span class="string">"method3()即将结束..."</span>);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>反编译StackFrameTest.class</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">$ javap StackFrameTest<span class="class">.<span class="keyword">class</span></span></span><br><span class="line">Compiled from "StackFrameTest.java"</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">atguigu</span>.<span class="title">java1</span>.<span class="title">StackFrameTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> com.atguigu.java1.StackFrameTest();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">method3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ javap -v StackFrameTest<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">Classfile</span> /<span class="title">Users</span>/<span class="title">yan</span>/<span class="title">Documents</span>/<span class="title">JVMDemo</span>/<span class="title">out</span>/<span class="title">production</span>/<span class="title">chapter05</span>/<span class="title">com</span>/<span class="title">atguigu</span>/<span class="title">java1</span>/<span class="title">StackFrameTest</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">  <span class="title">Last</span> <span class="title">modified</span> 2020年7月5日</span>; size <span class="number">1373</span> bytes</span><br><span class="line">  SHA-<span class="number">256</span> checksum c61db00f51e8ffb48977aa8245b58fb7b3e49f4678d4e147dffdd989f0a43478</span><br><span class="line">  Compiled from <span class="string">"StackFrameTest.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">atguigu</span>.<span class="title">java1</span>.<span class="title">StackFrameTest</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: (<span class="number">0x0021</span>) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #2                          // com/atguigu/java1/StackFrameTest</span><br><span class="line">  super_class: #20                        // java/lang/Object</span><br><span class="line">  interfaces: <span class="number">0</span>, fields: <span class="number">0</span>, methods: <span class="number">5</span>, attributes: <span class="number">1</span></span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #20.#49        // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = Class              #50            // com/atguigu/java1/StackFrameTest</span><br><span class="line">   #3 = Methodref          #2.#49         // com/atguigu/java1/StackFrameTest."&lt;init&gt;":()V</span><br><span class="line">   #4 = Methodref          #2.#51         // com/atguigu/java1/StackFrameTest.method1:()V</span><br><span class="line">   #5 = Class              #52            // java/lang/Exception</span><br><span class="line">   #6 = Methodref          #5.#53         // java/lang/Exception.printStackTrace:()V</span><br><span class="line">   #7 = Fieldref           #54.#55        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #8 = String             #56            // main()正常结束</span><br><span class="line">   #9 = Methodref          #57.#58        // java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">  #10 = String             #59            // method1()开始执行...</span><br><span class="line">  #11 = Methodref          #2.#60         // com/atguigu/java1/StackFrameTest.method2:()I</span><br><span class="line">  #12 = String             #61            // method1()执行结束...</span><br><span class="line">  #13 = String             #62            // method2()开始执行...</span><br><span class="line">  #14 = Methodref          #2.#63         // com/atguigu/java1/StackFrameTest.method3:()D</span><br><span class="line">  #15 = String             #64            // method2()即将结束...</span><br><span class="line">  #16 = String             #65            // method3()开始执行...</span><br><span class="line">  #17 = Double             20.0d</span><br><span class="line">  #19 = String             #66            // method3()即将结束...</span><br><span class="line">  #20 = Class              #67            // java/lang/Object</span><br><span class="line">  #21 = Utf8               &lt;init&gt;</span><br><span class="line">  #22 = Utf8               ()V</span><br><span class="line">  #23 = Utf8               Code</span><br><span class="line">  #24 = Utf8               LineNumberTable</span><br><span class="line">  #25 = Utf8               LocalVariableTable</span><br><span class="line">  #26 = Utf8               this</span><br><span class="line">  #27 = Utf8               Lcom/atguigu/java1/StackFrameTest;</span><br><span class="line">  #28 = Utf8               main</span><br><span class="line">  #29 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #30 = Utf8               test</span><br><span class="line">  #31 = Utf8               e</span><br><span class="line">  #32 = Utf8               Ljava/lang/Exception;</span><br><span class="line">  #33 = Utf8               args</span><br><span class="line">  #34 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #35 = Utf8               StackMapTable</span><br><span class="line">  #36 = Class              #52            // java/lang/Exception</span><br><span class="line">  #37 = Utf8               method1</span><br><span class="line">  #38 = Utf8               method2</span><br><span class="line">  #39 = Utf8               ()I</span><br><span class="line">  #40 = Utf8               i</span><br><span class="line">  #41 = Utf8               I</span><br><span class="line">  #42 = Utf8               m</span><br><span class="line">  #43 = Utf8               method3</span><br><span class="line">  #44 = Utf8               ()D</span><br><span class="line">  #45 = Utf8               j</span><br><span class="line">  #46 = Utf8               D</span><br><span class="line">  #47 = Utf8               SourceFile</span><br><span class="line">  #48 = Utf8               StackFrameTest.java</span><br><span class="line">  #49 = NameAndType        #21:#22        // "&lt;init&gt;":()V</span><br><span class="line">  #50 = Utf8               com/atguigu/java1/StackFrameTest</span><br><span class="line">  #51 = NameAndType        #37:#22        // method1:()V</span><br><span class="line">  #52 = Utf8               java/lang/Exception</span><br><span class="line">  #53 = NameAndType        #68:#22        // printStackTrace:()V</span><br><span class="line">  #54 = Class              #69            // java/lang/System</span><br><span class="line">  #55 = NameAndType        #70:#71        // out:Ljava/io/PrintStream;</span><br><span class="line">  #56 = Utf8               main()正常结束</span><br><span class="line">  #57 = Class              #72            // java/io/PrintStream</span><br><span class="line">  #58 = NameAndType        #73:#74        // println:(Ljava/lang/String;)V</span><br><span class="line">  #59 = Utf8               method1()开始执行...</span><br><span class="line">  #60 = NameAndType        #38:#39        // method2:()I</span><br><span class="line">  #61 = Utf8               method1()执行结束...</span><br><span class="line">  #62 = Utf8               method2()开始执行...</span><br><span class="line">  #63 = NameAndType        #43:#44        // method3:()D</span><br><span class="line">  #64 = Utf8               method2()即将结束...</span><br><span class="line">  #65 = Utf8               method3()开始执行...</span><br><span class="line">  #66 = Utf8               method3()即将结束...</span><br><span class="line">  #67 = Utf8               java/lang/Object</span><br><span class="line">  #68 = Utf8               printStackTrace</span><br><span class="line">  #69 = Utf8               java/lang/System</span><br><span class="line">  #70 = Utf8               out</span><br><span class="line">  #71 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #72 = Utf8               java/io/PrintStream</span><br><span class="line">  #73 = Utf8               println</span><br><span class="line">  #74 = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.atguigu.java1.StackFrameTest();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">9</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java1/StackFrameTest;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: new           #2                  // class com/atguigu/java1/StackFrameTest</span><br><span class="line">         <span class="number">3</span>: dup</span><br><span class="line">         4: invokespecial #3                  // Method "&lt;init&gt;":()V</span><br><span class="line">         <span class="number">7</span>: astore_1</span><br><span class="line">         <span class="number">8</span>: aload_1</span><br><span class="line">         9: invokevirtual #4                  // Method method1:()V</span><br><span class="line">        <span class="number">12</span>: goto          <span class="number">20</span></span><br><span class="line">        <span class="number">15</span>: astore_1</span><br><span class="line">        <span class="number">16</span>: aload_1</span><br><span class="line">        17: invokevirtual #6                  // Method java/lang/Exception.printStackTrace:()V</span><br><span class="line">        20: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        23: ldc           #8                  // String main()正常结束</span><br><span class="line">        25: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        <span class="number">28</span>: <span class="keyword">return</span></span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">             <span class="number">0</span>    <span class="number">12</span>    <span class="number">15</span>   Class java/lang/Exception</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">12</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">13</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">17</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">15</span></span><br><span class="line">        line <span class="number">16</span>: <span class="number">16</span></span><br><span class="line">        line <span class="number">19</span>: <span class="number">20</span></span><br><span class="line">        line <span class="number">21</span>: <span class="number">28</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">8</span>       <span class="number">4</span>     <span class="number">1</span>  test   Lcom/atguigu/java1/StackFrameTest;</span><br><span class="line">           <span class="number">16</span>       <span class="number">4</span>     <span class="number">1</span>     e   Ljava/lang/Exception;</span><br><span class="line">            <span class="number">0</span>      <span class="number">29</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">      StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">        frame_type = <span class="number">79</span> <span class="comment">/* same_locals_1_stack_item */</span></span><br><span class="line">          stack = [ class java/lang/Exception ]</span><br><span class="line">        frame_type = <span class="number">4</span> <span class="comment">/* same */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #10                 // String method1()开始执行...</span><br><span class="line">         5: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         <span class="number">8</span>: aload_0</span><br><span class="line">         9: invokevirtual #11                 // Method method2:()I</span><br><span class="line">        <span class="number">12</span>: pop</span><br><span class="line">        13: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        16: ldc           #12                 // String method1()执行结束...</span><br><span class="line">        18: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        <span class="number">21</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">24</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">25</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">26</span>: <span class="number">13</span></span><br><span class="line">        line <span class="number">30</span>: <span class="number">21</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">22</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java1/StackFrameTest;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #13                 // String method2()开始执行...</span><br><span class="line">         5: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         <span class="number">8</span>: bipush        <span class="number">10</span></span><br><span class="line">        <span class="number">10</span>: istore_1</span><br><span class="line">        <span class="number">11</span>: aload_0</span><br><span class="line">        12: invokevirtual #14                 // Method method3:()D</span><br><span class="line">        <span class="number">15</span>: d2i</span><br><span class="line">        <span class="number">16</span>: istore_2</span><br><span class="line">        17: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        20: ldc           #15                 // String method2()即将结束...</span><br><span class="line">        22: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        <span class="number">25</span>: iload_1</span><br><span class="line">        <span class="number">26</span>: iload_2</span><br><span class="line">        <span class="number">27</span>: iadd</span><br><span class="line">        <span class="number">28</span>: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">33</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">34</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">35</span>: <span class="number">11</span></span><br><span class="line">        line <span class="number">36</span>: <span class="number">17</span></span><br><span class="line">        line <span class="number">37</span>: <span class="number">25</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">29</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java1/StackFrameTest;</span><br><span class="line">           <span class="number">11</span>      <span class="number">18</span>     <span class="number">1</span>     i   I</span><br><span class="line">           <span class="number">17</span>      <span class="number">12</span>     <span class="number">2</span>     m   I</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">method3</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()D</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #16                 // String method3()开始执行...</span><br><span class="line">         5: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         8: ldc2_w        #17                 // double 20.0d</span><br><span class="line">        <span class="number">11</span>: dstore_1</span><br><span class="line">        12: getstatic     #7                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        15: ldc           #19                 // String method3()即将结束...</span><br><span class="line">        17: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        <span class="number">20</span>: dload_1</span><br><span class="line">        <span class="number">21</span>: dreturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">41</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">42</span>: <span class="number">8</span></span><br><span class="line">        line <span class="number">43</span>: <span class="number">12</span></span><br><span class="line">        line <span class="number">44</span>: <span class="number">20</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">22</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java1/StackFrameTest;</span><br><span class="line">           <span class="number">12</span>      <span class="number">10</span>     <span class="number">1</span>     j   D</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"StackFrameTest.java"</span></span><br></pre></td></tr></table></figure></div><p><code>return</code>, <code>ireturn</code>, <code>dreturn</code> 中 <code>i</code> 代表 int， <code>d</code> 代表 double。</p><h3 id="◆-栈帧的内部结构"><a href="#◆-栈帧的内部结构" class="headerlink" title="◆ 栈帧的内部结构"></a>◆ 栈帧的内部结构</h3><p><img src="/2020/07/05/JVM-03/%E6%A0%88%E5%B8%A71.png" alt="栈帧的内部结构"></p><p>毎个栈帧中存儲着:</p><ul><li><strong>局部变量表(Local Variables)</strong></li><li><strong>操作数栈(Operand Stack) ( 或表达式栈)</strong></li><li>动态链接(Dynamic Linking) ( 或指向运行时常量池的方法引用)</li><li>方法返回地址(Return Address) (或方法正常退出或者异常退出的定乂)</li><li>一些附加信息</li></ul><hr><h2 id="3-🌿-局部变量表"><a href="#3-🌿-局部变量表" class="headerlink" title="3 🌿 局部变量表"></a>3 🌿 局部变量表</h2><ul><li><p>局部变量表也被称之为局部变量数组或本地变量表</p></li><li><p><strong>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量</strong>，这些数据类型包括各类本数据类型、对象引用(reference) ，以及returnAddress类型。</p></li><li><p>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此<strong>不存在数据安全问题</strong></p></li><li><p><strong>局部变量表所需的容量大小是在编译期确定下来的</strong>，并保存在方法的Code属性的 <code>maximum local variables</code> 数据项中。在方法运行期间是不会改变局部变量表的大小的。</p></li><li><p><strong>方法嵌套调用的次数由栈的大小决定</strong>。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</p></li><li><p><strong>局部变量表中的变量只在当前方法调用中有效</strong>。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。<strong>当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁</strong>。</p></li></ul><h3 id="字节码中方法内部结构的剖析"><a href="#字节码中方法内部结构的剖析" class="headerlink" title="字节码中方法内部结构的剖析"></a>字节码中方法内部结构的剖析</h3><p>以main方法为例：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LocalVariablesTest test = <span class="keyword">new</span> LocalVariablesTest();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    test.test1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>javap -v</code> 得到的内容，main方法部分：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">  descriptor: ([Ljava/lang/String;)V</span><br><span class="line">  flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">       0: new           #1                  // class com/atguigu/java1/LocalVariablesTest</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: invokespecial #2                  // Method "&lt;init&gt;":()V</span><br><span class="line">       <span class="number">7</span>: astore_1</span><br><span class="line">       <span class="number">8</span>: bipush        <span class="number">10</span></span><br><span class="line">      <span class="number">10</span>: istore_2</span><br><span class="line">      <span class="number">11</span>: aload_1</span><br><span class="line">      12: invokevirtual #3                  // Method test1:()V</span><br><span class="line">      <span class="number">15</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">13</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">14</span>: <span class="number">8</span></span><br><span class="line">      line <span class="number">15</span>: <span class="number">11</span></span><br><span class="line">      line <span class="number">16</span>: <span class="number">15</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>      <span class="number">16</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">          <span class="number">8</span>       <span class="number">8</span>     <span class="number">1</span>  test   Lcom/atguigu/java1/LocalVariablesTest;</span><br><span class="line">         <span class="number">11</span>       <span class="number">5</span>     <span class="number">2</span>   num   I</span><br></pre></td></tr></table></figure></div><p>以上信息中：  </p><table><thead><tr><th>这些东西</th><th>是啥意思？</th></tr></thead><tbody><tr><td>descriptor: ([Ljava&#x2F;lang&#x2F;String;)V</td><td>描述符：[表示一维数组，L表示引用类型变量，V表示方法返回值 <code>void</code></td></tr><tr><td>flags: (0x0009) ACC_PUBLIC, ACC_STATIC</td><td>Access flags即访问标识 <code>public static</code></td></tr><tr><td>Code:</td><td>字节码：</td></tr><tr><td>stack&#x3D;2, locals&#x3D;3, args_size&#x3D;1</td><td>locals&#x3D;3表示局部变量表深度为3，stack&#x3D;2表示操作数栈深度为2</td></tr><tr><td>Code: 0到15</td><td>字节码指令号</td></tr><tr><td>LineNumberTable line 13: 0</td><td>行号表 line 13表示java源代码中的行号13: 0表示字节码指令号0</td></tr><tr><td>LocalVariableTable：Start Length Slot</td><td>局部变量表：Start和Length在一起表示了局部变量的作用范围：字节码指令中从Start开始，长度为Length，Slot为槽的索引</td></tr></tbody></table><h3 id="关于Slot的理解"><a href="#关于Slot的理解" class="headerlink" title="关于Slot的理解"></a>关于Slot的理解</h3><ul><li>参数值的存放总是在局部变量数组的index0开始，到数组长度-1的索引结束。</li><li><strong>局部变量表，最基本的存储单元是Slot (变量槽)</strong></li><li>局部变量表中存放编译期可知的各种基本数据类型(8种)，引用类型(reference)，returnAddress类型。</li><li><strong>在局部变量表里，32位以内的类型只占用一个slot (包括returnAddress类型)，64位的类型(long和double)占用两个slot</strong>。<ul><li>➢ byte、short、char 在存储前被转换为int, boolean也被转换为int，0表示false, 非0表示true。</li><li>➢ long和double 则占据两个Slot。</li></ul></li></ul><p><img src="/2020/07/05/JVM-03/%E5%8F%98%E9%87%8F%E6%A7%BDSlot1.png" alt="变量槽Slot"></p><ul><li>JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值</li><li>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会<strong>按照顺序被复制</strong>到局部变量表中的每一个slot上</li><li><strong>如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可</strong>。(比如:访问long或double类型变量)</li><li>如果当前帧是由构造方法或者实例方法创建的，那么<strong>该对象引用this将会存放在index为0的slot处</strong>，其余的参数按照参数表顺序继续排列。</li></ul><p>又如 test2 方法：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(Date dateP, String name2)</span> </span>&#123;</span><br><span class="line">    dateP = <span class="keyword">null</span>;</span><br><span class="line">    name2 = <span class="string">"songhongkang"</span>;</span><br><span class="line">    <span class="keyword">double</span> weight = <span class="number">130.5</span>;<span class="comment">//占据两个slot</span></span><br><span class="line">    <span class="keyword">char</span> gender = <span class="string">'男'</span>;</span><br><span class="line">    <span class="keyword">return</span> dateP + name2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>test2方法的局部变量表如下：其中slot index0是对象引用<code>this</code>，slot index3和4是<code>double</code>类型的变量（只需要索引index 3即可访问double类型的变量weight），slot index5是<code>char</code>类型变量。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> java.lang.<span class="function">String <span class="title">test2</span><span class="params">(java.util.Date, java.lang.String)</span></span>;</span><br><span class="line">  descriptor: (Ljava/util/Date;Ljava/lang/String;)Ljava/lang/String;</span><br><span class="line">  flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">6</span>, args_size=<span class="number">3</span></span><br><span class="line">       <span class="number">0</span>: aconst_null</span><br><span class="line">       <span class="number">1</span>: astore_1</span><br><span class="line">       2: ldc           #18                 // String songhongkang</span><br><span class="line"></span><br><span class="line">    .......中间省略.........</span><br><span class="line"></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>      <span class="number">33</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java1/LocalVariablesTest;</span><br><span class="line">          <span class="number">0</span>      <span class="number">33</span>     <span class="number">1</span> dateP   Ljava/util/Date;</span><br><span class="line">          <span class="number">0</span>      <span class="number">33</span>     <span class="number">2</span> name2   Ljava/lang/String;</span><br><span class="line">          <span class="number">9</span>      <span class="number">24</span>     <span class="number">3</span> weight   D</span><br><span class="line">         <span class="number">14</span>      <span class="number">19</span>     <span class="number">5</span> gender   C</span><br></pre></td></tr></table></figure></div><h3 id="Slot的重复利用"><a href="#Slot的重复利用" class="headerlink" title="Slot的重复利用"></a>Slot的重复利用</h3><p><strong>栈帧中的局部变量表中的槽位是可以重用的</strong>，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而<strong>达到节省资源的目的</strong>。test4方法演示了这一点：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        b = a + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//变量c使用之前已经销毁的变量b占据的slot的位置</span></span><br><span class="line">    <span class="keyword">int</span> c = a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>下面是 <code>javap -v</code> 得到的test4方法部分的局部变量表 LocalVariableTable:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>;</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: iconst_0</span><br><span class="line">       <span class="number">1</span>: istore_1</span><br><span class="line">       <span class="number">2</span>: iconst_0</span><br><span class="line">       <span class="number">3</span>: istore_2</span><br><span class="line">       <span class="number">4</span>: iload_1</span><br><span class="line">       <span class="number">5</span>: iconst_1</span><br><span class="line">       <span class="number">6</span>: iadd</span><br><span class="line">       <span class="number">7</span>: istore_2</span><br><span class="line">       <span class="number">8</span>: iload_1</span><br><span class="line">       <span class="number">9</span>: iconst_1</span><br><span class="line">      <span class="number">10</span>: iadd</span><br><span class="line">      <span class="number">11</span>: istore_2</span><br><span class="line">      <span class="number">12</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">53</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">55</span>: <span class="number">2</span></span><br><span class="line">      line <span class="number">56</span>: <span class="number">4</span></span><br><span class="line">      line <span class="number">59</span>: <span class="number">8</span></span><br><span class="line">      line <span class="number">60</span>: <span class="number">12</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">4</span>       <span class="number">4</span>     <span class="number">2</span>     b   I</span><br><span class="line">          <span class="number">0</span>      <span class="number">13</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java1/LocalVariablesTest;</span><br><span class="line">          <span class="number">2</span>      <span class="number">11</span>     <span class="number">1</span>     a   I</span><br><span class="line">         <span class="number">12</span>       <span class="number">1</span>     <span class="number">2</span>     c   I</span><br></pre></td></tr></table></figure></div><p>从 LocalVariableTable 可以看出，局部变量 <em>b</em> 的作用域范围是4（Start）到8（Start+Length），即test4方法中用 <code>{</code> 和 <code>}</code> 括起来的部分。从9开始，Slot 2这个槽实际就相当于空着了，所以局部变量 <em>c</em> 的作用域范围从12开始，局部变量 <em>c</em> 就重复利用了过期局部变量 <em>b</em> 的槽位。</p><h3 id="举例-静态变量与局部变量的对比"><a href="#举例-静态变量与局部变量的对比" class="headerlink" title="举例:静态变量与局部变量的对比"></a>举例:静态变量与局部变量的对比</h3><p>● 参数表分配完毕之后，再根据方法体内定义的变量的顺序和作用域分配。<br>● 我们知道类变量表有两次初始化的机会，第一次是在“<strong>准备阶段</strong>”，执行系统初始化，对类变量设置零值，另一次则是在“<strong>初始化</strong>”阶段，赋予程序员在代码中定义的初始值。<br>● 和类变量初始化不同的是，局部变量表不存在系统初始化的过程，这意味着一旦定义了局部变量则必须人为的初始化，否则无法使用。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    变量的分类：按照数据类型分：</span></span><br><span class="line"><span class="comment">    ① 基本数据类型  ② 引用数据类型</span></span><br><span class="line"><span class="comment">    按照在类中声明的位置分：</span></span><br><span class="line"><span class="comment">    ① 成员变量：在使用前，都经历过默认初始化赋值</span></span><br><span class="line"><span class="comment">      类变量： linking的prepare阶段：给类变量默认赋值  ---&gt; initial阶段：给类变量显式赋值即静态代码块赋值</span></span><br><span class="line"><span class="comment">      实例变量：随着对象的创建，会在堆空间中分配实例变量空间，并进行默认赋值</span></span><br><span class="line"><span class="comment">    ② 局部变量：在使用前，必须要进行显式赋值的！否则，编译不通过</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5Temp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="comment">//System.out.println(num);//错误信息：变量num未进行初始化</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p><em><strong>这样的代码是错误的，没有赋值不能够使用</strong></em>。</p><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>● 在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。<br>● <strong>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收</strong>。  </p><hr><h2 id="4-操作数栈"><a href="#4-操作数栈" class="headerlink" title="4 操作数栈"></a>4 操作数栈</h2><ul><li>每一个独立的栈帧中除了包含局部变量表以外，还包含一个后进先出(Last-In-First-out )的操作数栈，也可以称之为表达式栈(Expression Stack) 。</li><li>**操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈(push) &#x2F;出栈(pop)**。<ul><li>➢ 某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈。</li><li>➢ 比如:执行复制、交换、求和等操作</li></ul></li><li>操作数栈，<strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</strong>。</li><li>操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，<strong>这个方法的操作数栈是空的</strong>。</li><li>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度<strong>在编译期就定义好了</strong>，保存在方法的Code属性中（比如<code>stack=2</code>），为max_stack的值。</li><li>栈中的任何一个元素都是可以任意的Java数据类型。<ul><li>➢ 32bit的类型占用一个栈单位深度</li><li>➢ 64bit的类型占用两个栈单位深度</li></ul></li><li>操作数栈<strong>并非采用访问索引的方式来进行数据访问</strong>的，而是只能通过标准的入栈(push) 和出栈(pop) 操作来完成一次数据访问。</li><li><strong>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中</strong>，并更新PC寄存器中下一条需要执行的字节码指令。</li><li>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。</li><li>另外，我们说Java虚拟机的<strong>解释引擎是基于栈的执行引擎</strong>，其中的栈指的就是操作数栈。</li></ul><p>代码追踪：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//byte、short、char、boolean：都以int型来保存</span></span><br><span class="line">        <span class="keyword">byte</span> i = <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">int</span> k = i + j;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// int m = 800;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><p><code>javap -v 类名.class</code></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddOperation</span><span class="params">()</span></span>;</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">15</span></span><br><span class="line">       <span class="number">2</span>: istore_1</span><br><span class="line">       <span class="number">3</span>: bipush        <span class="number">8</span></span><br><span class="line">       <span class="number">5</span>: istore_2</span><br><span class="line">       <span class="number">6</span>: iload_1</span><br><span class="line">       <span class="number">7</span>: iload_2</span><br><span class="line">       <span class="number">8</span>: iadd</span><br><span class="line">       <span class="number">9</span>: istore_3</span><br><span class="line">      <span class="number">10</span>: <span class="keyword">return</span></span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">      line <span class="number">11</span>: <span class="number">3</span></span><br><span class="line">      line <span class="number">12</span>: <span class="number">6</span></span><br><span class="line">      line <span class="number">16</span>: <span class="number">10</span></span><br><span class="line">    LocalVariableTable:</span><br><span class="line">      Start  Length  Slot  Name   Signature</span><br><span class="line">          <span class="number">0</span>      <span class="number">11</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java1/OperandStackTest;</span><br><span class="line">          <span class="number">3</span>       <span class="number">8</span>     <span class="number">1</span>     i   B</span><br><span class="line">          <span class="number">6</span>       <span class="number">5</span>     <span class="number">2</span>     j   I</span><br><span class="line">         <span class="number">10</span>       <span class="number">1</span>     <span class="number">3</span>     k   I</span><br></pre></td></tr></table></figure></div><p>分析（是我推测，不知对否，回头再看）：</p><table><thead><tr><th>字节码指令</th><th>操作数栈（动作，栈元素 栈底 –&gt; 栈顶）</th><th>局部变量表（Slot0123）</th></tr></thead><tbody><tr><td>0: bipush        15</td><td>入栈，15</td><td>this,</td></tr><tr><td>2: istore_1</td><td>出栈，空</td><td>this, 15</td></tr><tr><td>3: bipush        8</td><td>入栈，8</td><td>this, 15</td></tr><tr><td>5: istore_2</td><td>出栈，空</td><td>this, 15, 8</td></tr><tr><td>6: iload_1</td><td>入栈，15</td><td>this, 15, 8</td></tr><tr><td>7: iload_2</td><td>入栈，15, 8</td><td>this, 15, 8</td></tr><tr><td>8: iadd</td><td>出栈(8)，出栈(15)，入栈(23) ，23</td><td>this, 15, 8</td></tr><tr><td>9: istore_3</td><td>出栈，空</td><td>this, 15, 8, 23</td></tr><tr><td>10: return</td><td>无动作，空</td><td>this, 15, 8, 23</td></tr></tbody></table><hr><h2 id="5-代码追踪"><a href="#5-代码追踪" class="headerlink" title="5 代码追踪"></a>5 代码追踪</h2><iframe width="945" height="511" src="https://www.youtube.com/embed/LwvJVxoExqU?list=PLtGk8Nqe2ZcK0xUtbQjHeX2gqgoOdKJnX" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><hr><h3 id="i-和-i-的区别"><a href="#i-和-i-的区别" class="headerlink" title="i++ 和 ++i 的区别"></a><code>i++</code> 和 <code>++i</code> 的区别</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  程序员面试过程中， 常见的i++和++i 的区别，放到字节码篇章时再介绍。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//第1类问题：</span></span><br><span class="line">      <span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">      i1++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> i2 = <span class="number">10</span>;</span><br><span class="line">      ++i2;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//第2类问题：</span></span><br><span class="line">      <span class="keyword">int</span> i3 = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">int</span> i4 = i3++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> i5 = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">int</span> i6 = ++i5;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//第3类问题：</span></span><br><span class="line">      <span class="keyword">int</span> i7 = <span class="number">10</span>;</span><br><span class="line">      i7 = i7++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> i8 = <span class="number">10</span>;</span><br><span class="line">      i8 = ++i8;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//第4类问题：</span></span><br><span class="line">      <span class="keyword">int</span> i9 = <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">int</span> i10 = i9++ + ++i9;</span><br><span class="line">      <span class="comment">//System.out.println(i10);//22</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><p>尝试通过分析字节码的方式去理解：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">  descriptor: ()V</span><br><span class="line">  flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=<span class="number">2</span>, locals=<span class="number">11</span>, args_size=<span class="number">1</span></span><br><span class="line">       <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">       <span class="number">2</span>: istore_1</span><br><span class="line">       <span class="number">3</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">       <span class="number">6</span>: bipush        <span class="number">10</span></span><br><span class="line">       <span class="number">8</span>: istore_2</span><br><span class="line">       <span class="number">9</span>: iinc          <span class="number">2</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">12</span>: bipush        <span class="number">10</span></span><br><span class="line">      <span class="number">14</span>: istore_3</span><br><span class="line">      <span class="number">15</span>: iload_3</span><br><span class="line">      <span class="number">16</span>: iinc          <span class="number">3</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">19</span>: istore        <span class="number">4</span></span><br><span class="line">      <span class="number">21</span>: bipush        <span class="number">10</span></span><br><span class="line">      <span class="number">23</span>: istore        <span class="number">5</span></span><br><span class="line">      <span class="number">25</span>: iinc          <span class="number">5</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">28</span>: iload         <span class="number">5</span></span><br><span class="line">      <span class="number">30</span>: istore        <span class="number">6</span></span><br><span class="line">      <span class="number">32</span>: bipush        <span class="number">10</span></span><br><span class="line">      <span class="number">34</span>: istore        <span class="number">7</span></span><br><span class="line">      <span class="number">36</span>: iload         <span class="number">7</span></span><br><span class="line">      <span class="number">38</span>: iinc          <span class="number">7</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">41</span>: istore        <span class="number">7</span></span><br><span class="line">      <span class="number">43</span>: bipush        <span class="number">10</span></span><br><span class="line">      <span class="number">45</span>: istore        <span class="number">8</span></span><br><span class="line">      <span class="number">47</span>: iinc          <span class="number">8</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">50</span>: iload         <span class="number">8</span></span><br><span class="line">      <span class="number">52</span>: istore        <span class="number">8</span></span><br><span class="line">      <span class="number">54</span>: bipush        <span class="number">10</span></span><br><span class="line">      <span class="number">56</span>: istore        <span class="number">9</span></span><br><span class="line">      <span class="number">58</span>: iload         <span class="number">9</span></span><br><span class="line">      <span class="number">60</span>: iinc          <span class="number">9</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">63</span>: iinc          <span class="number">9</span>, <span class="number">1</span></span><br><span class="line">      <span class="number">66</span>: iload         <span class="number">9</span></span><br><span class="line">      <span class="number">68</span>: iadd</span><br><span class="line">      <span class="number">69</span>: istore        <span class="number">10</span></span><br><span class="line">      <span class="number">71</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure></div><p>程序员面试过程中，常见的 <code>i++</code> 和 <code>++i</code> 的区别, 放到字节码篇章时再介绍。</p><hr><h2 id="6-栈顶缓存技术"><a href="#6-栈顶缓存技术" class="headerlink" title="6 栈顶缓存技术"></a>6 栈顶缓存技术</h2><p>前面提过，基于栈式架构的虛拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派(instruction dispatch)次数和内存读&#x2F;写次数。</p><p>由于操作数是存储在内存中的，因此频繁地执行内存读&#x2F;写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM的设计者们提出了栈顶缓存(ToS，Top-of-Stack Cashing)技术，<strong>将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读&#x2F;写次数，提升执行引擎的执行效率</strong>。</p><hr><h2 id="7-动态链接"><a href="#7-动态链接" class="headerlink" title="7 动态链接"></a>7 动态链接</h2><p><img src="/2020/07/05/JVM-03/%E6%A0%88%E5%B8%A71.png" alt="帧数据区"></p><p>动态链接(或指向运行时常量池的方法引用)</p><p>每一个栈帧内部都包含一个指向 <em>运行时常量池</em> 中 <strong>该栈帧所属方法的引用</strong>。包含这个引用的目的就是为了支持当前方法的代码能够实现<strong>动态链接(Dynamic Linking)</strong> 。比如: invokedynamic指令</p><p>在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用(Symbolic Reference) 保存在 class文件的常量池（运行起来以后保存到方法区就是运行时常量池）里。比如:描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong>。</p><p><img src="/2020/07/05/JVM-03/%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A51.png" alt="动态链接"></p><p><strong>为什么需要常量池呢</strong>？</p><p>常量池的作用，就是为了提供一些符号和常量，便于指令的识别。</p><hr><h2 id="8-方法的调用-解析与分派"><a href="#8-方法的调用-解析与分派" class="headerlink" title="8 方法的调用:解析与分派"></a>8 方法的调用:解析与分派</h2><p>原理、过程</p><h3 id="方法的绑定机制"><a href="#方法的绑定机制" class="headerlink" title="方法的绑定机制"></a>方法的绑定机制</h3><p>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关。</p><p>● <strong>静态链接</strong>:<br>当一个字节码文件被装载进JVM内部时，如果被调用的<strong>目标方法在编译期可知</strong>,且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</p><p>● <strong>动态链接</strong>:<br>如果<strong>被调用的方法在编译期无法被确定下来</strong>，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接。</p><p>对应的方法的绑定机制为:早期绑定(Early Binding)和晚期绑定(Late Binding) 。<strong>绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次</strong>。</p><p>● <strong>早期绑定</strong>:<br>早期绑定就是指被调用的<strong>目标方法如果在编译期可知，且运行期保持不变时</strong>,即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</p><p>● <strong>晚期绑定</strong>:<br>如果<strong>被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法</strong>，这种绑定方式也就被称之为晚期绑定。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明早期绑定和晚期绑定的例子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 上午 11:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"动物进食"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Huntable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hunt</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Huntable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃骨头"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hunt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"捕食耗子，多管闲事"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Huntable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();<span class="comment">//表现为：早期绑定</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();<span class="comment">//表现为：早期绑定</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();<span class="comment">//表现为：早期绑定</span></span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hunt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"捕食耗子，天经地义"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAnimal</span><span class="params">(Animal animal)</span></span>&#123;</span><br><span class="line">        animal.eat();<span class="comment">//表现为：晚期绑定</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showHunt</span><span class="params">(Huntable h)</span></span>&#123;</span><br><span class="line">        h.hunt();<span class="comment">//表现为：晚期绑定</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>随着高级语言的横空出世，类似于Java一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持着一个共性，那就是都支持封装、继承和多态等面向对象特性，既然<strong>这一类的编程语言具备多态特性，那么自然也就具备早期绑定和晚期绑定两种绑定方式</strong>。</p><p>Java中任何一个普通的方法其实都具备虚函数的特征，它们相当于C++语言中的虚函数(C++中则需要使用关键字 <code>virtual</code> 来显式定义)。如果在Java程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字 <code>final</code> 来标记这个方法。</p><h3 id="虚方法与非虚方法"><a href="#虚方法与非虚方法" class="headerlink" title="虚方法与非虚方法"></a>虚方法与非虚方法</h3><p><strong>非虚方法</strong>:</p><p>● 如果方法在编译期就确定了具体的调用版木，这个版木在运行时是不可变的。这样的方法称为<strong>非虚方法</strong>。<br>● <strong>静态方法、私有方法、final方法、实例构造器、父类方法都是非虚方法</strong>。<br>● 其他方法称为虚方法。  </p><p>子类对象的多态性的使用前提: ① 类的继承关系 ② 方法的重写.</p><h3 id="4种方法调用指令区分非虚方法与虚方法"><a href="#4种方法调用指令区分非虚方法与虚方法" class="headerlink" title="4种方法调用指令区分非虚方法与虚方法"></a>4种方法调用指令区分非虚方法与虚方法</h3><p>虚拟机中提供了以下几条方法调用指令:</p><ul><li>普通调用指令:<ol><li><strong><code>invokestatic</code>: 调用静态方法，解析阶段确定唯一方法版本</strong></li><li><strong><code>invokespecial</code>: 调用&lt;init&gt;方法、 私有及父类方法，解析阶段确定唯一方法版本</strong></li><li><code>invokevirtual</code>: 调用所有虚方法</li><li><code>invokeinterface</code>: 调用接口方法</li></ol></li><li>动态调用指令:<ol><li><code>invokedynamic</code>: 动态解析出需要调用的方法，然后执行</li></ol></li></ul><p>前四条指令固化在虛拟机内部，方法的调用执行不可人为干预，而 <code>invokedynamic</code> 指令则支持由用户确定方法版本。其中 <strong><code>invokestatic</code> 指令和 <code>invokespecial</code> 指令调用的方法称为非虛方法，其余的( <code>final</code> 修饰的除外)称为虚方法</strong>。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解析调用中非虚方法、虚方法的测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * invokestatic指令和invokespecial指令调用的方法称为非虚方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 下午 12:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"father的构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showStatic</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"father "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">showFinal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"father show final"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showCommon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"father 普通方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//invokespecial</span></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//invokespecial</span></span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不是重写的父类的静态方法，因为静态方法不能被重写！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showStatic</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"son "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showPrivate</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"son private"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//invokestatic</span></span><br><span class="line">        showStatic(<span class="string">"atguigu.com"</span>);</span><br><span class="line">        <span class="comment">//invokestatic</span></span><br><span class="line">        <span class="keyword">super</span>.showStatic(<span class="string">"good!"</span>);</span><br><span class="line">        <span class="comment">//invokespecial</span></span><br><span class="line">        showPrivate(<span class="string">"hello!"</span>);</span><br><span class="line">        <span class="comment">//invokespecial</span></span><br><span class="line">        <span class="keyword">super</span>.showCommon();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//invokevirtual</span></span><br><span class="line">        showFinal();<span class="comment">//因为此方法声明有final，不能被子类重写，所以也认为此方法是非虚方法。</span></span><br><span class="line">        <span class="comment">//虚方法如下：</span></span><br><span class="line">        <span class="comment">//invokevirtual</span></span><br><span class="line">        showCommon();</span><br><span class="line">        info();</span><br><span class="line"></span><br><span class="line">        MethodInterface in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//invokeinterface</span></span><br><span class="line">        in.methodA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Father f)</span></span>&#123;</span><br><span class="line">        f.showCommon();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Son so = <span class="keyword">new</span> Son();</span><br><span class="line">        so.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MethodInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="关于-invokedynamic-指令"><a href="#关于-invokedynamic-指令" class="headerlink" title="关于 invokedynamic 指令"></a>关于 <code>invokedynamic</code> 指令</h3><p>JVM字节码指令集一直比较稳定，一直到Java7中才增加了一个 <code>invokedynamic</code> 指令，这是<strong>Java为了实现「动态类型语言」支持而做的一种改进</strong>。</p><p>但是在Java7中并没有提供直接生成 <code>invokedynamic</code> 指令的方法，需要借助 ASM 这种底层字节码工具来产生 <code>invokedynamic</code> 指令。<strong>直到 Java8 的 Lambda 表达式的出现，<code>invokedynamic</code> 指令的生成，在Java中才有了直接的生成方式</strong>。</p><p>Java7 中增加的动态语言类型支持的本质是对 Java虚拟机规范的修改，而不是对Java语言规则的修改，这一块相对来讲比较复杂，增加了虚拟机中的方法调用，最直接的受益者就是运行在Java平台的动态语言的编译器。</p><p>静态类型语言与动态类型语言：</p><p>动态类型语言和静态类型语言两者的区别就在于对类型的检查是在编译期还是在运行期，满足前者就是静态类型语言，反之是动态类型语言。</p><p>说的再直白一点就是，<strong>静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息</strong>，这是动态语言的一“个重要特征。</p><p>比如， 静态类型语言Java；动态类型语言JS，Python。  </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Java: String info &#x3D; &quot;atguigu&quot;; &#x2F;&#x2F;info &#x3D; atguigu;  </span><br><span class="line">JS: var name &#x3D; &quot;shkstart&quot;; var name &#x3D; 10 ;  </span><br><span class="line">Python: info &#x3D; 130.5</span><br></pre></td></tr></table></figure></div><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 体会invokedynamic指令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 下午 3:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Func</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">func</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lambda</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">(Func func)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lambda lambda = <span class="keyword">new</span> Lambda();</span><br><span class="line"></span><br><span class="line">        Func func = s -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        lambda.lambda(func);</span><br><span class="line"></span><br><span class="line">        lambda.lambda(s -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>main方法对应字节码指令如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 0 new #2 &lt;com/atguigu/java2/Lambda&gt;</span><br><span class="line"> <span class="number">3</span> dup</span><br><span class="line"> 4 invokespecial #3 &lt;com/atguigu/java2/Lambda.&lt;init&gt;&gt;</span><br><span class="line"> <span class="number">7</span> astore_1</span><br><span class="line"> 8 invokedynamic #4 &lt;func, BootstrapMethods #0&gt;</span><br><span class="line"><span class="number">13</span> astore_2</span><br><span class="line"><span class="number">14</span> aload_1</span><br><span class="line"><span class="number">15</span> aload_2</span><br><span class="line">16 invokevirtual #5 &lt;com/atguigu/java2/Lambda.lambda&gt;</span><br><span class="line"><span class="number">19</span> aload_1</span><br><span class="line">20 invokedynamic #6 &lt;func, BootstrapMethods #1&gt;</span><br><span class="line">25 invokevirtual #5 &lt;com/atguigu/java2/Lambda.lambda&gt;</span><br><span class="line"><span class="number">28</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></div><h3 id="方法重写的本质"><a href="#方法重写的本质" class="headerlink" title="方法重写的本质"></a>方法重写的本质</h3><p>Java语言中方法重写的本质:</p><ol><li>找到操作数栈项的第一个元素所执行的对象的实际类型，记作 <code>C</code>.</li><li>如果在类型 <code>C</code> 中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回 <code>java.lang.IllegalAccessError</code> 异常。</li><li>否则，按照继承关系从下往上依次对 <code>C</code> 的各个父类进行第2步的搜索和验证过程。</li><li>如果始终没有找到合适的方法，则抛出 <code>java.lang.AbstractMethodError</code> 异常。</li></ol><p><strong>IllegalAccessError介绍</strong>: 程序试图访问或修改一个属性或调用一个方法， 这个属性或方法，你没有权限访问。一般的，这个会引起编译器异常。这个错误如果发生在运行时，就说明一个类发生了不兼容的改变。</p><p>⚠️：Maven的jar包管理冲突时容易出现这个问题，且不易发现。</p><h3 id="虚方法表"><a href="#虚方法表" class="headerlink" title="虚方法表"></a>虚方法表</h3><p>从方法重写的本质可以看出来，频繁的查找效率低。</p><p>● 在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就可能影响到执行效率。因此，<strong>为了提高性能</strong>，<strong>JVM采用在类的方法区建立一个虚方法表(virtual method table) (非虚方法不会出现在表中)来实现。使用索引表来代替查找</strong>。</p><p>● 每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</p><p>● 那么虚方法表什么时候被创建?<br>虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕。</p><hr><h2 id="9-方法返回地址"><a href="#9-方法返回地址" class="headerlink" title="9 方法返回地址"></a>9 方法返回地址</h2><p><img src="/2020/07/05/JVM-03/%E6%A0%88%E5%B8%A71.png" alt="栈帧中的方法返回地址"></p><p>方法返回地址(return address)。</p><p>● 存放调用该方法的pc寄存器的值。</p><p>一个方法的结束，有两种方式:</p><ul><li>➢ 正常执行完成</li><li>➢ 出现未处理的异常，非正常退出</li></ul><p>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，<strong>调用者的pc计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址</strong>。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中-般不会保存这部分信息。</p><p>当一个方法开始执行后，只有两种方式可以退出这个方法:</p><p>1、执行引擎遇到任意一个方法返回的字节码指令(return) ，会有返回值传递给上层的方法调用者，简称<strong>正常完成出口</strong>；</p><ul><li>➢ 一个方法在正常调用完成之后究竟需要使用哪一个返回指令还需要根据方法返回值的实际数据类型而定。</li><li>➢ 在字节码指令中，返回指令包含 <code>ireturn</code> (当返回值是 <code>boolean</code>、 <code>byte</code>、<code>char</code>、 <code>short</code> 和 <code>int</code> 类型时使用)、<code>lreturn</code> （long）、 <code>freturn</code> （float）、 <code>dreturn</code> （double） 以及 <a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.areturn" target="_blank" rel="noopener"><code>areturn</code> （返回引用类型）</a>,另外还有一个 <code>return</code> 指令供声明为 <code>void</code> 的方法、实例初始化方法、类和接口的初始化方法使用。</li></ul><p>2、在方法执行的过程中遇到了异常(Exception)，并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出。简称<strong>异常完成出口</strong>。</p><p>方法执行过程中抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码。</p><table><thead><tr><th>Exception table:</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>from</td><td>to</td><td>target</td><td>type</td></tr><tr><td>4</td><td>16</td><td>19</td><td>any</td></tr><tr><td>19</td><td>21</td><td>19</td><td>any</td></tr></tbody></table><p>本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</p><p><strong>正常完成出口和异常完成出口的区别在于:通过异常完成出口退出的不会给他的上层调用者产生任何的返回值</strong>。</p><hr><h2 id="10-一些附加信息"><a href="#10-一些附加信息" class="headerlink" title="10 一些附加信息"></a>10 一些附加信息</h2><p>栈帧中还允许携带与Java虛拟机实现相关的一些附加信息。例如,对程序调试提供支持的信息。</p><hr><h2 id="11-虚拟机栈的相关面试题"><a href="#11-虚拟机栈的相关面试题" class="headerlink" title="11 虚拟机栈的相关面试题"></a>11 虚拟机栈的相关面试题</h2><p>这一章主要讲了虚拟机栈的内部结构，其中栈帧的结构包含局部变量表、操作数栈、方法返回地址、动态链接和一些附加信息。也提到了方法调用和一些字节码指令。</p><ul><li>● 举例栈溢出的情况? （<code>StackOverflowError</code>）<ul><li>通过 <code>-Xss</code> 设置栈的大小：<code>OOM</code>(栈大小动态扩容内存不足时出现)</li></ul></li><li>● 调整栈大小，就能保证不出现溢出吗? （不能）</li><li>● 分配的栈内存越大越好吗? （不是。比如物理机器内存容量有限，会挤占其他进程的内存空间）</li><li>● 垃圾回收是否会涉及到虚拟机栈? （不会）<table><thead><tr><th>运行时数据区</th><th>Error</th><th>GC</th></tr></thead><tbody><tr><td>程序计数器</td><td>❌</td><td>❌</td></tr><tr><td>虚拟机栈</td><td>✅</td><td>❌</td></tr><tr><td>本地方法栈</td><td>✅</td><td>❌</td></tr><tr><td>堆</td><td>✅</td><td>✅</td></tr><tr><td>方法区</td><td>✅</td><td>✅</td></tr></tbody></table></li><li>● 方法中定义的局部变量是否线程安全? （具体问题具体分析）</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 面试题：</span></span><br><span class="line"><span class="comment"> * 方法中定义的局部变量是否线程安全？具体情况具体分析</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   何为线程安全？</span></span><br><span class="line"><span class="comment"> *      如果只有一个线程才可以操作此数据，则必是线程安全的。</span></span><br><span class="line"><span class="comment"> *      如果有多个线程操作此数据，则此数据是共享数据。如果不考虑同步机制的话，会存在线程安全问题。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 下午 7:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//s1的声明方式是线程安全的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//StringBuilder:线程不安全</span></span><br><span class="line">        StringBuilder s1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        s1.append(<span class="string">"a"</span>);</span><br><span class="line">        s1.append(<span class="string">"b"</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sBuilder的操作过程：是线程不安全的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(StringBuilder sBuilder)</span></span>&#123;</span><br><span class="line">        sBuilder.append(<span class="string">"a"</span>);</span><br><span class="line">        sBuilder.append(<span class="string">"b"</span>);</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//s1的操作：是线程不安全的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuilder <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder s1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        s1.append(<span class="string">"a"</span>);</span><br><span class="line">        s1.append(<span class="string">"b"</span>);</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//s1的操作：是线程安全的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">method4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder s1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        s1.append(<span class="string">"a"</span>);</span><br><span class="line">        s1.append(<span class="string">"b"</span>);</span><br><span class="line">        <span class="keyword">return</span> s1.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            s.append(<span class="string">"a"</span>);</span><br><span class="line">            s.append(<span class="string">"b"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        method2(s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h2 id="本地方法栈-Native-Method-Stack"><a href="#本地方法栈-Native-Method-Stack" class="headerlink" title="本地方法栈(Native Method Stack)"></a>本地方法栈(Native Method Stack)</h2><p><img src="/2020/07/05/JVM-03/%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%881.png" alt="HotSpot JVM 本地方法栈"></p><p><strong>Java虛拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用</strong>。</p><p>本地方法栈，也是线程私有的。</p><p>允许被实现成固定或者是可动态扩展的内存大小。( 在内存溢出方面是相同的)</p><ul><li>➢ 如果线程请求分配的栈容量超过本地方法栈允许的最大容量，Java虚拟机将会抛出一个 <code>stackoverflowError</code> 异常。</li><li>➢ 如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么Java虚拟机将会抛出一个 <code>outOfMemoryError</code> 异常。</li></ul><p>本地方法是使用C语言实现的。</p><p>它的具体做法是Native Method Stack中登记native方法，在Execution Engine 执行时加载本地方法库。</p><p><strong>当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。它和虚拟机拥有同样的权限</strong>。</p><ul><li>➢ 本地方法可以通过本地方法接口来<strong>访问虚拟机内部的运行时数据区</strong>。</li><li>➢ 它甚至可以直接使用本地处理器中的寄存器</li><li>➢ 直接从本地内存的堆中分配任意数量的内存。</li></ul><p>● <strong>并不是所有的JVM都支持本地方法。因为Java虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等</strong>。如果JVM产品不打算支持native方法，也可以无需实现本地方法栈。</p><p>● 在Hotspot JVM中，直接将本地方法栈和虚拟机栈合二为一。</p>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;1 虚拟机栈概述&lt;/li&gt;
&lt;li&gt;2 栈的存储单位&lt;/li&gt;
&lt;li&gt;3 局部变量表&lt;/li&gt;
&lt;li&gt;4 操作数栈&lt;/li&gt;
&lt;li&gt;5 代码追踪&lt;/li&gt;
&lt;li&gt;6 栈顶缓存技术&lt;/li&gt;
&lt;li&gt;7 动态链接&lt;/li&gt;
&lt;li&gt;8 方法的调用:解析与分派&lt;/li&gt;
&lt;li&gt;9 方法返回地址&lt;/li&gt;
&lt;li&gt;10 一些附加信息&lt;/li&gt;
&lt;li&gt;11 栈的相关面试题&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://xiaoyan94.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM 02 运行时数据区概述及线程、程序计数器</title>
    <link href="https://xiaoyan94.github.io/2020/07/05/JVM-02/"/>
    <id>https://xiaoyan94.github.io/2020/07/05/JVM-02/</id>
    <published>2020-07-05T06:32:53.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM内存布局及Java线程、PC寄存器"><a href="#JVM内存布局及Java线程、PC寄存器" class="headerlink" title="JVM内存布局及Java线程、PC寄存器"></a>JVM内存布局及Java线程、PC寄存器</h2><h3 id="JVM内存划分"><a href="#JVM内存划分" class="headerlink" title="JVM内存划分"></a>JVM内存划分</h3><p>内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了JAVA在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。<strong>不同的JVM对于内存的划分方式和管理机制存在着部分差异</strong>。</p><a id="more"></a><p>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。</p><p>如图，灰色的区域为单独线程私有的，红色的为多个线程共享的，即</p><ul><li>➢ 每个线程: 独立包括程序计数器、栈、本地栈。</li><li>➢ 线程间共享: 堆、堆外内存(永久代或元空间、代码缓存)</li></ul><p>一般来说，jvm优化95%是优化堆区，5%优化的是方法区，至于栈区无非是 出栈入栈操作优化较少。</p><p><img src="/2020/07/05/JVM-02/JVM%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%801.png" alt="JVM内存布局1"></p><p>Every Java application has a single instance of class Runtime that allows the application to interface with theenvironment in which the application is running. The current runtime can be obtained from the getRuntime method.<br>每个Java应用程序都有一个Runtime类的实例（单例），该实例允许该应用程序与运行该应用程序的环境进行交互。 当前运行时可以从getRuntime方法获得。</p><p><img src="/2020/07/05/JVM-02/JVM%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%802.png" alt="JVM内存划分（阿里）JDK8以后版本"></p><h3 id="Java线程"><a href="#Java线程" class="headerlink" title="Java线程"></a>Java线程</h3><ul><li>线程是一个程序里的运行单元，JVM允许一个程序有多个线程并行的执行；</li><li>在HotSpot JVM，每个线程都与操作系统的本地线程直接映射。<ul><li>当一个java线程准备好执行以后，此时一个操作系统的本地线程也同时创建。java线程执行终止后。本地线程也会回收。</li></ul></li><li>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用java线程中的run()方法。</li></ul><p>如果你使用jconsole或者任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用main方法的main线程以及所有这个main线程自己创建的线程。</p><p>这些主要的后台系统线程在HotSpot JVM里主要是以下几个：</p><ul><li>虚拟机线程：这种线程的操作时需要JVM达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要JVM达到安全点，这样堆才不会变化。这种线程的执行包括“stop-the-world”的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销</li><li>周期任务线程：这种线程是时间周期事件的提现（比如中断），他们一般用于周期性操作的调度执行。</li><li>GC线程：这种线程对于JVM里不同种类的垃圾收集行为提供了支持</li><li>编译线程：这种线程在运行时会降字节码编译成本地代码</li><li>信号调度线程：这种线程接收信号并发送给JVM,在它内部通过调用适当的方法进行处理。</li></ul><hr><h2 id="程序计数器（PC寄存器）"><a href="#程序计数器（PC寄存器）" class="headerlink" title="程序计数器（PC寄存器）"></a>程序计数器（PC寄存器）</h2><h3 id="1-PC-Register介绍"><a href="#1-PC-Register介绍" class="headerlink" title="1 PC Register介绍"></a>1 PC Register介绍</h3><p><img src="/2020/07/05/JVM-02/PC%E8%AE%A1%E6%95%B0%E5%99%A81.png" alt="PC Register"></p><p>JVM中的程序计数寄存器(Program Counter Register) 中，(Register 的命名源于CPU的寄存器)，寄存器存储指令相关的现场信息。CPU只有把数据装载到寄存器才能够运行。</p><p>这里，并非是广义上所指的物理寄存器，或许将其翻译为PC计数器(或指令计数器)会更加贴<br>切(也称为程序钩子)，并且也不容易引起一些不必要的误会。<strong>JVM中的PC寄存器是对物理PC<br>寄存器的一种抽象模拟。</strong></p><p><img src="/2020/07/05/JVM-02/PC%E8%AE%A1%E6%95%B0%E5%99%A82.png" alt="程序计数器"></p><p><strong>作用:</strong><br>PC寄存器用来存储指向下一条指令的地址, 也即 将要执行的指令代码。由执行引擎读取下一条指令。</p><p>● 它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。</p><p>● 在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</p><p>● 任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址; 或者，如果是在执行native方法，则是未指定值(undefined) 。</p><p>● 它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>● 字节码解释器工作时就是通过改变这个计数器的值来选取下–条需要执行的字节码指令。</p><p>● 它是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p><h3 id="2-举例说明"><a href="#2-举例说明" class="headerlink" title="2 举例说明"></a>2 举例说明</h3><p>PCRegisterTest.java</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020 下午 6:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PCRegisterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> k = i + j;</span><br><span class="line"></span><br><span class="line">        String s = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(k);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>反编译字节码文件PCRegisterTest.class</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">✘  yan  ~/Documents/JVMDemo/out/production/chapter04/com/atguigu/java  javap -v PCRegisterTest<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">Classfile</span> /<span class="title">Users</span>/<span class="title">yan</span>/<span class="title">Documents</span>/<span class="title">JVMDemo</span>/<span class="title">out</span>/<span class="title">production</span>/<span class="title">chapter04</span>/<span class="title">com</span>/<span class="title">atguigu</span>/<span class="title">java</span>/<span class="title">PCRegisterTest</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">  <span class="title">Last</span> <span class="title">modified</span> 2020年7月5日</span>; size <span class="number">675</span> bytes</span><br><span class="line">  SHA-<span class="number">256</span> checksum <span class="number">6</span>d6064bc667d30ba9df207ccebde55ddbd06ff1e10082daf6379a03eae51bfa2</span><br><span class="line">  Compiled from <span class="string">"PCRegisterTest.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">atguigu</span>.<span class="title">java</span>.<span class="title">PCRegisterTest</span></span></span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: <span class="number">52</span></span><br><span class="line">  flags: (<span class="number">0x0021</span>) ACC_PUBLIC, ACC_SUPER</span><br><span class="line">  this_class: #5                          // com/atguigu/java/PCRegisterTest</span><br><span class="line">  super_class: #6                         // java/lang/Object</span><br><span class="line">  interfaces: <span class="number">0</span>, fields: <span class="number">0</span>, methods: <span class="number">2</span>, attributes: <span class="number">1</span></span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #6.#26         // java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   #2 = String             #27            // abc</span><br><span class="line">   #3 = Fieldref           #28.#29        // java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">   #4 = Methodref          #30.#31        // java/io/PrintStream.println:(I)V</span><br><span class="line">   #5 = Class              #32            // com/atguigu/java/PCRegisterTest</span><br><span class="line">   #6 = Class              #33            // java/lang/Object</span><br><span class="line">   #7 = Utf8               &lt;init&gt;</span><br><span class="line">   #8 = Utf8               ()V</span><br><span class="line">   #9 = Utf8               Code</span><br><span class="line">  #10 = Utf8               LineNumberTable</span><br><span class="line">  #11 = Utf8               LocalVariableTable</span><br><span class="line">  #12 = Utf8               this</span><br><span class="line">  #13 = Utf8               Lcom/atguigu/java/PCRegisterTest;</span><br><span class="line">  #14 = Utf8               main</span><br><span class="line">  #15 = Utf8               ([Ljava/lang/String;)V</span><br><span class="line">  #16 = Utf8               args</span><br><span class="line">  #17 = Utf8               [Ljava/lang/String;</span><br><span class="line">  #18 = Utf8               i</span><br><span class="line">  #19 = Utf8               I</span><br><span class="line">  #20 = Utf8               j</span><br><span class="line">  #21 = Utf8               k</span><br><span class="line">  #22 = Utf8               s</span><br><span class="line">  #23 = Utf8               Ljava/lang/String;</span><br><span class="line">  #24 = Utf8               SourceFile</span><br><span class="line">  #25 = Utf8               PCRegisterTest.java</span><br><span class="line">  #26 = NameAndType        #7:#8          // "&lt;init&gt;":()V</span><br><span class="line">  #27 = Utf8               abc</span><br><span class="line">  #28 = Class              #34            // java/lang/System</span><br><span class="line">  #29 = NameAndType        #35:#36        // out:Ljava/io/PrintStream;</span><br><span class="line">  #30 = Class              #37            // java/io/PrintStream</span><br><span class="line">  #31 = NameAndType        #38:#39        // println:(I)V</span><br><span class="line">  #32 = Utf8               com/atguigu/java/PCRegisterTest</span><br><span class="line">  #33 = Utf8               java/lang/Object</span><br><span class="line">  #34 = Utf8               java/lang/System</span><br><span class="line">  #35 = Utf8               out</span><br><span class="line">  #36 = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #37 = Utf8               java/io/PrintStream</span><br><span class="line">  #38 = Utf8               println</span><br><span class="line">  #39 = Utf8               (I)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> com.atguigu.java.PCRegisterTest();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">7</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/atguigu/java/PCRegisterTest;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: (<span class="number">0x0009</span>) ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">5</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: istore_1</span><br><span class="line">         <span class="number">3</span>: bipush        <span class="number">20</span></span><br><span class="line">         <span class="number">5</span>: istore_2</span><br><span class="line">         <span class="number">6</span>: iload_1</span><br><span class="line">         <span class="number">7</span>: iload_2</span><br><span class="line">         <span class="number">8</span>: iadd</span><br><span class="line">         <span class="number">9</span>: istore_3</span><br><span class="line">        10: ldc           #2                  // String abc</span><br><span class="line">        <span class="number">12</span>: astore        <span class="number">4</span></span><br><span class="line">        14: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        <span class="number">17</span>: iload_1</span><br><span class="line">        18: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">        21: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        <span class="number">24</span>: iload_3</span><br><span class="line">        25: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">        <span class="number">28</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">11</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">6</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">15</span>: <span class="number">14</span></span><br><span class="line">        line <span class="number">16</span>: <span class="number">21</span></span><br><span class="line">        line <span class="number">18</span>: <span class="number">28</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">29</span>     <span class="number">0</span>  args   [Ljava/lang/String;</span><br><span class="line">            <span class="number">3</span>      <span class="number">26</span>     <span class="number">1</span>     i   I</span><br><span class="line">            <span class="number">6</span>      <span class="number">23</span>     <span class="number">2</span>     j   I</span><br><span class="line">           <span class="number">10</span>      <span class="number">19</span>     <span class="number">3</span>     k   I</span><br><span class="line">           <span class="number">14</span>      <span class="number">15</span>     <span class="number">4</span>     s   Ljava/lang/String;</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">"PCRegisterTest.java"</span></span><br></pre></td></tr></table></figure></div><hr><p><img src="/2020/07/05/JVM-02/PC%E8%AE%A1%E6%95%B0%E5%99%A83.png" alt="理解PC计数器"></p><h3 id="3-两个面试常见问题"><a href="#3-两个面试常见问题" class="headerlink" title="3 两个面试常见问题"></a>3 两个面试常见问题</h3><p><strong>（一） 使用PC寄存器存储字节码指令地址有什么用呢</strong>?<br>或者说<br><strong>为什么使用PC寄存器记录当前线程的执行地址呢</strong>?</p><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。<br>JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p><p><strong>（二） PC寄存器为什么会被设定为线程私有</strong>?</p><p>我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法， CPU会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢? <strong>为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个PC寄存器</strong>，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p><p>由于CPU时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p><p>这样必然导致经常中断或恢复，如何保证分毫无差呢? 每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p><hr><p>CPU时间片</p><p>CPU时间片即CPU分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片。</p><p>在宏观上:我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。</p><p>但在微观上:由于只有一个CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，每个程序轮流执行。</p><hr>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;JVM内存布局及Java线程、PC寄存器&quot;&gt;&lt;a href=&quot;#JVM内存布局及Java线程、PC寄存器&quot; class=&quot;headerlink&quot; title=&quot;JVM内存布局及Java线程、PC寄存器&quot;&gt;&lt;/a&gt;JVM内存布局及Java线程、PC寄存器&lt;/h2&gt;&lt;h3 id=&quot;JVM内存划分&quot;&gt;&lt;a href=&quot;#JVM内存划分&quot; class=&quot;headerlink&quot; title=&quot;JVM内存划分&quot;&gt;&lt;/a&gt;JVM内存划分&lt;/h3&gt;&lt;p&gt;内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM内存布局规定了JAVA在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。&lt;strong&gt;不同的JVM对于内存的划分方式和管理机制存在着部分差异&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://xiaoyan94.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM 01 类加载器及类加载过程</title>
    <link href="https://xiaoyan94.github.io/2020/07/03/JVM-01/"/>
    <id>https://xiaoyan94.github.io/2020/07/03/JVM-01/</id>
    <published>2020-07-03T08:13:14.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述类的加载器及类加载过程"><a href="#概述类的加载器及类加载过程" class="headerlink" title="概述类的加载器及类加载过程"></a>概述类的加载器及类加载过程</h2><ul><li>类的加载过程一： Loading 加载</li><li>类的加载过程二： Linking 链接<ul><li>Verification 验证</li><li>Preparation 准备</li><li>Resolution 解析</li></ul></li><li>类的加载过程三： Initialization 初始化</li></ul><a id="more"></a><h3 id="概述类的加载器"><a href="#概述类的加载器" class="headerlink" title="概述类的加载器"></a>概述类的加载器</h3><p><img src="/2020/07/03/JVM-01/JVM.png" alt="JVM"></p><p>Java环境： Java 8</p><h4 id="类加载器子系统作用"><a href="#类加载器子系统作用" class="headerlink" title="类加载器子系统作用"></a>类加载器子系统作用</h4><ul><li>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。</li><li>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</li><li>加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量(这部分常量信息是Class文件中常量池部分的内存映射)</li></ul><h4 id="类加载器ClassLoader角色"><a href="#类加载器ClassLoader角色" class="headerlink" title="类加载器ClassLoader角色"></a>类加载器ClassLoader角色</h4><ol><li>class file 存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。</li><li>class file 加载到JVM中,被称为DNA元数据模板,放在方法区。</li><li>在.class文件-&gt; JVM -&gt;最终成为元数据模板,此过程就要一个运输工具(类装载器Class Loader) ,扮演一个快递员的角色。</li></ol><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><ul><li>Loading 加载</li><li>Linking 链接<ul><li>Verification 验证</li><li>Preparation 准备</li><li>Resolution 解析</li></ul></li><li>Initialization 初始化</li></ul><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><ol><li>通过一个类的全限定名获取定义此类的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li></ol><p>补充:加载.class 文件的方式</p><ul><li>从本地系统中直接加载</li><li>通过网络获取，典型场景: Web Applet</li><li>从zip压缩包中读取，成为日后jar、war格式的基础</li><li>运行时计算生成，使用最多的是:动态代理技术</li><li>由其他文件生成，典型场景: JSP应用</li><li>从专有数据库中提取.class文件，比较少见</li><li>从加密文件中获取，典型的防Class文件被反编译的保护措施</li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>验证(Verify) :</p><ul><li>目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</li><li>主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</li></ul><p>准备(Prepare) :</p><ul><li>为类变量分配内存并且设置该类变量的默认初始值，即零值。</li><li>这里不包含用final修饰的static,因为final在编译的时候就会分配了，准备阶段会显式初始化;</li><li>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</li></ul><p>解析(Resolve) :</p><ul><li>将常量池内的符号引用转换为直接引用的过程。</li><li>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。</li><li>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</li><li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的 CONSTANT_Class_info、 CONSTANT_Fieldref_info、 CONSTANT_Methodref_info等 。</li></ul><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ul><li><strong>初始化阶段就是执行类构造器方法&lt;clinit&gt;()的过程。</strong></li><li>此方法不需定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</li><li>构造器方法中指令按语句在源文件中出现的顺序执行。</li><li><strong>&lt;clinit&gt;()不同于类的构造器。(关联:构造器是虚拟机视角下的&lt;init&gt;())</strong></li><li>若该类具有父类，JVM会保证子类的&lt;clinit&gt;()执行前，父类的&lt;clinit&gt;()已经执行完毕。</li><li>虚拟机必须保证一个类的&lt;clinit&gt;()方法在多线程下被同步加锁。</li></ul><hr><h4 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h4><p>ClassInitTest.java</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassInitTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        num = <span class="number">2</span>;</span><br><span class="line">        number = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// System.out.println(num); //不会报错</span></span><br><span class="line">        <span class="comment">// System.out.println(number);// 报错，非法的前向引用 Illegal forward reference</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> number = <span class="number">10</span>; <span class="comment">//linking之prepare: number = 0 --&gt; initial: 20 --&gt; 10</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(ClassInitTest.num);<span class="comment">//2</span></span><br><span class="line">        System.out.println(ClassInitTest.number);<span class="comment">//10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>ClassInitTest.class</p><p>字节码文件：Method - &lt;clinit&gt; -  code</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> iconst_1</span><br><span class="line"> 1 putstatic #3 &lt;com/example/java/ClassInitTest.num&gt;</span><br><span class="line"> <span class="number">4</span> iconst_2</span><br><span class="line"> 5 putstatic #3 &lt;com/example/java/ClassInitTest.num&gt;</span><br><span class="line"> <span class="number">8</span> bipush <span class="number">20</span></span><br><span class="line">10 putstatic #5 &lt;com/example/java/ClassInitTest.number&gt;</span><br><span class="line"><span class="number">13</span> bipush <span class="number">10</span></span><br><span class="line">15 putstatic #5 &lt;com/example/java/ClassInitTest.number&gt;</span><br><span class="line"><span class="number">18</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></div><hr><p>ClinitTest.java</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClinitTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//任何一个类声明以后，内部至少存在一个类的构造器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClinitTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>ClinitTest.class</p><p>字节码文件：Method - &lt;clinit&gt; -  code</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> iconst_3</span><br><span class="line">1 putstatic #3 &lt;com/example/java/ClinitTest.c&gt;</span><br><span class="line"><span class="number">4</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></div><p>字节码文件：Method - &lt;init&gt; -  code</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> aload_0</span><br><span class="line"> 1 invokespecial #1 &lt;java/lang/Object.&lt;init&gt;&gt;</span><br><span class="line"> <span class="number">4</span> aload_0</span><br><span class="line"> <span class="number">5</span> iconst_1</span><br><span class="line"> 6 putfield #2 &lt;com/example/java/ClinitTest.a&gt;</span><br><span class="line"> <span class="number">9</span> aload_0</span><br><span class="line"><span class="number">10</span> bipush <span class="number">10</span></span><br><span class="line">12 putfield #2 &lt;com/example/java/ClinitTest.a&gt;</span><br><span class="line"><span class="number">15</span> bipush <span class="number">20</span></span><br><span class="line"><span class="number">17</span> istore_1</span><br><span class="line"><span class="number">18</span> <span class="keyword">return</span></span><br></pre></td></tr></table></figure></div><hr><p>多线程，验证 &lt;clinit&gt;() 方法被同步加锁：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable r = () -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"开始"</span>);</span><br><span class="line">            DeadThread dead = <span class="keyword">new</span> DeadThread();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"结束"</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(r, <span class="string">"线程1 "</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(r, <span class="string">"线程2 "</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"初始化当前类"</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>程序输出：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线程1 开始</span><br><span class="line">线程2 开始</span><br><span class="line">线程1 初始化当前类</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 130 (interrupted by signal 2: SIGINT)</span><br></pre></td></tr></table></figure></div><p>或者是</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">线程2 开始</span><br><span class="line">线程1 开始</span><br><span class="line">线程2 初始化当前类</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 130 (interrupted by signal 2: SIGINT)</span><br></pre></td></tr></table></figure></div><hr><h3 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h3><ul><li>JVM支持两种类型的类加载器，分别为<strong>引导类加载器 (Bootstrap ClassLoader)</strong> 和<strong>自定义类加载器(User-Defined ClassLoader)</strong> 。</li><li>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是<strong>将所有派生于抽象类 <code>ClassLoader</code> 的类加载器都划分为自定义类加载器。</strong></li><li>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示:<ul><li>Bootstrap Class Loader</li><li>Extension Class Loader</li><li>System Class Loader</li><li>User Defined Class Loader</li></ul></li></ul><p>这里的四者之间的关系是包含关系。不是上层下层，也不是子父类的继承关系。</p><hr><p>ClassLoaderTest.java</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        <span class="comment">//获取其上层: 扩展类加载器</span></span><br><span class="line">        ClassLoader extClassLoader = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(extClassLoader);<span class="comment">//sun.misc.Launcher$ExtClassLoader@1540e19d</span></span><br><span class="line">        <span class="comment">//获取其上层: 获取不到引导类加载器</span></span><br><span class="line">        ClassLoader bootstrapClassLoader = extClassLoader.getParent();</span><br><span class="line">        System.out.println(bootstrapClassLoader);<span class="comment">//null</span></span><br><span class="line">        <span class="comment">//对于用户自定义类来说: 默认使用系统类加载器进行加载</span></span><br><span class="line">        ClassLoader classLoader = ClassLoaderTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        <span class="comment">//String类使用引导类加载器进行加载的。---&gt; Java的核心类库都是使用引导类加载器进行加载的。</span></span><br><span class="line">        ClassLoader classLoader1 = String<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@<span class="number">61</span>bbe9ba</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></div><hr><h4 id="虚拟机自带的加载器"><a href="#虚拟机自带的加载器" class="headerlink" title="虚拟机自带的加载器"></a>虚拟机自带的加载器</h4><p>启动类加载器(引导类加载器，Bootstrap ClassLoader)</p><ul><li>➢ 这个类加载使用C&#x2F;C++语言实现的，嵌套在JVM内部。</li><li>➢ 它用来加载Java的核心库( <code>JAVA_ HOME/jre/lib/rt.jar</code> 、<code>resources.jar</code> 或 <code>sun.boot.class.path</code> 路径下的内容) , 用于提供JVM自身需要的类</li><li>➢ 并不继承自 <code>java.lang.ClassLoader</code> ,没有父加载器。</li><li>➢ 加载扩展类和应用程序类加载器，并指定为他们的父类加载器。</li><li>➢ 出于安全考虑，Bootstrap启动类加载器只加载包名为 <code>java、javax、sun</code> 等开头的类</li></ul><p>扩展类加载器(Extension ClassLoader)</p><ul><li>➢ <strong>Java语言编写</strong>，由 <code>sun.misc.Launcher$ExtClassLoader</code> 实现。</li><li>➢ <strong>派生于 <code>ClassLoader</code> 类</strong></li><li>➢ 父类加载器为启动类加载器</li><li>➢ 从 <code>java.ext.dirs</code> 系统属性所指定的目录中加载类库，或从JDK的安装目录的 <code>jre/lib/ext</code> 子目录(扩展目录)下加载类库。如果用户创建的JAR放在此目录下，也会自动由扩展类加载器加载。</li></ul><p>应用程序类加载器(系统类加载器，AppClassLoader)</p><ul><li>➢ java语言编写，由 <code>sun.misc.Launcher$AppClassLoader</code> 实现</li><li>➢ 派生于 <code>ClassLoader</code> 类</li><li>➢ 父类加载器为扩展类加载器</li><li>➢ 它负责加载环境变量classpath或系统属性 <code>java.class.path</code> 指定路径下的类库</li><li>➢ <strong>该类加载是程序中默认的类加载器</strong>，一般来说，Java应用的类都是由它来完成加载</li><li>➢ 通过 <code>ClassLoader#getSystemClassLoader()</code> 方法可以获取到该类加载器</li></ul><hr><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.security.Provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"******启动类加載器*******"</span>);</span><br><span class="line">        <span class="comment">//荻取BootstrapClassLoader能够加栽的api的路径</span></span><br><span class="line">        URL[] urLs = sun.misc.Launcher.getBootstrapClassPath().getURLs();</span><br><span class="line">        <span class="keyword">for</span> (URL element : urLs) &#123;</span><br><span class="line">            System.out.println(element.toExternalForm());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从上面的路径中随意选择一个美, 来看看他的类加載器是什么:</span></span><br><span class="line">        ClassLoader classLoader = Provider<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"******扩展类加載器******"</span>);</span><br><span class="line">        String extDirs = System.getProperty(<span class="string">"java.ext.dirs"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// macOS下环境变量的分隔符是:</span></span><br><span class="line">        <span class="comment">// Windows下分隔符是;</span></span><br><span class="line">        <span class="keyword">for</span> (String path : extDirs.split(<span class="string">":"</span>)) &#123;</span><br><span class="line">            System.out.println(path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从上面的路径中随意选择一个类，来看看他的类加载器是什么:扩展类加载器</span></span><br><span class="line">        ClassLoader classLoader1 = CurveDB<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//sun.misc.Launcher$ExtClassLoader@1540e19d</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">******启动类加載器*******</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/lib/resources.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/lib/rt.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/lib/sunrsasign.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/lib/jsse.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/lib/jce.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/lib/charsets.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/lib/jfr.jar</span><br><span class="line">file:/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/classes</span><br><span class="line">null</span><br><span class="line">******扩展类加載器******</span><br><span class="line">/Users/yan/Library/Java/Extensions</span><br><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_251.jdk/Contents/Home/jre/lib/ext</span><br><span class="line">/Library/Java/Extensions</span><br><span class="line">/Network/Library/Java/Extensions</span><br><span class="line">/System/Library/Java/Extensions</span><br><span class="line">/usr/lib/java</span><br><span class="line">sun.misc.Launcher<span class="variable">$ExtClassLoader</span>@355da254</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure></div><hr><h4 id="用户自定义类加载器"><a href="#用户自定义类加载器" class="headerlink" title="用户自定义类加载器"></a>用户自定义类加载器</h4><ul><li>在Java的日常应用程序开发中，类的加载几乎是由上述3种类加载器相互配合执行的，在必要时，我们还可以自定义类加载器，来定制类的加载方式。</li><li>为什么要自定义类加载器?<ul><li>➢ 隔离加载类</li><li>➢ 修改类加载的方式</li><li>➢ 扩展加载源</li><li>➢ 防止源码泄漏</li></ul></li></ul><p>用户自定义类加载器实现步骤:</p><ol><li>开发人员可以通过继承抽象类 <code>java.lang.ClassLoader</code> 类的方式，实现自己的类加载器，以满足一些特殊的需求</li><li>在JDK1.2之前，在自定义类加载器时，总会去继承 <code>ClassLoader</code> 类并重写 <code>loadClass()</code> 方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖 <code>loadClass()</code> 方法，而是建议把自定义的类加载逻辑写在 <code>findClass()</code> 方法中</li><li>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承 <code>URLClassLoader</code> 类，这样就可以避免自己去编写 <code>findClass()</code> 方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</li></ol><hr><p>手写自定义类加载器：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = getClassFromCustomPath(name);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defineClass(name, result, <span class="number">0</span>, result.length); <span class="comment">//</span></span><br><span class="line">                <span class="comment">// findClass和defineClass配合使用</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassFromCustomPath(String name) &#123;</span><br><span class="line">        <span class="comment">//从自定义路径中加载指定类:细节略</span></span><br><span class="line">        <span class="comment">//如果指定路径的字节码文件进行了加密，则需要在此方法中进行解密操作。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><p>ClassLoader类， 它是一个抽象类，其后所有的类加载器都继承自 ClassLoader (不包括启动类加载器)</p><blockquote><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>getParent()</td><td>返回该类加载器的超类加载器</td></tr><tr><td>loadClass(String name)</td><td>加载名称为name的类，返回结果为 <code>java.lang.Class</code> 类的实例</td></tr><tr><td>findClass(String name)</td><td>查找名称为name的类，返回结果为 <code>java.lang.Class</code> 类的实例</td></tr><tr><td>findLoadedClass(String name)</td><td>查找名称为name的已经被加载过的类，返回结果为 <code>java.lang.Class</code> 类的实例</td></tr><tr><td>defineClass(String name, byte[] b, int off, int len)</td><td>把字节数组b中的内容转换为一个Java类，返回结果为 <code>java.lang.Class</code> 类的实例</td></tr><tr><td>resolveClass(Class&lt;?&gt; c)</td><td>连接指定的一个Java类</td></tr></tbody></table></blockquote><p>获取ClassLoader的途径</p><table><thead><tr><th>方式</th><th>方法</th></tr></thead><tbody><tr><td>方式一: 获取当前类的ClassLoader</td><td>clazz.getClassLoader()</td></tr><tr><td>方式二: 获取当前线程上下文的ClassLoader</td><td>Thread.currentThread().getContextClassLoader()</td></tr><tr><td>方式三: 获取系统的ClassLoader</td><td>ClassLoader.getSystemClassLoader()</td></tr><tr><td>方式四: 获取调用者的ClassLoader</td><td>DriverManager.getCallerClassLoader()</td></tr></tbody></table><h4 id="🌿-双亲委派机制"><a href="#🌿-双亲委派机制" class="headerlink" title="🌿 双亲委派机制"></a>🌿 双亲委派机制</h4><p>Java虚拟机对class文件采用的是<strong>按需加载</strong>的方式，也就是说当需要使用该类时才会将它的class文件加载到内存生成class对象。而且加载某个类的class文件时，Java虛拟机采用的是<strong>双亲委派模式</strong>，即把请求交由父类处理，它是一种任务委派模式。</p><p>● 工作原理</p><ol><li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行;</li><li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达项层的启动类加载器;</li><li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</li></ol><hr><p>双亲委派机制举例：自己手写一个String类放在自建的java.lang包下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"我是自定义的String类的静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello,String"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行，输出：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Process finished with exit code 1</span></span><br></pre></td></tr></table></figure></div><p><em>为什么有以上输出？</em></p><p>由于双亲委派机制，我们自定义的 <code>java.lang.String</code> 类并不是由系统类加载器加载的，而是向上委托给了扩展类加载器又接着向上委托给了启动类加载器进行加载，而启动类加载器加载的是java核心API中的 <code>java.lang.String</code> 类而不是我们自定义的 <code>java.lang.String</code> 类，其中并没有main方法。</p><hr><p>双亲委派机制举例2</p><p>rt.jar SPI（Service Provider Interface）核心类<br>jdbc.jar SPI接口实现类</p><p>rt.jar中的SPI接口调用接口实现类中的方法：</p><ul><li>SPI接口是由引导类加载器（BootstrapClassLoader）加载的</li><li>SPI接口实现类是由线程上下文加载器（ContextClassLoader）加载的，而线程上下文加载器默认为系统类加载器（AppClassLoader）加载的</li></ul><hr><p>● 双亲委派机制 优势</p><ul><li>➢ 避免类的重复加载 （两个必要条件）</li><li>➢ 保护程序安全，防止核心API被随意篡改<ul><li>自定义类: java.lang.String</li><li>自定义类: java.lang.ShkStart<ul><li>java.lang.SecurityException: Prohibited package name; java.lang</li></ul></li></ul></li></ul><p>● 在JVM中 表示两个class对象是否为同一个类存在两个必要条件:</p><ul><li>➢ 类的完整类名必须一致，包括包名。</li><li>➢ 加载这个类的ClassLoader (指ClassLoader实例对象)必须相同。</li></ul><p>换句话说，在JVM中，即使这两个类对象(class对象)来源同一个Class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。</p><p>自定义String类，但是在加载自定义String类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件(rt.jar包中java\lang\String.class)，报错信息说没有main方法，就是因为加载的是rt.jar包中的String类。这样可以保证对java核心源代码的保护，这就是<strong>沙箱安全机制</strong>。</p><hr><h3 id="对类加载器的引用、类的主动使用和被动使用"><a href="#对类加载器的引用、类的主动使用和被动使用" class="headerlink" title="对类加载器的引用、类的主动使用和被动使用"></a>对类加载器的引用、类的主动使用和被动使用</h3><p>对类加载器的引用：</p><p>JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会<strong>将这个类加载器的一个引用作为类型信息的一部分保存在方法区中</strong>。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</p><p>类的主动使用和被动使用：</p><p><strong>Java程序对类的使用方式分为: 主动使用和被动使用。</strong><br>● 主动使用，又分为七种情况:</p><ul><li>➢ 创建类的实例</li><li>➢ 访问某个类或接口的静态变量，或者对该静态变量赋值</li><li>➢ 调用类的静态方法</li><li>➢ 反射(比如: <code>Class.forName(&quot;com.atguigu.Test&quot;)</code> )</li><li>➢ 初始化一个类的子类</li><li>➢ Java虚拟机启动时被标明为启动类的类</li><li>➢ JDK 7开始提供的动态语言支持:<ul><li><code>java.lang.invoke.MethodHandle</code> 实例的解析结果</li><li><code>REF_getStatic</code>、 <code>REF_putStatic</code>、 <code>REF_invokeStatic</code> 句柄对应的类没有初始化，则初始化</li></ul></li></ul><p>● 除了以上七种情况，其他使用Java类的方式都被看作是<strong>对类的被动使用，都不会导致类的初始化</strong>。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述类的加载器及类加载过程&quot;&gt;&lt;a href=&quot;#概述类的加载器及类加载过程&quot; class=&quot;headerlink&quot; title=&quot;概述类的加载器及类加载过程&quot;&gt;&lt;/a&gt;概述类的加载器及类加载过程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;类的加载过程一： Loading 加载&lt;/li&gt;
&lt;li&gt;类的加载过程二： Linking 链接&lt;ul&gt;
&lt;li&gt;Verification 验证&lt;/li&gt;
&lt;li&gt;Preparation 准备&lt;/li&gt;
&lt;li&gt;Resolution 解析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类的加载过程三： Initialization 初始化&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="JVM" scheme="https://xiaoyan94.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop Mapreduce作业执行过程中报错 this version of the Java Runtime only recognizes class file versions up to 52.0</title>
    <link href="https://xiaoyan94.github.io/2020/06/30/mapreduce-error-version-of-the-Java-Runtime-only-recognizes-class-file-versions-up-to-52/"/>
    <id>https://xiaoyan94.github.io/2020/06/30/mapreduce-error-version-of-the-Java-Runtime-only-recognizes-class-file-versions-up-to-52/</id>
    <published>2020-06-30T08:48:46.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>该错误告诉我们，我们的类是在比尝试运行它的版本更高的Java版本下编译的。 更具体地说，在这种情况下，我们使用Java 11编译了我们的类，并尝试使用Java 8运行它。</p><a id="more"></a><p><strong>问题描述：</strong></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">20/06/29 09:49:35 INFO mapreduce.Job: Job job_1593438508655_0001 running <span class="keyword">in</span> uber mode : <span class="literal">false</span></span><br><span class="line">20/06/29 09:49:35 INFO mapreduce.Job:  map 0% reduce 0%</span><br><span class="line">20/06/29 09:49:45 INFO mapreduce.Job: Task Id : attempt_1593438508655_0001_m_000000_0, Status : FAILED</span><br><span class="line">Error: com/kumkee/userAgent/UserAgentParser has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0</span><br><span class="line">20/06/29 09:49:51 INFO mapreduce.Job: Task Id : attempt_1593438508655_0001_m_000000_1, Status : FAILED</span><br><span class="line">--&gt;</span><br><span class="line">Error: com/kumkee/userAgent/UserAgentParser has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0</span><br><span class="line">20/06/29 09:49:58 INFO mapreduce.Job: Task Id : attempt_1593438508655_0001_m_000000_2, Status : FAILED</span><br><span class="line">Error: com/kumkee/userAgent/UserAgentParser has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0</span><br><span class="line">20/06/29 09:50:06 INFO mapreduce.Job:  map 100% reduce 100%</span><br><span class="line">20/06/29 09:50:07 INFO mapreduce.Job: Job job_1593438508655_0001 failed with state FAILED due to: Task failed task_1593438508655_0001_m_000000</span><br><span class="line">Job failed as tasks failed. failedMaps:1 failedReduces:0</span><br></pre></td></tr></table></figure></div><p><strong>解决方法：</strong></p><p><a href="https://www.baeldung.com/java-lang-unsupportedclassversion" target="_blank" rel="noopener">参考这篇文章得到</a>：这个错误是因为类com&#x2F;kumkee&#x2F;userAgent&#x2F;UserAgentParser的编译版本与Hadoop服务器本地所用的Java版本不一致，只要重新用支持的版本号去重新编译引入的这个jar包就行了。</p><p>this version of the Java Runtime only recognizes class file versions up to 52.0 表示Java运行时的版本最高支持到52.0，也就是Java 8，因为机器上装的JDK版本就是JDK 1.8的。</p><p>修改报错的类的<code>pom.xml</code>,将编译器的版本数字从原本的11改为8，也就是java8：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kumkee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>UserAgentParser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>然后使用maven重新编译安装到本地仓库：<code>mvn clean install</code></p><p>再在Hadoop项目根目录下重新编译项目，将重新用java8编译的jar包包含进来：<code>mvn assembly:assembly</code></p><p>最后将hadoop项目的jar文件重新上传至hadoop服务器即可正常运行。</p><hr><p>关于主版本号和JAVA版本的对应关系如下：</p><table><thead><tr><th>major version</th><th>Java&#x2F;JDK version</th></tr></thead><tbody><tr><td>45</td><td>Java 1.1</td></tr><tr><td>46</td><td>Java 1.2</td></tr><tr><td>47</td><td>Java 1.3</td></tr><tr><td>48</td><td>Java 1.4</td></tr><tr><td>49</td><td>Java 5</td></tr><tr><td>50</td><td>Java 6</td></tr><tr><td>51</td><td>Java 7</td></tr><tr><td>52</td><td>Java 8</td></tr><tr><td>53</td><td>Java 9</td></tr><tr><td>54</td><td>Java 10</td></tr><tr><td>55</td><td>Java 11</td></tr><tr><td>56</td><td>Java 12</td></tr><tr><td>57</td><td>Java 13</td></tr></tbody></table><p>最后，这种错误的意思就是程序的编译使用的版本与运行版本不一致所导致的，使用更高的java版本编译在低版本的java当然不能运行。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.UnsupportedClassVersionError: com/baeldung/MajorMinorApp</span><br><span class="line">  has been compiled by a more recent version of the Java Runtime (class file version 55.0),</span><br><span class="line">  this version of the Java Runtime only recognizes class file versions up to 52.0</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;该错误告诉我们，我们的类是在比尝试运行它的版本更高的Java版本下编译的。 更具体地说，在这种情况下，我们使用Java 11编译了我们的类，并尝试使用Java 8运行它。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hadoop" scheme="https://xiaoyan94.github.io/tags/Hadoop/"/>
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
    <category term="Maven" scheme="https://xiaoyan94.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>8088端口能打开但是打不开hadoop job history Tracking UI和日志Logs等页面</title>
    <link href="https://xiaoyan94.github.io/2020/06/30/couldn-t-open-hadoop-job-tracker-webui-because-of-localhost-in-url/"/>
    <id>https://xiaoyan94.github.io/2020/06/30/couldn-t-open-hadoop-job-tracker-webui-because-of-localhost-in-url/</id>
    <published>2020-06-30T07:54:19.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><strong>问题描述：</strong></p><p>通过<code>http://ip:8088/</code>能够访问<code>All Applications</code>页面，但是在执行一个application完之后，通过网页中的<code>Tracking UI</code> -&gt; <code>History</code>链接跳转到<code>http://localhost:8088/proxy/application_..._0001/jobhistory/job/job_..._0001</code>,<code>http://localhost:19888/jobhistory</code>页面。但是因为Hadoop服务器是部署在公网的，而8088端口的管理界面中的jobhistory链接和Logs链接、Node链接中的主机名（hostname）都是 localhost 而不是服务器的公网ip地址。</p><p>而且查看Mapreduce执行时终端的日志信息有这么一句：<br><code>INFO mapreduce.Job: The url to track the job: http://localhost:8088/proxy/application_..._0001/</code><br>这说明了jobtracker服务的url地址是服务器本地主机，并不是公网ip，所以job tracker url没能正确被生成。</p><p><strong>解决方法：</strong></p><p>在NameNode节点的服务器上执行<code>netstat -nltp | grep LISTEN</code>命令之后发现几个重要端口如8088、8042等服务监听都正常，试着手动将浏览器url地址中的localhost改成服务器的公网ip地址，发现是能够打开Logs和Job History等页面的。所以推测是在生成jobtracker url的时候将hostname设置成了localhost。</p><p>解决步骤： 在修改了<code>$HADOOP_HOME/etc/hadoop/mapred-site.xml</code> 和 <code>$HADOOP_HOME/etc/hadoop/yarn-site.xml</code> 两个配置文件中的几处address hostname为服务器的公网ip或者域名之后就正常了。<em>注意：不能填0.0.0.0！</em></p><ul><li>$HADOOP_HOME&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>23.105.206.170:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>23.105.206.170:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>/history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>/history/done_intermediate<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobtracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>23.105.206.170<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>$HADOOP_HOME&#x2F;etc&#x2F;hadoop&#x2F;yarn-site.xml</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启日志聚合--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>yarn-default.xml<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.bind-host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>23.105.206.170<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>23.105.206.170<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>23.105.206.170:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>修改完这两个配置文件之后重启HDFS和YARN服务，再次用<code>hadoop jar</code>执行一个application：<br><code>INFO mapreduce.Job: The url to track the job: http://23.105.206.170.16clouds.com:8088/proxy/application_1593439350379_0001/</code><br>终端输出的日志信息中的jobtracker url从localhost变成了服务器的ip地址或者域名，此时应该就正常了。再次浏览器打开8088 applications页面，发现网页中的所有超链接都正常指向了公网ip或域名。</p><hr><p>默认配置项及配置项说明文件：  </p><ul><li><a href="https://hadoop.apache.org/docs/r2.4.1/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml" target="_blank" rel="noopener">https://hadoop.apache.org/docs/r2.4.1/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml</a></li><li><a href="https://hadoop.apache.org/docs/r2.9.2/hadoop-yarn/hadoop-yarn-common/yarn-default.xml" target="_blank" rel="noopener">https://hadoop.apache.org/docs/r2.9.2/hadoop-yarn/hadoop-yarn-common/yarn-default.xml</a></li></ul>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Hadoop" scheme="https://xiaoyan94.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>Maven编译报错：[ERROR] 不再支持源选项 5。请使用 7 或更高版本。[ERROR] 不再支持目标选项 5。请使用 7 或更高版本</title>
    <link href="https://xiaoyan94.github.io/2020/06/28/maven-build-error-and-warning/"/>
    <id>https://xiaoyan94.github.io/2020/06/28/maven-build-error-and-warning/</id>
    <published>2020-06-28T09:23:28.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Maven编译报错：-ERROR-不再支持源选项-5。请使用-7-或更高版本。-ERROR-不再支持目标选项-5。请使用-7-或更高版本"><a href="#Maven编译报错：-ERROR-不再支持源选项-5。请使用-7-或更高版本。-ERROR-不再支持目标选项-5。请使用-7-或更高版本" class="headerlink" title="Maven编译报错：[ERROR] 不再支持源选项 5。请使用 7 或更高版本。[ERROR] 不再支持目标选项 5。请使用 7 或更高版本"></a>Maven编译报错：[ERROR] 不再支持源选项 5。请使用 7 或更高版本。[ERROR] 不再支持目标选项 5。请使用 7 或更高版本</h2><ul><li><p>执行 <code>mvn package -DskipTests</code>, Maven编译报错信息：</p> <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">✘  yan  ~/data/UserAgentParser   master ●  mvn package -DskipTests</span><br><span class="line">[INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] ---------------------&lt; com.kumkee:UserAgentParser &gt;---------------------</span><br><span class="line">[INFO] Building User Agent Parser 0.0.1</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/4.8.2/junit-4.8.2.pom</span><br><span class="line">Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/4.8.2/junit-4.8.2.pom (1.5 kB at 1.3 kB/s)</span><br><span class="line">Downloading from central: https://repo.maven.apache.org/maven2/junit/junit/4.8.2/junit-4.8.2.jar</span><br><span class="line">Downloaded from central: https://repo.maven.apache.org/maven2/junit/junit/4.8.2/junit-4.8.2.jar (237 kB at 204 kB/s)</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ UserAgentParser ---</span><br><span class="line">[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!</span><br><span class="line">[INFO] skip non existing resourceDirectory /Users/yan/data/UserAgentParser/src/main/resources</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ UserAgentParser ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[WARNING] File encoding has not been <span class="built_in">set</span>, using platform encoding UTF-8, i.e. build is platform dependent!</span><br><span class="line">[INFO] Compiling 7 <span class="built_in">source</span> files to /Users/yan/data/UserAgentParser/target/classes</span><br><span class="line">[INFO] -------------------------------------------------------------</span><br><span class="line">[ERROR] COMPILATION ERROR :</span><br><span class="line">[INFO] -------------------------------------------------------------</span><br><span class="line">[ERROR] 不再支持源选项 5。请使用 7 或更高版本。</span><br><span class="line">[ERROR] 不再支持目标选项 5。请使用 7 或更高版本。</span><br><span class="line">[INFO] 2 errors</span><br><span class="line">[INFO] -------------------------------------------------------------</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  3.573 s</span><br><span class="line">[INFO] Finished at: 2020-06-28T17:16:58+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project UserAgentParser: Compilation failure: Compilation failure:</span><br><span class="line">[ERROR] 不再支持源选项 5。请使用 7 或更高版本。</span><br><span class="line">[ERROR] 不再支持目标选项 5。请使用 7 或更高版本。</span><br><span class="line">[ERROR] -&gt; [Help 1]</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to <span class="built_in">enable</span> full debug logging.</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please <span class="built_in">read</span> the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException</span><br></pre></td></tr></table></figure></div><blockquote><p>[ERROR] 不再支持源选项 5。请使用 7 或更高版本。<br>  [ERROR] 不再支持目标选项 5。请使用 7 或更高版本。<br>  可以通过设置编译器版本来解决。</p><p>可以看到除了编译Error报错，还有一个[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!，这个只需要设置文件编码即可。</p></blockquote></li><li><p>解决方法：在 <code>pom.xml</code>文件中指定Maven编译所使用的JDK版本：</p> <div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kumkee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>UserAgentParser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>User Agent Parser<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定编译器版本和字符编码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">maven.compiler.encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">maven.compiler.encoding</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>13<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>13<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>13<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul><p><a href="https://github.com/LeeKemp/UserAgentParser" target="_blank" rel="noopener">https://github.com/LeeKemp/UserAgentParser</a><br>通过<code>git clone</code>或者浏览器下载到本地后，使用命令行进入到其主目录下，然后通过maven命令对其进行打包并安装到本地仓库里：</p><p><code>mvn clean package -DskipTest</code></p><p><code>mvn clean install -DskipTest</code></p><p>安装完成后，在工程pom.xml 中添加依赖：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加UserAgent解析的依赖 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kumkee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>UserAgentParser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Maven" scheme="https://xiaoyan94.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>10000_access.log 慕课网用户行为日志文件下载</title>
    <link href="https://xiaoyan94.github.io/2020/06/28/10000-access-log/"/>
    <id>https://xiaoyan94.github.io/2020/06/28/10000-access-log/</id>
    <published>2020-06-28T07:41:36.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/resources/10000_access.log">点此下载 10000_access.log</a>，使用“右键另存为”保存文件。</p><a id="more"></a><p><img src="/2020/06/28/10000-access-log/10000_access.log.png" alt="10000_access.log.png"></p><p>以上是慕课网 - 10小时入门大数据-第06章 Hadoop项目实战 <a href="/resources/10000_access.log">10000_access.log</a> 文件下载链接。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/resources/10000_access.log&quot;&gt;点此下载 10000_access.log&lt;/a&gt;，使用“右键另存为”保存文件。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>MapReduce用户接口Mapper、Reducer——job的核心</title>
    <link href="https://xiaoyan94.github.io/2020/06/27/MapReduce-Payload-core-of-the-job/"/>
    <id>https://xiaoyan94.github.io/2020/06/27/MapReduce-Payload-core-of-the-job/</id>
    <published>2020-06-27T12:40:01.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="作业的核心"><a href="#作业的核心" class="headerlink" title="作业的核心"></a>作业的核心</h2><p>应用程序通常实现<code>Mapper</code>和<code>Reducer</code>接口以提供<code>map</code>和<code>reduce</code>方法。 这些构成了<code>job</code>（作业）的核心。</p><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a><code>Mapper</code></h3><p><code>Mapper</code>将输入的键&#x2F;值对<code>key/value</code>映射为一组中间键&#x2F;值对<code>key/value</code>。映射是将输入记录转换为中间记录的单个任务。 转换后的中间记录不必与输入记录具有相同的类型。 给定的输入对可能映射为零或许多输出对。</p><p>Hadoop MapReduce框架为每个InputSplit生成一个map任务。InputSplit是由InputFormat生成的。</p><p>总体而言，<code>Mapper</code> 的实现类要传递给 <code>Job</code> 使用，须调用 <code>Job.setMapperClass(Class)</code> 方法设置job的map函数；然后，MP框架为该任务的 <code>InputSplit</code> 中的每个键&#x2F;值对调用<code>map(WritableComparable,Writable,Context)</code>方法。 然后，应用程序可以重写<code>cleanup(Context)</code>方法来执行任何必需的清理。</p><p><code>map函数</code>的输出对的类型不一定要与输入对的类型一样。 给定的输入对可能 map 映射为零或许多个输出对。 通过调用 <code>context.write(WritableComparable, Writable)</code> 方法来收集输出对。</p><p><code>Application应用程序</code>可以使用<code>Counter</code>来报告它的统计信息。</p><p>与给定输出键 <code>key</code> 相关联的所有中间值 <code>values</code> 随后被MR框架分组，然后传递给 <code>Reducer</code> 以得到最终输出。用户可以通过 <code>Job.setGroupingCompatorClass(Class)</code> 方法指定一个 <code>Comparator</code> 来控制分组。</p><p>对<code>Mapper</code>的输出进行排序，然后按每个<code>Reducer</code>进行划分（<code>partition</code>）。分区(<code>partitions</code>) 的总数与作业（<code>job</code>）的<code>reduce</code>任务数相同。</p><p>用户可以通过实现自定义的 <code>Partitioner</code> 类来控制哪些键 <code>key</code> (以及记录 <code>records</code> )进入哪个<code>Reducer</code>进行处理。</p><p>用户还可以通过 <code>Job.setCombinerClass(Class)</code> 方法指定一个 <code>Combiner</code> ，以在本地执行中间输出的聚合（local aggregation）操作，这样可以减少<code>Mapper</code>到<code>Reducer</code>之间的数据传输量。实际上就是在<code>map</code>操作之后，在本地再执行一次 <code>reduce</code>操作，可以参考前面写的<code>PartitionApp</code>类的代码。</p><p>The intermediate, sorted outputs are always stored in a simple (key-len, key, value-len, value) format. Applications can control if, and how, the intermediate outputs are to be compressed and the <a href="https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/api/org/apache/hadoop/io/compress/CompressionCodec.html" target="_blank" rel="noopener"><code>CompressionCodec</code></a> to be used via the <code>Configuration</code>.</p><blockquote><p>原文是这样，这句话不是很理解。</p></blockquote><h4 id="多少个-Map"><a href="#多少个-Map" class="headerlink" title="多少个 Map"></a>多少个 <code>Map</code></h4><p><code>map</code> 的数量通常由输入的总大小（即输入文件的块总数 <code>the total number of blocks of the input files</code>）决定。</p><p><code>map</code> 的正确并行度似乎是每个节点大约10-100个 <code>map</code> ，尽管已经为 <code>very cpu-light map</code>（<em>CPU非常轻的任务</em>）任务设置了300个<code>map</code>。 因为任务的设置需要一段时间，所以执行<code>map</code>的时间最好满足至少一分钟。</p><p>因此，如果您期望的输入数据大小为10TB，块大小为128MB，那么最终将获得82,000个映射<code>map</code>, （<code>10 * 1024 * 1024 ÷ 128 = 81920</code>），除非使用 <code>Configuration.set(MRJobConfig.NUM_MAPS, int)</code>(它只给框架提供了一个提示 <code>hint</code>)将其设置得更高。</p><h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a><code>Reducer</code></h3><p><a href="https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/api/org/apache/hadoop/mapreduce/Reducer.html" target="_blank" rel="noopener"><code>Reducer</code></a> 将同一个 <code>key</code> 对应的一组中间值的集合归约为一个更小的<code>values</code>的集合。</p><p>用户通过 <code>Job.setNumReduceTasks(int)</code> 方法设置作业的 <code>reduce</code>的数量。</p><p>相似地，<code>Reducer</code> 的实现类要传递给 <code>Job</code> 使用，须调用 <code>Job.setReducerClass(Class)</code> 方法设置job的<code>reduce</code>函数；然后，MP框架为分组输入（grouped inputs）中的每个键&#x2F;值对调用<code>reduce(WritableComparable, Iterable&lt;Writable&gt;, Context)</code>方法。 然后，应用程序可以重写<code>cleanup(Context)</code>方法来执行任何必需的清理。</p><p><code>Reducer</code> 主要有三个主要阶段：<code>shuffle</code>, <code>sort</code> 和 <code>reduce</code>。</p><h4 id="Shuffle"><a href="#Shuffle" class="headerlink" title="Shuffle"></a><code>Shuffle</code></h4><p><code>Reducer</code> 的输入是 <code>Mapper</code> 的排序输出。在这个阶段，MP框架通过HTTP获取所有<code>mapper</code>输出的相关的分区（relevant partition）。</p><h4 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a><code>Sort</code></h4><p>在此阶段，框架按键 <code>key</code>对Reducer的输入进行分组(因为不同的<code>mapper</code>可能输出相同的键<code>key</code>)。<code>shuffle</code>和<code>sort</code>阶段同时发生；当获取mapper的输出时，它们被合并。</p><h4 id="Secondary-Sort"><a href="#Secondary-Sort" class="headerlink" title="Secondary Sort"></a><code>Secondary Sort</code></h4><p>如果 <em>将中间键分组的等价规则</em> 与 <em>归约前的键分组的等价规则</em> 需要不同，则可以通过 <code>Job.setSortCompatorClass(Class)</code> 指定一个 <code>Comparator</code>。由于 <code>Job.setGroupingComparatorClass(Class)</code>能够用来控制中间键（intermediate keys）的分组方式，这些可以被结合起来以模拟对值<code>values</code>的二次排序 <code>secondary sort</code>。</p><h4 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a><code>Reduce</code></h4><p>在这个阶段对分组输入中的所有<code>&lt;key, (list of values)&gt; pair</code>调用 <code>reduce(WritableComparable, Iterable&lt;Writable&gt;, Context)</code>方法。</p><p><code>reduce</code>任务的输出通常通过 <code>Context.write(WritableComparable,Writable)</code>写入HDFS文件系统（<a href="https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/api/org/apache/hadoop/fs/FileSystem.html" target="_blank" rel="noopener"><code>FileSystem</code></a>）。</p><p>和<code>Map</code>一样，<code>Applications</code>可以使用<code>Counter</code>来报告它的统计信息。</p><p><code>Reducer</code>的输出是没有经过排序的。</p><h4 id="多少个-Reduce"><a href="#多少个-Reduce" class="headerlink" title="多少个 Reduce"></a>多少个 <code>Reduce</code></h4><p>正确的 <code>reduce</code> 数似乎是 <code>0.95或1.75乘以(&lt;no.of nodes&gt; * &lt;no.of maximum containers per node&gt;)</code> 。</p><p>对于0.95，所有的<code>reduce</code>都可以立即启动，并在<code>map</code>完成时开始传输<code>map</code>输出。对于1.75，速度更快的节点将完成他们的第一轮<code>reduce</code>，并启动第二轮<code>reduce</code>，在负载均衡方面做得更好。</p><p>增加<code>reduce</code>的数量，会增加框架的开销，但是也增加了负载均衡和降低了故障成本。</p><p>上面的缩放因子（如0.95,1.95）略小于整数 ( <a href="https://www.mathsisfun.com/whole-numbers.html" target="_blank" rel="noopener"><code>whole numbers</code></a> )，以便在框架中为推测性任务和失败任务保留少部分的<code>reduce</code>插槽（<em>reduce slots</em>）。</p><h4 id="Reducer-NONE"><a href="#Reducer-NONE" class="headerlink" title="Reducer NONE"></a>Reducer NONE</h4><p>如果不需要归约是可以将reduce tasks的数量设置为0的。</p><p>在这种情况下，map tasks的输出将直接写到FileSystem，输出的路径是通过 <code>FileOutputFormat.setOutputPath(Job, Path)</code>方法设置的路径。框架不会在将map的输出写到FileSystem之前对它们进行排序。</p><h3 id="Partitioner"><a href="#Partitioner" class="headerlink" title="Partitioner"></a><code>Partitioner</code></h3><p><code>Partitioner</code>对<code>key</code>空间进行划分。</p><p><code>Partitioner</code>控制map的中间输出的keys的划分。key或key的子集通常通过hash散列函数得到划分分区（partitions）。partitions的总数与<code>reduce</code>任务数相同。因此，这控制了中间<code>key</code>(以及记录<code>record</code>)被发送到m个reduce任务中哪一个reduce任务进行归约操作。</p><p><a href="https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/api/org/apache/hadoop/mapreduce/lib/partition/HashPartitioner.html" target="_blank" rel="noopener"><code>HashPertitioner</code></a>是默认的<code>Partitioner</code>。</p><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a><code>Counter</code></h3><p><a href="https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/api/org/apache/hadoop/mapreduce/Counter.html" target="_blank" rel="noopener"><code>Counter</code></a>是MapReduce应用程序报告其统计信息的工具。<code>Mapper</code>和<code>Reducer</code>的实现类可以使用<code>Counter</code>报告统计信息。</p><p>Hadoop Mapreduce提供了一个library，<a href="https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/api/org/apache/hadoop/mapreduce/package-summary.html" target="_blank" rel="noopener"><code>org.apache.hadoop.mapreduce</code></a>包含有用的 mappers, reducers, partitioners。</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Hadoop" scheme="https://xiaoyan94.github.io/tags/Hadoop/"/>
    
    <category term="MapReduce" scheme="https://xiaoyan94.github.io/tags/MapReduce/"/>
    
  </entry>
  
  <entry>
    <title>Java中的静态导入import static（导入类的静态成员）</title>
    <link href="https://xiaoyan94.github.io/2020/06/27/Java-import-static/"/>
    <id>https://xiaoyan94.github.io/2020/06/27/Java-import-static/</id>
    <published>2020-06-27T07:27:22.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="import-static-是什么"><a href="#import-static-是什么" class="headerlink" title="import static 是什么"></a>import static 是什么</h2><p><code>import static</code>是静态导入的声明。静态导入声明 <code>import static</code> 类似于普通导入声明 <code>import</code> 。 普通的导入声明从包中导入类，从而允许在没有包限定的情况下使用类，而静态导入声明从类中导入静态成员，从而允许在没有类限定的情况下使用静态成员。</p><p>使用<code>import static</code>用法，可以导入<code>class</code>中的静态成员。</p><a id="more"></a><p>举个例子，仅使用<code>import</code>关键字时，代码可能是这样的：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Math;</span><br><span class="line"><span class="comment">//使用类名.静态成员调用</span></span><br><span class="line"><span class="keyword">double</span> r = Math.cos(Math.PI * theta);</span><br></pre></td></tr></table></figure></div><p>使用<code>import static</code>语法导入<code>Math</code>类的静态变量和静态方法之后，代码就更简洁了：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;</span><br><span class="line"><span class="comment">//直接调用静态成员</span></span><br><span class="line"><span class="keyword">double</span> r = cos(PI * theta);</span><br></pre></td></tr></table></figure></div><hr><p>再来一个例子，使用<code>import static</code>语法的 HelloWorld 长这样：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        out.println(<span class="string">"Hello! World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以直接在类中使用<code>java.lang.System.out</code>成员。</p><hr><p>如果想要导入类中的所有静态成员可以使用 <code>*</code> 通配符：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.Arrays.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseImportStatic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = &#123;<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">        sort(array);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : array) &#123;</span><br><span class="line">            out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>当自己定义了一个静态的<code>sort</code>方法与从<code>Arrays</code>类导入的<code>sort</code>方法冲突之后，编译器会报异常:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reference to sort is ambiguous, <span class="function">both method <span class="title">sort</span><span class="params">(<span class="keyword">float</span>[])</span> in onlyfun.caterpillar.Arrays and method <span class="title">sort</span><span class="params">(<span class="keyword">float</span>[])</span> in java.util.Arrays match</span></span><br></pre></td></tr></table></figure></div></blockquote><h2 id="import-static-什么时候用"><a href="#import-static-什么时候用" class="headerlink" title="import static 什么时候用"></a>import static 什么时候用</h2><p><strong>最好不用！</strong> 为什么呢？</p><p>因为 <code>import static</code> 与 <code>import</code> 背道而驰，理由如下：</p><ul><li>违背面向对象的设计原则；</li><li>容易造成命名冲突，污染命名空间，产生歧义；</li><li>仅仅是为了偷懒少写一点代码，却让代码难以阅读和维护，时间久了连自己都不知道静态成员是从哪个类引入的了；</li></ul><p>如果非用不可呢，尽量遵守以下原则：</p><ul><li><strong>谨慎使用</strong>！当需要频繁访问一两个类的静态成员时，可以使用它。</li><li>从类中导入所有静态成员可能对可读性特别有害； 如果只需要一个或两个成员，则分别导入它们。</li><li>通过适当地使用，静态导入可以消除重复的类名样板，从而使程序更具可读性。</li></ul><hr><p>参考： <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/static-import.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/7/docs/technotes/guides/language/static-import.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;import-static-是什么&quot;&gt;&lt;a href=&quot;#import-static-是什么&quot; class=&quot;headerlink&quot; title=&quot;import static 是什么&quot;&gt;&lt;/a&gt;import static 是什么&lt;/h2&gt;&lt;p&gt;&lt;code&gt;import static&lt;/code&gt;是静态导入的声明。静态导入声明 &lt;code&gt;import static&lt;/code&gt; 类似于普通导入声明 &lt;code&gt;import&lt;/code&gt; 。 普通的导入声明从包中导入类，从而允许在没有包限定的情况下使用类，而静态导入声明从类中导入静态成员，从而允许在没有类限定的情况下使用静态成员。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;import static&lt;/code&gt;用法，可以导入&lt;code&gt;class&lt;/code&gt;中的静态成员。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://xiaoyan94.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop入门案例（一）: WordCount</title>
    <link href="https://xiaoyan94.github.io/2020/06/26/First-MapReduce-example-WordCount/"/>
    <id>https://xiaoyan94.github.io/2020/06/26/First-MapReduce-example-WordCount/</id>
    <published>2020-06-26T09:01:36.000Z</published>
    <updated>2022-08-26T08:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MapReduce作业的输入与输出"><a href="#MapReduce作业的输入与输出" class="headerlink" title="MapReduce作业的输入与输出"></a>MapReduce作业的输入与输出</h2><p>MapRecude计算框架是在键值对&lt;key, value&gt;上进行操作的。MapReduce计算框架将作业的输入视为一组&lt;key，value&gt;对，并生成一组&lt;key, value&gt;对作为其输出，可能是不同类型的。&lt;key, value&gt;中：</p><ul><li>key和value的类都要由框架实现序列化，所以都需要实现<code>org.apache.hadoop.io.Writable</code>接口；</li><li>除此之外key的类还需要实现<code>org.apache.hadoop.io.WritableComparable</code>接口，因为在map操作之后还需要对key进行排序操作。</li></ul><p>MapReduce作业的输入和输出类型：</p><blockquote><p>(input) &lt;k1, v1&gt; -&gt; <strong>map</strong> -&gt; &lt;k2, v2&gt; -&gt; <strong>combine</strong> -&gt; &lt;k2, v2&gt; -&gt; <strong>reduce</strong> -&gt; &lt;k3, v3&gt; (output)</p></blockquote><a id="more"></a><hr><h2 id="MapReduce入门程序——WordCount"><a href="#MapReduce入门程序——WordCount" class="headerlink" title="MapReduce入门程序——WordCount"></a>MapReduce入门程序——WordCount</h2><p>WordCount是一个简单的应用程序，可以计算给定输入数据集中每个单词的出现次数。</p><p>WordCountApp.java代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map：读取输入文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>,</span></span><br><span class="line"><span class="class">            <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line">        LongWritable one = <span class="keyword">new</span> LongWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String line = value.toString(); <span class="comment">//每一行的数据</span></span><br><span class="line">            String[] words = line.split(<span class="string">" "</span>); <span class="comment">//按空格 分隔符拆分</span></span><br><span class="line">            <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                context.write(<span class="keyword">new</span> Text(word), one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reduce：归并操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>,</span></span><br><span class="line"><span class="class">            <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (LongWritable value :</span><br><span class="line">                    values) &#123;</span><br><span class="line">                <span class="comment">//求key总次数</span></span><br><span class="line">                sum += value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 输出此次reduce统计结果</span></span><br><span class="line">            context.write(key, <span class="keyword">new</span> LongWritable(sum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Driver：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 第一个参数是输入文件路径，第二个参数是输出文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除已存在的输出目录</span></span><br><span class="line">        Path outPath = <span class="keyword">new</span> Path(args[<span class="number">1</span>]);</span><br><span class="line">        FileSystem fs = FileSystem.get(configuration);</span><br><span class="line">        <span class="keyword">if</span> (fs.exists(outPath))&#123;</span><br><span class="line">            fs.delete(outPath, <span class="keyword">true</span>);</span><br><span class="line">            System.out.println(<span class="string">"output file exists, but is has been deleted"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Job job = Job.getInstance(configuration, <span class="string">"wordcount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Job处理的类</span></span><br><span class="line">        job.setJarByClass(WordCountApp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置作业处理的输入路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置map相关参数</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置reduce相关参数</span></span><br><span class="line">        job.setReducerClass(MyReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置作业处理的输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="WordCount代码分析"><a href="#WordCount代码分析" class="headerlink" title="WordCount代码分析"></a>WordCount代码分析</h3><p>Mapper的实现类如下：在map方法中，一次处理一行的数据，由<code>TextInputFormat</code>指定，它将一行字符串以空格为分隔符拆分成单词，并输出 <code>单词-次数</code> 键值对 <code>&lt;&lt;word&gt;,1&gt;</code></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>,</span></span><br><span class="line"><span class="class">        <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line">    LongWritable one = <span class="keyword">new</span> LongWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String line = value.toString(); <span class="comment">//每一行的数据</span></span><br><span class="line">        String[] words = line.split(<span class="string">" "</span>); <span class="comment">//按空格 分隔符拆分</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(word), one);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Reducer的实现类如下：在reduce方法中，只是对values进行求和，这些values是每个key的出现次数（在本示例中单词出现的次数）。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>,</span></span><br><span class="line"><span class="class">        <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (LongWritable value :</span><br><span class="line">                values) &#123;</span><br><span class="line">            <span class="comment">//求key总次数</span></span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 输出此次reduce统计结果</span></span><br><span class="line">        context.write(key, <span class="keyword">new</span> LongWritable(sum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>最后，在main方法指定作业的各个方面，例如作业中的输入&#x2F;输出路径(通过命令行传递)、键&#x2F;值类型、输入&#x2F;输出格式等。 然后，它调用<code>job.waitForCompletion</code>方法来提交作业并监视其进度。</p><h3 id="提交作业"><a href="#提交作业" class="headerlink" title="提交作业"></a>提交作业</h3><p>将写好的程序提交到YARN执行：</p><ol><li><p>因为使用Maven搭建，在项目根目录下执行命令<code>mvn clean package -DskipTests</code>打包</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean package -DskipTests</span><br><span class="line"> [INFO] Scanning <span class="keyword">for</span> projects...</span><br><span class="line"> [INFO]</span><br><span class="line"> [INFO] ----------------------&lt; org.example:hadoop-train &gt;----------------------</span><br><span class="line"> [INFO] Building hadoop-train 1.0</span><br><span class="line"> [INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line"> [INFO]</span><br><span class="line"> [INFO] --- maven-clean-plugin:3.1.0:clean (default-clean) @ hadoop-train ---</span><br><span class="line"> [INFO] Deleting /Users/yan/IdeaProjects/com.xxx.hadoop/com.xxx.hadoop/target</span><br><span class="line"> [INFO]</span><br><span class="line"> [INFO] --- maven-resources-plugin:3.0.2:resources (default-resources) @ hadoop-train ---</span><br><span class="line"> [INFO] Using <span class="string">'UTF-8'</span> encoding to copy filtered resources.</span><br><span class="line"> [INFO] skip non existing resourceDirectory /Users/yan/IdeaProjects/com.xxx.hadoop/com.xxx.hadoop/src/main/resources</span><br><span class="line"> [INFO]</span><br><span class="line"> [INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ hadoop-train ---</span><br><span class="line"> [INFO] Changes detected - recompiling the module!</span><br><span class="line"> [INFO] Compiling 5 <span class="built_in">source</span> files to /Users/yan/IdeaProjects/com.xxx.hadoop/com.xxx.hadoop/target/classes</span><br><span class="line"> [INFO]</span><br><span class="line"> [INFO] --- maven-resources-plugin:3.0.2:testResources (default-testResources) @ hadoop-train ---</span><br><span class="line"> [INFO] Using <span class="string">'UTF-8'</span> encoding to copy filtered resources.</span><br><span class="line"> [INFO] skip non existing resourceDirectory /Users/yan/IdeaProjects/com.xxx.hadoop/com.xxx.hadoop/src/<span class="built_in">test</span>/resources</span><br><span class="line"> [INFO]</span><br><span class="line"> [INFO] --- maven-compiler-plugin:3.8.0:testCompile (default-testCompile) @ hadoop-train ---</span><br><span class="line"> [INFO] Changes detected - recompiling the module!</span><br><span class="line"> [INFO] Compiling 1 <span class="built_in">source</span> file to /Users/yan/IdeaProjects/com.xxx.hadoop/com.xxx.hadoop/target/<span class="built_in">test</span>-classes</span><br><span class="line"> [INFO]</span><br><span class="line"> [INFO] --- maven-surefire-plugin:2.22.1:<span class="built_in">test</span> (default-test) @ hadoop-train ---</span><br><span class="line"> [INFO] Tests are skipped.</span><br><span class="line"> [INFO]</span><br><span class="line"> [INFO] --- maven-jar-plugin:3.0.2:jar (default-jar) @ hadoop-train ---</span><br><span class="line"> [INFO] Building jar: /Users/yan/IdeaProjects/com.xxx.hadoop/com.xxx.hadoop/target/hadoop-train-1.0.jar</span><br><span class="line"> [INFO] ------------------------------------------------------------------------</span><br><span class="line"> [INFO] BUILD SUCCESS</span><br><span class="line"> [INFO] ------------------------------------------------------------------------</span><br><span class="line"> [INFO] Total time:  2.800 s</span><br><span class="line"> [INFO] Finished at: 2020-06-24T20:17:52+08:00</span><br><span class="line"> [INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></div></li><li><p>使用命令<code>scp -P26885 target/hadoop-train-1.0.jar root@23.105.206.170:~/hadoop/lib</code>将打包好的jar文件上传至远程服务器~&#x2F;hadoop&#x2F;lib目录下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ scp -P26885 target/hadoop-train-1.0.jar root@23.105.206.170:~/hadoop/lib</span><br><span class="line">hadoop-train-1.0.jar     100%   17KB   6.7KB/s   00:02</span><br></pre></td></tr></table></figure></div></li><li><p>以如下流程在服务器上执行上传的程序：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hadoop fs -put in.txt /in.txt <span class="comment"># 将in.txt上传至HDFS根目录下</span></span><br><span class="line">...</span><br><span class="line">$ hadoop jar ~/hadoop/lib/hadoop-train-1.0.jar org.example.WordCountApp /in.txt /mymprd/wordcount <span class="comment"># 运行WordCount程序</span></span><br><span class="line">...</span><br><span class="line">$ hadoop fs -cat /mymprd/wordcount/part-r-00000 <span class="comment">#查看程序输出结果</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div></li><li><p>输入路径也可以是一个文件夹，文件夹内有多个输入文件：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/hadoop/script<span class="comment"># cat input/in1.txt # 准备输入文件in1、in2</span></span><br><span class="line">Hello World Bye World</span><br><span class="line">root@brave-post-2:~/hadoop/script<span class="comment"># cat input/in2.txt</span></span><br><span class="line">Hello Hadoop Goodbye Hadoop</span><br><span class="line">Hello Goodbye</span><br><span class="line">root@brave-post-2:~/hadoop/script<span class="comment"># hadoop fs -put input / # -put也能上传一个文件夹至HDFS</span></span><br><span class="line">20/06/26 08:05:08 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/hadoop/script<span class="comment"># hadoop fs -ls /input</span></span><br><span class="line">20/06/26 08:05:34 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Found 2 items</span><br><span class="line">-rw-r--r--   1 root supergroup         22 2020-06-26 08:05 /input/in1.txt</span><br><span class="line">-rw-r--r--   1 root supergroup         42 2020-06-26 08:05 /input/in2.txt</span><br><span class="line">root@brave-post-2:~/hadoop/script<span class="comment"># hadoop jar ~/hadoop/lib/hadoop-train-1.0.jar org.example.WordCount2App /input /mymprd/wordcount # 以input文件夹作为输入路径</span></span><br><span class="line">20/06/26 08:06:08 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">output file exists, but is has deleted</span><br><span class="line">20/06/26 08:06:10 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:8032</span><br><span class="line">20/06/26 08:06:13 WARN mapreduce.JobResourceUploader: Hadoop <span class="built_in">command</span>-line option parsing not performed. Implement the Tool interface and execute your application with ToolRunner to remedy this.</span><br><span class="line">20/06/26 08:06:14 INFO input.FileInputFormat: Total input paths to process : 2</span><br><span class="line">20/06/26 08:06:14 INFO mapreduce.JobSubmitter: number of splits:2</span><br><span class="line">20/06/26 08:06:14 INFO mapreduce.JobSubmitter: Submitting tokens <span class="keyword">for</span> job: job_1593005599056_0021</span><br><span class="line">20/06/26 08:06:15 INFO impl.YarnClientImpl: Submitted application application_1593005599056_0021</span><br><span class="line">20/06/26 08:06:15 INFO mapreduce.Job: The url to track the job: http://localhost:8088/proxy/application_1593005599056_0021/</span><br><span class="line">20/06/26 08:06:15 INFO mapreduce.Job: Running job: job_1593005599056_0021</span><br><span class="line">20/06/26 08:06:30 INFO mapreduce.Job: Job job_1593005599056_0021 running <span class="keyword">in</span> uber mode : <span class="literal">false</span></span><br><span class="line">20/06/26 08:06:30 INFO mapreduce.Job:  map 0% reduce 0%</span><br><span class="line">20/06/26 08:06:48 INFO mapreduce.Job:  map 50% reduce 0%</span><br><span class="line">20/06/26 08:06:49 INFO mapreduce.Job:  map 100% reduce 0%</span><br><span class="line">20/06/26 08:07:00 INFO mapreduce.Job:  map 100% reduce 100%</span><br><span class="line">20/06/26 08:07:04 INFO mapreduce.Job: Job job_1593005599056_0021 completed successfully</span><br><span class="line">20/06/26 08:07:05 INFO mapreduce.Job: Counters: 49</span><br><span class="line">    File System Counters</span><br><span class="line">        FILE: Number of bytes <span class="built_in">read</span>=170</span><br><span class="line">        FILE: Number of bytes written=334434</span><br><span class="line">        FILE: Number of <span class="built_in">read</span> operations=0</span><br><span class="line">        FILE: Number of large <span class="built_in">read</span> operations=0</span><br><span class="line">        FILE: Number of write operations=0</span><br><span class="line">        HDFS: Number of bytes <span class="built_in">read</span>=274</span><br><span class="line">        HDFS: Number of bytes written=41</span><br><span class="line">        HDFS: Number of <span class="built_in">read</span> operations=9</span><br><span class="line">        HDFS: Number of large <span class="built_in">read</span> operations=0</span><br><span class="line">        HDFS: Number of write operations=2</span><br><span class="line">    Job Counters</span><br><span class="line">        Launched map tasks=2</span><br><span class="line">        Launched reduce tasks=1</span><br><span class="line">        Data-local map tasks=3</span><br><span class="line">        Total time spent by all maps <span class="keyword">in</span> occupied slots (ms)=31069</span><br><span class="line">        Total time spent by all reduces <span class="keyword">in</span> occupied slots (ms)=8852</span><br><span class="line">        Total time spent by all map tasks (ms)=31069</span><br><span class="line">        Total time spent by all reduce tasks (ms)=8852</span><br><span class="line">        Total vcore-seconds taken by all map tasks=31069</span><br><span class="line">        Total vcore-seconds taken by all reduce tasks=8852</span><br><span class="line">        Total megabyte-seconds taken by all map tasks=31814656</span><br><span class="line">        Total megabyte-seconds taken by all reduce tasks=9064448</span><br><span class="line">    Map-Reduce Framework</span><br><span class="line">        Map input records=3</span><br><span class="line">        Map output records=10</span><br><span class="line">        Map output bytes=144</span><br><span class="line">        Map output materialized bytes=176</span><br><span class="line">        Input split bytes=210</span><br><span class="line">        Combine input records=0</span><br><span class="line">        Combine output records=0</span><br><span class="line">        Reduce input groups=5</span><br><span class="line">        Reduce shuffle bytes=176</span><br><span class="line">        Reduce input records=10</span><br><span class="line">        Reduce output records=5</span><br><span class="line">        Spilled Records=20</span><br><span class="line">        Shuffled Maps =2</span><br><span class="line">        Failed Shuffles=0</span><br><span class="line">        Merged Map outputs=2</span><br><span class="line">        GC time elapsed (ms)=634</span><br><span class="line">        CPU time spent (ms)=3900</span><br><span class="line">        Physical memory (bytes) snapshot=472780800</span><br><span class="line">        Virtual memory (bytes) snapshot=7740059648</span><br><span class="line">        Total committed heap usage (bytes)=264744960</span><br><span class="line">    Shuffle Errors</span><br><span class="line">        BAD_ID=0</span><br><span class="line">        CONNECTION=0</span><br><span class="line">        IO_ERROR=0</span><br><span class="line">        WRONG_LENGTH=0</span><br><span class="line">        WRONG_MAP=0</span><br><span class="line">        WRONG_REDUCE=0</span><br><span class="line">    File Input Format Counters</span><br><span class="line">        Bytes Read=64</span><br><span class="line">    File Output Format Counters</span><br><span class="line">        Bytes Written=41</span><br><span class="line">root@brave-post-2:~/hadoop/script<span class="comment"># hadoop fs -cat /mymprd/wordcount/part-r-00000 # 查看程序执行结果</span></span><br><span class="line">20/06/26 08:07:27 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Bye 1</span><br><span class="line">Goodbye 2</span><br><span class="line">Hadoop 2</span><br><span class="line">Hello 3</span><br><span class="line">World 2</span><br><span class="line">root@brave-post-2:~/hadoop/script<span class="comment">#</span></span><br></pre></td></tr></table></figure></div></li></ol><hr><h3 id="使用Combiner降低map和reduce之间的数据传输量"><a href="#使用Combiner降低map和reduce之间的数据传输量" class="headerlink" title="使用Combiner降低map和reduce之间的数据传输量"></a>使用Combiner降低map和reduce之间的数据传输量</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombinerApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map：读取输入文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>,</span></span><br><span class="line"><span class="class">            <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line">        LongWritable one = <span class="keyword">new</span> LongWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String line = value.toString(); <span class="comment">//每一行的数据</span></span><br><span class="line">            String[] words = line.split(<span class="string">" "</span>); <span class="comment">//按空格 分隔符拆分</span></span><br><span class="line">            <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                context.write(<span class="keyword">new</span> Text(word), one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reduce：归并操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>,</span></span><br><span class="line"><span class="class">            <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (LongWritable value :</span><br><span class="line">                    values) &#123;</span><br><span class="line">                <span class="comment">//求key总次数</span></span><br><span class="line">                sum += value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 输出此次reduce统计结果</span></span><br><span class="line">            context.write(key, <span class="keyword">new</span> LongWritable(sum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Driver：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除已存在的输出目录</span></span><br><span class="line">        Path outPath = <span class="keyword">new</span> Path(args[<span class="number">1</span>]);</span><br><span class="line">        FileSystem fs = FileSystem.get(configuration);</span><br><span class="line">        <span class="keyword">if</span> (fs.exists(outPath))&#123;</span><br><span class="line">            fs.delete(outPath, <span class="keyword">true</span>);</span><br><span class="line">            System.out.println(<span class="string">"output file exists, but is has deleted"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Job job = Job.getInstance(configuration, <span class="string">"wordcount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Job处理的类</span></span><br><span class="line">        job.setJarByClass(CombinerApp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置作业处理的输入路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置map相关参数</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置reduce相关参数</span></span><br><span class="line">        job.setReducerClass(MyReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Combiner处理类，相当于在Map之后先在本地进行一次合并之后再通过网络传输数据给Reduce Tasks</span></span><br><span class="line">        <span class="comment">// 使用场景：求次数；求和；  不能使用的场景：平均数</span></span><br><span class="line">        job.setCombinerClass(MyReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置作业处理的输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>关于Combiner：设置Combiner处理类，相当于在<code>map</code>操作之后先在本地进行一次合并（即local aggregation）之后再通过网络传输数据给<code>reduce</code>。</p><p>不过combiner的使用是有场景限制的：比如求次数、求和可以用；但是求平均数就不能用。</p><hr><h3 id="和wordcount相似的partitioner"><a href="#和wordcount相似的partitioner" class="headerlink" title="和wordcount相似的partitioner"></a>和wordcount相似的partitioner</h3><p>PartitionerApp 代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartitionerApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Map：读取输入文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>,</span></span><br><span class="line"><span class="class">            <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String line = value.toString(); <span class="comment">//每一行的数据</span></span><br><span class="line">            String[] words = line.split(<span class="string">" "</span>); <span class="comment">//按空格 分隔符拆分</span></span><br><span class="line"></span><br><span class="line">            context.write(<span class="keyword">new</span> Text(words[<span class="number">0</span>]),</span><br><span class="line">                    <span class="keyword">new</span> LongWritable(Long.parseLong(words[<span class="number">1</span>])));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reduce：归并操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>, <span class="title">Text</span>,</span></span><br><span class="line"><span class="class">            <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;LongWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (LongWritable value :</span><br><span class="line">                    values) &#123;</span><br><span class="line">                <span class="comment">//求key总次数</span></span><br><span class="line">                sum += value.get();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 输出此次reduce统计结果</span></span><br><span class="line">            context.write(key, <span class="keyword">new</span> LongWritable(sum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text text, LongWritable longWritable, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (text.toString()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"xiaomi"</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"huawei"</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"apple"</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Driver：</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除已存在的输出目录</span></span><br><span class="line">        Path outPath = <span class="keyword">new</span> Path(args[<span class="number">1</span>]);</span><br><span class="line">        FileSystem fs = FileSystem.get(configuration);</span><br><span class="line">        <span class="keyword">if</span> (fs.exists(outPath)) &#123;</span><br><span class="line">            fs.delete(outPath, <span class="keyword">true</span>);</span><br><span class="line">            System.out.println(<span class="string">"output file exists, but is has deleted"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Job job = Job.getInstance(configuration, <span class="string">"wordcount"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置Job处理的类</span></span><br><span class="line">        job.setJarByClass(PartitionerApp<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置作业处理的输入路径</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置map相关参数</span></span><br><span class="line">        job.setMapperClass(MyMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setMapOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置reduce相关参数</span></span><br><span class="line">        job.setReducerClass(MyReducer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputKeyClass(Text<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        job.setOutputValueClass(LongWritable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置job的Partitioner</span></span><br><span class="line">        job.setPartitionerClass(MyPartitioner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 同时还需要为job设置4个reduce task，每个partition一个</span></span><br><span class="line">        job.setNumReduceTasks(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置作业处理的输出路径</span></span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>对于PartitionerApp，现要统计出不同品牌的手机总销量。假设输入文件in.txt，给出了手机品牌和对应的销量：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">huawei 200</span><br><span class="line">apple 180</span><br><span class="line">xiaomi 100</span><br><span class="line">huawei 150</span><br><span class="line">apple 30</span><br><span class="line">nokia 66</span><br><span class="line">meizu 66</span><br><span class="line">honor 88</span><br></pre></td></tr></table></figure></div><p>在Hadoop上运行PartiitonerApp之后，输出文件夹中会得到四个输出文件，因为在<code>MyPartitioner</code>类中指定了4个划分。这四个输出文件的文件名分别是<code>part-r-00000</code>,<code>part-r-00001</code>,<code>part-r-00002</code>,<code>part-r-00003</code>。</p><p>查看第一个输出文件<code>part-r-00000</code>，会得到第一个划分的结果：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xiaomi 100</span><br></pre></td></tr></table></figure></div><p>查看第二个输出文件<code>part-r-00001</code>，会得到第二个划分的结果：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">huawei 350</span><br></pre></td></tr></table></figure></div><p>查看第三个输出文件<code>part-r-00002</code>，会得到第三个划分的结果：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apple 210</span><br></pre></td></tr></table></figure></div><p>查看第四个输出文件<code>part-r-00003</code>，会得到第四个划分的结果：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">honor 88</span><br><span class="line">meizu 66</span><br><span class="line">nokia 66</span><br></pre></td></tr></table></figure></div><p>从最后一个文件的结果可以看出来MapReduce对<code>key</code>默认根据字母进行了排序。honor &gt; meizu &gt; nokia 。</p><p>与wordcount相比，多了一个Patitioner Class：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Text</span>, <span class="title">LongWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text text, LongWritable longWritable, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (text.toString()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"xiaomi"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"huawei"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"apple"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>getPartition(Text text, LongWritable longWritable, int numPartitions)</code>第一个参数是<code>key</code>，第二个参数是<code>value</code>，第三个参数<code>int numPartitions</code>是表示哪个partition的整数。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;MapReduce作业的输入与输出&quot;&gt;&lt;a href=&quot;#MapReduce作业的输入与输出&quot; class=&quot;headerlink&quot; title=&quot;MapReduce作业的输入与输出&quot;&gt;&lt;/a&gt;MapReduce作业的输入与输出&lt;/h2&gt;&lt;p&gt;MapRecude计算框架是在键值对&amp;lt;key, value&amp;gt;上进行操作的。MapReduce计算框架将作业的输入视为一组&amp;lt;key，value&amp;gt;对，并生成一组&amp;lt;key, value&amp;gt;对作为其输出，可能是不同类型的。&amp;lt;key, value&amp;gt;中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;key和value的类都要由框架实现序列化，所以都需要实现&lt;code&gt;org.apache.hadoop.io.Writable&lt;/code&gt;接口；&lt;/li&gt;
&lt;li&gt;除此之外key的类还需要实现&lt;code&gt;org.apache.hadoop.io.WritableComparable&lt;/code&gt;接口，因为在map操作之后还需要对key进行排序操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MapReduce作业的输入和输出类型：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(input) &amp;lt;k1, v1&amp;gt; -&amp;gt; &lt;strong&gt;map&lt;/strong&gt; -&amp;gt; &amp;lt;k2, v2&amp;gt; -&amp;gt; &lt;strong&gt;combine&lt;/strong&gt; -&amp;gt; &amp;lt;k2, v2&amp;gt; -&amp;gt; &lt;strong&gt;reduce&lt;/strong&gt; -&amp;gt; &amp;lt;k3, v3&amp;gt; (output)&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Hadoop" scheme="https://xiaoyan94.github.io/tags/Hadoop/"/>
    
    <category term="MapReduce" scheme="https://xiaoyan94.github.io/tags/MapReduce/"/>
    
  </entry>
  
  <entry>
    <title>Linux/macOS Shell终端快捷键</title>
    <link href="https://xiaoyan94.github.io/2020/06/25/Linux-macOS-Shell%E7%BB%88%E7%AB%AF%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://xiaoyan94.github.io/2020/06/25/Linux-macOS-Shell%E7%BB%88%E7%AB%AF%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2020-06-25T02:59:14.000Z</published>
    <updated>2023-02-08T06:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>1。有时候调用历史命令，都是很长的那种，然后发现并不是自己想要的，需要重新输入，如何快速删除已有&#x2F;已输入的命令&#x2F;内容？</p><p>Ctrl + C</p><p>2。Linux&#x2F;moacOS 终端命令行输入的常用快捷键。</p><a id="more"></a><table><thead><tr><th>快捷键</th><th>功能</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl + W</td><td>往前删除一个单词</td><td>删除光标左边字符直至遇到空格</td></tr><tr><td>Ctrl + U</td><td>删除光标以前的字符</td><td>删除光标左边的所有字符</td></tr><tr><td>Ctrl + K</td><td>删除光标以后的字符</td><td>删除光标右边的所有字符</td></tr><tr><td>Ctrl + A</td><td>移动光标至字符头</td><td>光标移动到最左</td></tr><tr><td>Ctrl + E</td><td>移动光标至字符尾</td><td>光标移动到最右</td></tr><tr><td>Ctrl + L</td><td>清屏</td><td>清除屏幕内容，使用鼠标滚轮向上翻还能查看之前的内容</td></tr><tr><td>Command ⌘ + K</td><td>清屏</td><td>清除屏幕缓存，使用鼠标滚轮向上翻看不到之前的内容了</td></tr></tbody></table><p>3。macOS键盘中的特殊符号含义。</p><table><thead><tr><th>图标</th><th>含义</th></tr></thead><tbody><tr><td>⌘</td><td>command 或 Cmd</td></tr><tr><td>⌥</td><td>option 或 Alt</td></tr><tr><td>⇧</td><td>shift</td></tr><tr><td>⇪</td><td>caps lock</td></tr><tr><td>⌃</td><td>control 或 Ctrl</td></tr><tr><td>↩</td><td>return</td></tr><tr><td>⌅</td><td>enter</td></tr></tbody></table><blockquote><p><a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="noopener">Mac 键盘快捷键</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;1。有时候调用历史命令，都是很长的那种，然后发现并不是自己想要的，需要重新输入，如何快速删除已有&amp;#x2F;已输入的命令&amp;#x2F;内容？&lt;/p&gt;
&lt;p&gt;Ctrl + C&lt;/p&gt;
&lt;p&gt;2。Linux&amp;#x2F;moacOS 终端命令行输入的常用快捷键。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://xiaoyan94.github.io/tags/Linux/"/>
    
    <category term="macOS" scheme="https://xiaoyan94.github.io/tags/macOS/"/>
    
    <category term="终端" scheme="https://xiaoyan94.github.io/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>ssh配置免密码登录至Linux—已配置密钥仍无法登陆等问题</title>
    <link href="https://xiaoyan94.github.io/2020/06/22/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <id>https://xiaoyan94.github.io/2020/06/22/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</id>
    <published>2020-06-22T12:15:39.000Z</published>
    <updated>2022-08-26T08:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSH连接免密码登录配置"><a href="#SSH连接免密码登录配置" class="headerlink" title="SSH连接免密码登录配置"></a>SSH连接免密码登录配置</h2><h3 id="方法一：手动复制公钥至服务器"><a href="#方法一：手动复制公钥至服务器" class="headerlink" title="方法一：手动复制公钥至服务器"></a>方法一：手动复制公钥至服务器</h3><ol><li><code>ssh-keygen -t rsa</code> 在客户端生成密钥对  </li><li>把公钥拷贝给要登录的目标主机，手动复制粘贴</li><li>目标主机上将这个公钥加入到授权列表 <code>cat id_rsa.pub &gt;&gt;authorized_keys</code>  </li><li>目标主机还要将这个授权列表文件权限修改为 <code>600</code> , <code>chmod 600 authorized_keys</code>  </li><li>在用户目录下即 <code>~</code> 执行以下步骤：  <ol><li><code>rm -rf .ssh/</code> # 会删除已有的密钥，谨慎删除</li><li><code>ssh-keygen -t rsa</code></li><li><code>cat .ssh/id_rsa.pub &gt;&gt; .ssh/authorized_keys</code></li><li><code>chmod 700 .ssh</code></li><li><code>chmod 600 .ssh/authorized_keys</code></li></ol></li></ol><blockquote><p>这种方法容易出错，推荐使用方法二  </p></blockquote><a id="more"></a><h3 id="方法二：在本地主机（客户端）上生成密钥对，使用-ssh-copy-id-将公钥复制到远程服务器中"><a href="#方法二：在本地主机（客户端）上生成密钥对，使用-ssh-copy-id-将公钥复制到远程服务器中" class="headerlink" title="方法二：在本地主机（客户端）上生成密钥对，使用 ssh-copy-id 将公钥复制到远程服务器中"></a><strong>方法二：在本地主机（客户端）上生成密钥对，使用 <code>ssh-copy-id</code> 将公钥复制到远程服务器中</strong></h3><ol><li>在本地机器上使用 <code>ssh-keygen</code> 产生公钥私钥对</li><li>用 <code>ssh-copy-id</code> 将公钥复制到远程机器中。默认: <code>ssh-copy-id</code> 会将Public Key写到远程机器的 <code>~/.ssh/authorized_key</code> 文件中</li><li><code>ssh-copy-id</code> 需要输入密码；第一次连接需要输入 <code>yes</code> 同意连接</li><li>以后登录到服务器都不用输入密码啦</li></ol><p>上述步骤对应命令如下：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen <span class="comment"># -t rsa 指定RSA加密算法</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/yan/.ssh/id_rsa): /Users/yan/.ssh/login2bwg  <span class="comment"># 指定密钥保存路径</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): <span class="comment"># 直接回车就行</span></span><br><span class="line">Enter same passphrase again: <span class="comment"># 再次回车</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/yan/.ssh/login2bwg. <span class="comment"># 刚才指定的密钥路径就是私钥文件的路径</span></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/yan/.ssh/login2bwg.pub. <span class="comment"># .pub结尾的是私钥所对应的公钥</span></span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:1cK3jNxBM/9Kx5mSqyMl+w8BPzJpxIZL3cVNO380SfE yan@Mac-mini.local</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|            =.o+.|</span></span><br><span class="line"><span class="string">|        +..o.=..+|</span></span><br><span class="line"><span class="string">|       o *+.+ .=E|</span></span><br><span class="line"><span class="string">|      . +o+* o.+*|</span></span><br><span class="line"><span class="string">|       .S=o++o.o*|</span></span><br><span class="line"><span class="string">|        ..o.o.oo.|</span></span><br><span class="line"><span class="string">|          +. ..  |</span></span><br><span class="line"><span class="string">|         o .o    |</span></span><br><span class="line"><span class="string">|          ooo.   |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">$ ssh-copy-id -i ~/.ssh/login2bwg.pub root@2001:470:c:1ab0::2 -p 26885 # 将公钥复制到远程服务器的root用户目录</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/Users/yan/.ssh/login2bwg.pub"</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</span></span><br><span class="line"><span class="string">/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys</span></span><br><span class="line"><span class="string">root@2001:470:c:1ab0::2'</span>s password: <span class="comment"># 需要输入服务器密码</span></span><br><span class="line"></span><br><span class="line">Number of key(s) added:        1</span><br><span class="line"></span><br><span class="line">Now try logging into the machine, with:   <span class="string">"ssh -p '26885' 'root@2001:470:c:1ab0::2'"</span></span><br><span class="line">and check to make sure that only the key(s) you wanted were added.</span><br><span class="line"></span><br><span class="line">$ ssh -p 26885 root@2001:470:c:1ab0::2</span><br><span class="line">root@2001:470:c:1ab0::2<span class="string">'s password: # 这里遇到了问题，仍然要求输入密码才能登录。服务器端没有配置开启密钥登录，看下文的方法进行配置。</span></span><br></pre></td></tr></table></figure></div><h3 id="无法将公钥复制添加到服务器-ssh-authorized-keys-文件中"><a href="#无法将公钥复制添加到服务器-ssh-authorized-keys-文件中" class="headerlink" title="无法将公钥复制添加到服务器 ~/.ssh/authorized_keys 文件中"></a>无法将公钥复制添加到服务器 <code>~/.ssh/authorized_keys</code> 文件中</h3><p><strong>问题描述：</strong><br>在执行 <code>cat id_rsa.pub &gt;&gt;authorized_keys</code> 或 <code>ssh-copy-id -i ~/.ssh/login2bwg.pub root@2001:470:c:1ab0::2 -p 26885</code> 将公钥添加到服务器时报错❌：即使是使用sudo仍然没有权限修改文件内容  </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">-bash: authorized_keys: Operation not permitted</span><br></pre></td></tr></table></figure></div><p><strong>解决方法：</strong><br>通过 <code>lsattr</code> 命令发现文件受保护禁止任何编辑，有<code>i</code>输出，使用 <code>chattr -i</code> 命令删除保护属性</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/.ssh<span class="comment"># lsattr authorized_keys</span></span><br><span class="line">----i------------- authorized_keys</span><br><span class="line">root@brave-post-2:~/.ssh<span class="comment"># chattr -i authorized_keys</span></span><br><span class="line">root@brave-post-2:~/.ssh<span class="comment"># lsattr authorized_keys</span></span><br><span class="line">------------------ authorized_keys</span><br><span class="line">root@brave-post-2:~/.ssh<span class="comment"># cat github_actions2banwagon.pub &gt;&gt; authorized_keys # 已经能够修改authorized_keys的文件内容</span></span><br><span class="line">root@brave-post-2:~/.ssh<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><p>PS: 关于<code>lsattr</code> 和<code>chattr</code> 命令的简单用法。</p><p>(1) 用chattr命令防止系统中某个关键文件被修改<br><code>$ chattr +i /etc/resolv.conf</code><br>然后用 mv &#x2F;etc&#x2F;resolv.conf 等命令操作于该文件，都是得到 Operation not permitted 的结果。<br>vim编辑该文件时会提示W10: Warning: Changing a readonly file错误。要想修改此文件就要把i属性去掉：<br><code>chattr -i /etc/resolv.conf</code></p><p>使用 lsattr 命令来显示文件属性:<br><code>lsattr /etc/resolv.conf</code><br>输出结果为:<br><code>----i-------- /etc/resolv.conf</code></p><p>(2) 让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：<br><code>chattr +a /var/log/messages</code></p><h2 id="已经配置好了公钥私钥，Ubuntu服务器仍然要求输入密码才能进行ssh登录"><a href="#已经配置好了公钥私钥，Ubuntu服务器仍然要求输入密码才能进行ssh登录" class="headerlink" title="已经配置好了公钥私钥，Ubuntu服务器仍然要求输入密码才能进行ssh登录"></a>已经配置好了公钥私钥，Ubuntu服务器仍然要求输入密码才能进行ssh登录</h2><p>出现这个问题的原因是远程服务器上的sshd服务没有配置好，我用的Ubuntu 18.04默认配置是关闭使用私钥登录的，需要修改配置文件。</p><ol><li><p>在Ubuntu服务器上打开配置文件：  <code>sudo vi /etc/ssh/sshd_config</code>  </p></li><li><p>修改配置如下：</p></li></ol><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#禁用root账户登录，如果是用root用户登录请开启  </span></span><br><span class="line">PermitRootLogin yes  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否让 sshd 去检查用户家目录或相关档案的权限数据，  </span></span><br><span class="line"><span class="comment"># 这是为了担心使用者将某些重要档案的权限设错，可能会导致一些问题所致。  </span></span><br><span class="line"><span class="comment"># 例如使用者的 ~.ssh/ 权限设错时，某些特殊情况下会不许用户登入  </span></span><br><span class="line">StrictModes no  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否允许用户自行使用成对的密钥系统进行登入行为，仅针对 version 2。  </span></span><br><span class="line"><span class="comment"># 至于自制的公钥数据就放置于用户家目录下的 .ssh/authorized_keys 内  </span></span><br><span class="line">RSAAuthentication yes  </span><br><span class="line">PubkeyAuthentication yes  </span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 有了证书登录了，就禁用密码登录。 no为禁止密码登录</span></span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure></div><p>最后重启SSH的服务 <code>sudo service sshd restart</code> 即刻生效。</p><p>再次ssh连接至服务器，此时已经不用输入密码即刻登录，如下图所示：</p><p><img src="/2020/06/22/ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/ssh.gif" alt="ssh连接免密码登录服务器"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SSH连接免密码登录配置&quot;&gt;&lt;a href=&quot;#SSH连接免密码登录配置&quot; class=&quot;headerlink&quot; title=&quot;SSH连接免密码登录配置&quot;&gt;&lt;/a&gt;SSH连接免密码登录配置&lt;/h2&gt;&lt;h3 id=&quot;方法一：手动复制公钥至服务器&quot;&gt;&lt;a href=&quot;#方法一：手动复制公钥至服务器&quot; class=&quot;headerlink&quot; title=&quot;方法一：手动复制公钥至服务器&quot;&gt;&lt;/a&gt;方法一：手动复制公钥至服务器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ssh-keygen -t rsa&lt;/code&gt; 在客户端生成密钥对  &lt;/li&gt;
&lt;li&gt;把公钥拷贝给要登录的目标主机，手动复制粘贴&lt;/li&gt;
&lt;li&gt;目标主机上将这个公钥加入到授权列表 &lt;code&gt;cat id_rsa.pub &amp;gt;&amp;gt;authorized_keys&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;目标主机还要将这个授权列表文件权限修改为 &lt;code&gt;600&lt;/code&gt; , &lt;code&gt;chmod 600 authorized_keys&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;在用户目录下即 &lt;code&gt;~&lt;/code&gt; 执行以下步骤：  &lt;ol&gt;
&lt;li&gt;&lt;code&gt;rm -rf .ssh/&lt;/code&gt; # 会删除已有的密钥，谨慎删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh-keygen -t rsa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cat .ssh/id_rsa.pub &amp;gt;&amp;gt; .ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod 700 .ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chmod 600 .ssh/authorized_keys&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这种方法容易出错，推荐使用方法二  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="ssh" scheme="https://xiaoyan94.github.io/tags/ssh/"/>
    
    <category term="Linux" scheme="https://xiaoyan94.github.io/tags/Linux/"/>
    
    <category term="密钥" scheme="https://xiaoyan94.github.io/tags/%E5%AF%86%E9%92%A5/"/>
    
  </entry>
  
  <entry>
    <title>使用Github Actions CI / CD 自动化部署Hexo到Github/Gitee Pages</title>
    <link href="https://xiaoyan94.github.io/2020/06/22/%E4%BD%BF%E7%94%A8Github-Actions-CI-CD-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Hexo%E5%88%B0Github-Gitee-Pages/"/>
    <id>https://xiaoyan94.github.io/2020/06/22/%E4%BD%BF%E7%94%A8Github-Actions-CI-CD-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Hexo%E5%88%B0Github-Gitee-Pages/</id>
    <published>2020-06-22T05:56:03.000Z</published>
    <updated>2023-02-08T02:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/06/22/%E4%BD%BF%E7%94%A8Github-Actions-CI-CD-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Hexo%E5%88%B0Github-Gitee-Pages/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="流程图"></p><p>在当前仓库 <code>hexobackup</code> 配置以下工作流，实现向当前仓库提交更新时，触发 GitPages 自动编译。</p><pre class="mermaid">graph TD;    1(手动执行 hexo g 和 hexo d 部署命令)-->自动推送GiteePages仓库-->2(已推送至 Gitee Pages 仓库)-->官方自动部署GiteePages要钱;    1-->自动推送GithubPages仓库-->已推送至GithubPages仓库-->官方自动部署GithubPages-->完成同步更新;    2-->3;    手动推送更新至hexobackup仓库触发Actions-->3(Actions等待工作流中配置的部署GiteePages作业被触发执行)-->自动部署GiteePages-->完成同步更新;    完成_config.yml文件的deploy配置-->1;</pre><p>Something about Continuously Integrity &#x2F; Continuously Deploy…</p><p>Github Actions.</p><p>.github&#x2F;workflows&#x2F;main.yml文件代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Sync</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[master]</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">xy94</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">xy94/xy94</span></span><br><span class="line">          <span class="comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div><p>SSH</p><p>CI 持续集成</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Github" scheme="https://xiaoyan94.github.io/tags/Github/"/>
    
    <category term="hexo" scheme="https://xiaoyan94.github.io/tags/hexo/"/>
    
    <category term="Github Actions" scheme="https://xiaoyan94.github.io/tags/Github-Actions/"/>
    
  </entry>
  
  <entry>
    <title>Git Bash中使用ssh远程连接至macOS/Linux服务器中文乱码 附Git Bash for Windows主题美化和字体设置</title>
    <link href="https://xiaoyan94.github.io/2020/06/21/Git-Bash%E4%B8%AD%E4%BD%BF%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%87%B3macOS-Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81-%E9%99%84Git-Bash-for-Windows%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%92%8C%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE/"/>
    <id>https://xiaoyan94.github.io/2020/06/21/Git-Bash%E4%B8%AD%E4%BD%BF%E7%94%A8ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E8%87%B3macOS-Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81-%E9%99%84Git-Bash-for-Windows%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%92%8C%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-06-21T15:36:03.000Z</published>
    <updated>2022-08-26T08:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows-Git-Bash-主题美化和字体设置"><a href="#Windows-Git-Bash-主题美化和字体设置" class="headerlink" title="Windows Git Bash 主题美化和字体设置"></a><a id="top1">Windows Git Bash 主题美化和字体设置</a></h2><h3 id="ssh远程连接至服务器，终端命令提示符等乱码"><a href="#ssh远程连接至服务器，终端命令提示符等乱码" class="headerlink" title="ssh远程连接至服务器，终端命令提示符等乱码"></a>ssh远程连接至服务器，终端命令提示符等乱码</h3><p><strong>问题描述</strong>：  </p><p>远程服务器上我使用的是oh-my-zsh终端并且使用了agnoster主题以及<code>Meslo LG L DZ Regular for Powerline</code>字体，在Windows上使用ssh远程连接至服务器时由于Windows没有Powerline字体，终端命令提示符有些非ASCII字符会乱码。</p><p><strong>解决方法</strong>：  </p><ol><li>下载并安装字体<br>在Windows上安装上述字体，点击 <a href="https://github.com/powerline/fonts/raw/master/Meslo%20Dotted/Meslo%20LG%20L%20DZ%20Regular%20for%20Powerline.ttf" target="_blank" rel="noopener">Meslo LG L DZ Regular for Powerline</a> 下载字体至本地，双击下载的字体文件，安装字体。</li><li>修改Git Bash配置文件使用安装好的字体<br>在Git Bash的Option中的Text选项卡也能设置字体，但是它的字体列表显示的不完全，很多Windows上已有的和上述新安装的Powerline字体在Git bash的设置里面都找不到。解决方法是直接修改Git Bash的配置文件，一般这个配置文件都是用户目录下的.minttyrc文件，即<code>~/.minttyrc</code>，如果没有这个文件也不影响下面的操作，会自动创建。在<code>~/.minttyrc</code>文件中填写以下配置：</li></ol><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Font&#x3D;Meslo LG L DZ Regular for Powerline</span><br><span class="line">FontHeight&#x3D;14</span><br><span class="line">ForegroundColour&#x3D;131,148,150</span><br><span class="line">BackgroundColour&#x3D;0,43,54</span><br><span class="line">CursorColour&#x3D;222,222,0</span><br><span class="line"></span><br><span class="line">Black&#x3D;7,54,66</span><br><span class="line">BoldBlack&#x3D;0,43,54</span><br><span class="line">Red&#x3D;220,50,47</span><br><span class="line">BoldRed&#x3D;203,75,22</span><br><span class="line">Green&#x3D;133,153,0</span><br><span class="line">BoldGreen&#x3D;88,110,117</span><br><span class="line">Yellow&#x3D;181,137,0</span><br><span class="line">BoldYellow&#x3D;101,123,131</span><br><span class="line">Blue&#x3D;38,139,210</span><br><span class="line">BoldBlue&#x3D;131,148,150</span><br><span class="line">Magenta&#x3D;211,54,130</span><br><span class="line">BoldMagenta&#x3D;108,113,196</span><br><span class="line">Cyan&#x3D;42,161,152</span><br><span class="line">BoldCyan&#x3D;147,161,161</span><br><span class="line">White&#x3D;238,232,213</span><br><span class="line">BoldWhite&#x3D;253,246,227</span><br><span class="line">Locale&#x3D;zh_CN </span><br><span class="line">Charset&#x3D;UTF-8</span><br><span class="line">CursorType&#x3D;block</span><br></pre></td></tr></table></figure></div><h3 id="主题配色和隐藏用户主机名"><a href="#主题配色和隐藏用户主机名" class="headerlink" title="主题配色和隐藏用户主机名"></a>主题配色和隐藏用户主机名</h3><ol><li>主题美化：<br>主题美化很简单，事实上已经配置完成了。以上配置文件中已经配置了字体<code>Font</code>和字体大小<code>FontHeight</code>，同时也配置了MinGW的主题配色为<a href="https://github.com/mavnn/mintty-colors-solarized" target="_blank" rel="noopener">mintty-colors-solarized</a>。重启Git Bash就能看到新的主题配色和字体。  </li><li>隐藏命令提示符前的 ‘用户名@主机名’：<br>打开Git Bash，输入命令<code>vi ~/.profile</code>打开.profile文件，按<code>i</code>进入<code>INSERT</code>模式，在文件末尾添加一行<code>export PS1=&quot;\W\[\033[32m\]\$(parse_git_branch)\[\033[00m\] $ &quot;</code> ，按<code>ESC</code>，输入<code>:wq</code>保存退出。再次重启Git Bash，用户名和主机名都不会显示啦。如果想只显示用户名而不显示电脑主机名，就把输入的那一行改为<del>改成啥来着，忘了，百度一下吧</del>。</li></ol><hr><h2 id="使用ssh远程连接时中文乱码"><a href="#使用ssh远程连接时中文乱码" class="headerlink" title="使用ssh远程连接时中文乱码"></a>使用ssh远程连接时中文乱码</h2><p><strong>问题描述</strong>：<br>在本地Windows系统的Git Bash上使用ssh连接至远程的macOS服务器（Linux同理），中文还是乱码。  </p><p><strong>解决方法</strong>:  </p><ol><li>在Windows上编辑<code>~/.minttyrc</code>文件，填入<code>Locale=zh_CN</code>和<code>Charset=UTF-8</code>这两行（上面修改主题部分给出的配置中已经有了这两行，没有就添加）以修改字符集为UTF-8；  </li><li>在<code>ssh username@host</code>连接上远程服务器之后，输入<code>export LANG=&quot;zh_CN.UTF-8&quot;</code>，中文即可显示正常。  </li><li>第2点的命令只对本次连接有效，下次使用ssh重新连接远程服务器时还是会出现中文乱码。为使之永久生效，可以将上述export命令添加到远程主机（macOS&#x2F;Linux）的环境变量中。</li></ol><hr><p>写完才发现我远程oh-my-zsh（<a href="https://www.ioiox.com/archives/34.html" target="_blank" rel="noopener">macOS上</a>）使用的字体是 <a href="https://github.com/abertsch/Menlo-for-Powerline" target="_blank" rel="noopener">Menlo-for-Powerline</a> ，虽然Windows本地的Git Bash上配置的字体和远程终端不一样，但是也不影响，因为两者都是支持非ASCII字符显示的Powerline字体。  </p><p>链接：macOS终端iTerm2及其主题美化：  </p><ol><li><a href="https://www.ioiox.com/archives/34.html" target="_blank" rel="noopener">macOS使用oh-my-zsh美化Terminal,iTerm2,VSCode命令行终端配置教程</a></li><li><a href="https://hsiangfeng.github.io/other/20200123/1105303313/" target="_blank" rel="noopener">Mac OS 終端機美化(Mac OS Terminal)</a></li><li><a href="https://www.jianshu.com/p/6d21d3484444" target="_blank" rel="noopener">【vscode】windows中使用zsh美化vscode终端</a></li><li><a href="https://sspai.com/post/45332" target="_blank" rel="noopener">一款基于 Electron 的跨平台终端 Terminal Emulator: Hyper</a></li></ol><hr><p><a href="#top1">回到顶部</a></p><hr>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Git Bash" scheme="https://xiaoyan94.github.io/tags/Git-Bash/"/>
    
    <category term="ssh" scheme="https://xiaoyan94.github.io/tags/ssh/"/>
    
    <category term="中文乱码" scheme="https://xiaoyan94.github.io/tags/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Linux/macOS终端命令之——basename / dirname,从完整文件名获取文件名/路径名</title>
    <link href="https://xiaoyan94.github.io/2020/06/21/Linux-macOS%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E4%B9%8B%E2%80%94%E2%80%94basename/"/>
    <id>https://xiaoyan94.github.io/2020/06/21/Linux-macOS%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E4%B9%8B%E2%80%94%E2%80%94basename/</id>
    <published>2020-06-21T11:57:45.000Z</published>
    <updated>2022-08-26T08:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux-x2F-macOS终端命令，如何从包含完整路径的文件名-获取-不包含文件夹路径只包含文件名的-基本名称"><a href="#Linux-x2F-macOS终端命令，如何从包含完整路径的文件名-获取-不包含文件夹路径只包含文件名的-基本名称" class="headerlink" title="Linux&#x2F;macOS终端命令，如何从包含完整路径的文件名 获取 不包含文件夹路径只包含文件名的 基本名称"></a>Linux&#x2F;macOS终端命令，如何从包含完整路径的文件名 获取 不包含文件夹路径只包含文件名的 基本名称</h2><p>一个简单的提示，如果你正在编写一个 Linux shell 脚本，并且需要从一个完整的(规范的)目录 &#x2F; 文件路径中获取文件名，你可以像这样使用 Linux basename 命令:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ basename /foo/bar/baz/foo.txt</span><br><span class="line">foo.txt</span><br></pre></td></tr></table></figure></div><a id="more"></a><p>或者，如果您知道文件名扩展名并希望获取文件名的第一部分（基本文件名，即扩展名之前的部分），则也可以使用以下命令：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ basename /foo/bar/baz/foo.txt .txt</span><br><span class="line">foo</span><br></pre></td></tr></table></figure></div><hr><p>反之，如果想要只获得文件完整路径名的文件夹路径，去掉文件名称，则可以使用<code>dirname</code>命令：  </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dirname /foo/bar/baz/foo.txt</span><br><span class="line">/foo/bar/baz</span><br></pre></td></tr></table></figure></div><hr><p>结合 <code>find</code> 命令，实现查找指定目录及其子目录下所有以.pdf结尾的文件，并在find的查找结果中只显示文件名，不显示文件夹路径：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ find . -iname <span class="string">"*python*.pdf"</span> -<span class="built_in">exec</span> basename &#123;&#125; \;</span><br><span class="line">Python_Programming.pdf</span><br><span class="line">Python核心编程(第二版).pdf</span><br><span class="line">Python编程入门  第3版.pdf</span><br><span class="line">think python.pdf</span><br><span class="line">Python编程：从入门到实践.pdf</span><br><span class="line">Flask Web开发 基于Python的Web应用开发实战 .pdf</span><br><span class="line">PythonWeb开发 测试驱动方法 .pdf</span><br><span class="line">Python数据分析基础.pdf</span><br><span class="line">Python数据挖掘入门与实践.pdf</span><br><span class="line">Python机器学习经典实例.pdf</span><br></pre></td></tr></table></figure></div><p>关于<code>find</code>命令：<br><code>-name</code> 参数严格区分大小写，如<code>python</code>和<code>Python</code>不同，<code>.PDF</code>和<code>.pdf</code>也不同；<br><code>-iname</code> 参数则不区分大小写，包括文件名和扩展名都不区分，<code>python</code>和<code>Python</code>都会匹配，<code>.PDF</code>和<code>.pdf</code>也都会匹配。  </p><hr><p>关于<code>basename</code>命令的更多功能：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">BASENAME(1)               BSD General Commands Manual              BASENAME(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">     basename, dirname -- <span class="built_in">return</span> filename or directory portion of pathname</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">     basename string [suffix]</span><br><span class="line">     basename [-a] [-s suffix] string [...]</span><br><span class="line">     dirname string</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">     The basename utility deletes any prefix ending with the last slash `/<span class="string">'</span></span><br><span class="line"><span class="string">     character present in string (after first stripping trailing slashes), and</span></span><br><span class="line"><span class="string">     a suffix, if given.  The suffix is not stripped if it is identical to the</span></span><br><span class="line"><span class="string">     remaining characters in string.  The resulting filename is written to the</span></span><br><span class="line"><span class="string">     standard output.  A non-existent suffix is ignored.  If -a is specified,</span></span><br><span class="line"><span class="string">     then every argument is treated as a string as if basename were invoked</span></span><br><span class="line"><span class="string">     with just one argument.  If -s is specified, then the suffix is taken as</span></span><br><span class="line"><span class="string">     its argument, and all other arguments are treated as a string.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     The dirname utility deletes the filename portion, beginning with the last</span></span><br><span class="line"><span class="string">     slash `/'</span> character to the end of string (after first stripping trailing</span><br><span class="line">     slashes), and writes the result to the standard output.</span><br><span class="line"></span><br><span class="line">EXAMPLES</span><br><span class="line">     The following line sets the shell variable FOO to /usr/bin.</span><br><span class="line"></span><br><span class="line">           FOO=`dirname /usr/bin/trail`</span><br><span class="line"></span><br><span class="line">DIAGNOSTICS</span><br><span class="line">     The basename and dirname utilities <span class="built_in">exit</span> 0 on success, and &gt;0 <span class="keyword">if</span> an error</span><br><span class="line">     occurs.</span><br><span class="line"></span><br><span class="line">SEE ALSO</span><br><span class="line">     csh(1), sh(1)</span><br><span class="line"></span><br><span class="line">STANDARDS</span><br><span class="line">     The basename and dirname utilities are expected to be IEEE Std 1003.2</span><br><span class="line">     (``POSIX.2<span class="string">''</span>) compatible.</span><br><span class="line"></span><br><span class="line">BSD                             April 18, 1994                             BSD</span><br></pre></td></tr></table></figure></div><hr><p><a href="https://alvinalexander.com/linux-unix/get-basename-from-full-filename-extension/" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Linux-x2F-macOS终端命令，如何从包含完整路径的文件名-获取-不包含文件夹路径只包含文件名的-基本名称&quot;&gt;&lt;a href=&quot;#Linux-x2F-macOS终端命令，如何从包含完整路径的文件名-获取-不包含文件夹路径只包含文件名的-基本名称&quot; class=&quot;headerlink&quot; title=&quot;Linux&amp;#x2F;macOS终端命令，如何从包含完整路径的文件名 获取 不包含文件夹路径只包含文件名的 基本名称&quot;&gt;&lt;/a&gt;Linux&amp;#x2F;macOS终端命令，如何从包含完整路径的文件名 获取 不包含文件夹路径只包含文件名的 基本名称&lt;/h2&gt;&lt;p&gt;一个简单的提示，如果你正在编写一个 Linux shell 脚本，并且需要从一个完整的(规范的)目录 &amp;#x2F; 文件路径中获取文件名，你可以像这样使用 Linux basename 命令:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ basename /foo/bar/baz/foo.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Shell" scheme="https://xiaoyan94.github.io/tags/Shell/"/>
    
    <category term="Linux" scheme="https://xiaoyan94.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux/macOS终端命令之——find</title>
    <link href="https://xiaoyan94.github.io/2020/06/21/Linux-macOS%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E4%B9%8B%E2%80%94%E2%80%94find/"/>
    <id>https://xiaoyan94.github.io/2020/06/21/Linux-macOS%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4%E4%B9%8B%E2%80%94%E2%80%94find/</id>
    <published>2020-06-21T11:54:02.000Z</published>
    <updated>2022-08-26T08:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>查找命令</p>]]></content>
    
    
      
      
    <summary type="html"></summary>
      
    
    
    
    
    <category term="Shell" scheme="https://xiaoyan94.github.io/tags/Shell/"/>
    
    <category term="Linux" scheme="https://xiaoyan94.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop：分布式资源调度YARN</title>
    <link href="https://xiaoyan94.github.io/2020/06/18/%E5%88%86%E5%B8%83%E5%BC%8F%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6YARN/"/>
    <id>https://xiaoyan94.github.io/2020/06/18/%E5%88%86%E5%B8%83%E5%BC%8F%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6YARN/</id>
    <published>2020-06-18T06:48:12.000Z</published>
    <updated>2022-08-26T08:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>YARN</strong>全称：Yet Another Resource Negotiator。</p><p>一个Cluster Resource Management</p><a id="more"></a><h2 id="YARN产生背景"><a href="#YARN产生背景" class="headerlink" title="YARN产生背景"></a>YARN产生背景</h2><p>MapReduce1.x存在的问题：</p><ul><li>单点故障&amp;节点压力大不易扩展</li><li>资源利用率低&amp;运维成本高</li></ul><p>Hadoop1.x时:  </p><p>MapReduce: Master&#x2F;Slave架构， 1个JobTracker带多个TaskTracker<br>JobTracker: 负责资源管理和作业调度<br>TaskTracker: 定期向JT汇报本节点的健康状况、资源使用情况、作业执行情况;<br>接收来自JT的命令:启动任务&#x2F;杀死任务</p><p><strong>YARN</strong>:</p><p>不同计算框架可以共享同一个HDFS集群上的数据，享受整体的资源调度<br>XXX on YARN的好处:<br>与其他计算框架共享集群资源，按资源需要分配，进而提高集群资源的利用率<br>XXX: Spark&#x2F;MapReduce&#x2F;Storm&#x2F;Flink</p><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>MapReduce v2版本的<strong>基本思想</strong>是将JobTracker的两个主要功能（<strong>资源管理和作业计划&#x2F;监视</strong>）拆分为单独的守护程序。 想法是拥有一个全局<strong>ResourceManager</strong>（RM）和每个应用程序的<strong>ApplicationMaster</strong>（AM）。 一个应用程序（Application）要么是传统意义上的Map-Reduce作业中的单个作业，要么是作业的DAG（有向无环图）。</p><hr><h2 id="主要组件"><a href="#主要组件" class="headerlink" title="主要组件"></a>主要组件</h2><p><img src="/2020/06/18/%E5%88%86%E5%B8%83%E5%BC%8F%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6YARN/yarn_architecture.gif" alt="Yarn架构和主要组件"></p><p>ResourceManager和每个节点的从属节点NodeManager（NM）构成了数据计算框架。 ResourceManager是在系统中所有应用程序之间仲裁资源的最终权限。</p><p>每个应用程序的ApplicationMaster实际上是一个框架特定库，其任务是协商来自ResourceManager的资源，并与NodeManager一起执行和监视任务。</p><p>ResourceManager具有两个主要组件：Scheduler和ApplicationsManager。  </p><p>Scheduler负责将资源分配给各种正在运行的应用程序，这些应用程序受到常见的能力、队列等约束。<br>Scheduler是纯调度器，因为它不监视或跟踪应用程序的状态。此外，它不能保证重新启动<em>由于应用程序失败或硬件失败而失败的</em>任务。<br>Scheduler基于应用程序的资源要求执行其调度功能；它基于资源容器的抽象概念来执行此功能，资源容器合并了内存、CPU、磁盘、网络等元素。在第一个版本中，仅支持内存。<br>Scheduler有一个可插拔的策略插件，负责在各种队列、应用程序等之间划分集群资源。Map-Reduce调度器(如CapacityScheduler和FairScheduler)就是该插件的一些示例。<br>CapacityScheduler支持分层队列（<em>hierarchical queues</em>），以使群集资源的共享更加可预测。</p><p>ApplicationsManager负责接受作业提交，协商用于执行特定于应用程序的ApplicationMaster的第一个容器，并提供在失败时重新启动ApplicationMaster容器的服务。</p><p>Container： 封装了CPU、Memory等资源的容器。</p><p>NodeManager是每台机器的框架代理，负责容器，监视其资源使用情况（cpu，内存，磁盘，网络），并将其报告给ResourceManager &#x2F; Scheduler。</p><p>每个应用程序的ApplicationMaster负责从Scheduler协商适当的资源容器，跟踪它们的状态并监视进度。</p><p>MRV2与以前的稳定版本（hadoop-1.x）保持API兼容性。这意味着，所有Map Reduce作业都应该在MRv2的基础上以不变的方式运行，只需重新编译。</p><hr><h2 id="YARN环境搭建"><a href="#YARN环境搭建" class="headerlink" title="YARN环境搭建"></a>YARN环境搭建</h2><p>Hadoop版本：hadoop-2.6.0-cdh5.7.0</p><h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>依然是在伪分布式环境：<br>Hadoop也可以以伪分布式模式在单节点上运行，其中每个Hadoop守护程序都在单独的Java进程中运行。<br>通过设置一些参数并运行ResourceManager守护进程和NodeManager守护进程，可以在伪分布式模式下在YAR上运行MapReduce作业。</p><p>打开以下配置文件：Hadoop安装目录&#x2F;etc&#x2F;hadoop&#x2F;mapred-site.xml:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>Hadoop安装目录&#x2F;etc&#x2F;hadoop&#x2F;yarn-site.xml:</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="启动与停止YARN服务"><a href="#启动与停止YARN服务" class="headerlink" title="启动与停止YARN服务"></a>启动与停止YARN服务</h3><p>启动ResourceManager守护程序和NodeManager守护程序：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="variable">$HADOOP_HOME</span>/sbin/start-yarn.sh</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><p><code>jps</code>命令查看RM和NM进程是否启动成功<br>ResourceManager Web管理界面： <a href="http://server-ip:8088/" target="_blank" rel="noopener">http://server-ip:8088/</a></p><p>运行MapReduce作业：<br>使用<code>hadoop jar</code>命令提交MapReduce作业到yarn运行。</p><p>停止YARN守护进程：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="variable">$HADOOP_HOME</span>/sbin/stop-yarn.sh</span><br><span class="line">$</span><br></pre></td></tr></table></figure></div><hr><p><a href="https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/ClusterSetup.html" target="_blank" rel="noopener">真·分布式集群配置</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;YARN&lt;/strong&gt;全称：Yet Another Resource Negotiator。&lt;/p&gt;
&lt;p&gt;一个Cluster Resource Management&lt;/p&gt;</summary>
    
    
    
    
    <category term="Hadoop" scheme="https://xiaoyan94.github.io/tags/Hadoop/"/>
    
    <category term="YARN" scheme="https://xiaoyan94.github.io/tags/YARN/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop HDFS JAVA API操作</title>
    <link href="https://xiaoyan94.github.io/2020/06/18/Hadoop-HDFS-JAVA-API%E6%93%8D%E4%BD%9C/"/>
    <id>https://xiaoyan94.github.io/2020/06/18/Hadoop-HDFS-JAVA-API%E6%93%8D%E4%BD%9C/</id>
    <published>2020-06-18T02:48:47.000Z</published>
    <updated>2022-08-26T08:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><ul><li>IntelliJ IDEA 新建 Maven 项目<ul><li>勾选 <code>Create from archetype</code></li><li>选择 <code>org.apache.maven.archetypes:maven-archetype-quickstart</code>,点击<code>Next</code></li><li>Maven home directory可以默认，也可以选择自己安装的Maven目录</li><li>User settings file勾选<code>Override</code>，选择用户自定义的<code>~/.m2/settings.xml</code>文件</li></ul></li><li><code>pom.xml</code> 配置</li></ul><a id="more"></a><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-train<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop-train<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hadoop.version</span>&gt;</span>2.6.0-cdh5.7.0<span class="tag">&lt;/<span class="name">hadoop.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 默认仓库没有cdh版本的hadoop，需要添加CDH仓库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>cloudera<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repository.cloudera.com/artifactory/cloudera-repos/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加Hadoop依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用$&#123;&#125;使用上面自定义的properties --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hadoop.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-site-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="2-编写测试类"><a href="#2-编写测试类" class="headerlink" title="2. 编写测试类"></a>2. 编写测试类</h2><h3 id="2-1-调用fileSystem-mkdir方法创建文件夹"><a href="#2-1-调用fileSystem-mkdir方法创建文件夹" class="headerlink" title="2.1. 调用fileSystem.mkdir方法创建文件夹"></a>2.1. 调用<code>fileSystem.mkdir</code>方法创建文件夹</h3><p>测试代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hadoop HDFS Java API 操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String HDFS_PATH = <span class="string">"hdfs://23.105.206.170:8020"</span>;</span><br><span class="line"></span><br><span class="line">    FileSystem fileSystem = <span class="keyword">null</span>;</span><br><span class="line">    Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mkdir</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        fileSystem.mkdirs(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HDFSApp.setUp"</span>);</span><br><span class="line">        configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        fileSystem = FileSystem.get(<span class="keyword">new</span> URI(HDFS_PATH), configuration, <span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        configuration = <span class="keyword">null</span>;</span><br><span class="line">        fileSystem = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"HDFSApp.tearDown"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="2-1-1-异常处理"><a href="#2-1-1-异常处理" class="headerlink" title="2.1.1. 异常处理"></a>2.1.1. 异常处理</h4><ul><li>连接异常：<code>java.net.ConnectException: Connection refused</code></li></ul><p>异常代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">HDFSApp.setUp</span><br><span class="line">log4j:<span class="function">WARN No appenders could be found <span class="keyword">for</span> <span class="title">logger</span> <span class="params">(org.apache.hadoop.metrics2.lib.MutableMetricsFactory)</span>.</span></span><br><span class="line"><span class="function">log4j:WARN Please initialize the log4j system properly.</span></span><br><span class="line"><span class="function">log4j:WARN See http:<span class="comment">//logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span></span></span><br><span class="line"><span class="function">WARNING: An illegal reflective access operation has occurred</span></span><br><span class="line"><span class="function">WARNING: Illegal reflective access by org.apache.hadoop.security.authentication.util.<span class="title">KerberosUtil</span> <span class="params">(file:/Users/yan/.m2/repository/org/apache/hadoop/hadoop-auth/<span class="number">2.6</span><span class="number">.0</span>-cdh5<span class="number">.7</span><span class="number">.0</span>/hadoop-auth<span class="number">-2.6</span><span class="number">.0</span>-cdh5<span class="number">.7</span><span class="number">.0</span>.jar)</span> to method sun.security.krb5.Config.<span class="title">getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">WARNING: Please consider reporting <span class="keyword">this</span> to the maintainers of org.apache.hadoop.security.authentication.util.KerberosUtil</span></span><br><span class="line"><span class="function">WARNING: Use --illegal-access</span>=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br><span class="line">HDFSApp.tearDown</span><br><span class="line"></span><br><span class="line">java.net.ConnectException: Call From Mac-mini.local/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> to <span class="number">23.105</span><span class="number">.206</span><span class="number">.170</span><span class="number">.16</span>clouds.com:<span class="number">8020</span> failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http:<span class="comment">//wiki.apache.org/hadoop/ConnectionRefused</span></span><br><span class="line"></span><br><span class="line"> at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line"> ...(省略)</span><br><span class="line"> at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">58</span>)</span><br><span class="line"></span><br><span class="line">Caused by: java.net.ConnectException: Connection refused</span><br><span class="line"> at java.base/sun.nio.ch.Net.pollConnect(Native Method)</span><br><span class="line"> ...</span><br><span class="line"> ... <span class="number">44</span> more</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">255</span></span><br></pre></td></tr></table></figure></div><hr><p>解决方法：<br>（1）使用<code>jps</code>命令查看Hdfs是否运行；<br>（2）查看服务器防火墙是否开放<code>8020</code>端口；<br>（3）查看服务器Hadoop安装目录下etc&#x2F;core-site.xml中地址是否配置为服务器公网ip；  </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~<span class="comment"># $HADOOP_HOME/sbin/start-dfs.sh  </span></span><br><span class="line">20/06/12 02:10:20 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Starting namenodes on [localhost]</span><br><span class="line">localhost: starting namenode, logging to /root/app/hadoop-2.6.0-cdh5.7.0/logs/hadoop-root-namenode-brave-post-2.localdomain.out</span><br><span class="line">localhost: starting datanode, logging to /root/app/hadoop-2.6.0-cdh5.7.0/logs/hadoop-root-datanode-brave-post-2.localdomain.out</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">0.0.0.0: starting secondarynamenode, logging to /root/app/hadoop-2.6.0-cdh5.7.0/logs/hadoop-root-secondarynamenode-brave-post-2.localdomain.out</span><br><span class="line">20/06/12 02:10:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line"></span><br><span class="line">root@brave-post-2:~<span class="comment"># ufw status</span></span><br><span class="line">Status: inactive</span><br><span class="line">root@brave-post-2:~<span class="comment"># jps</span></span><br><span class="line">1210 NameNode</span><br><span class="line">1868 Jps</span><br><span class="line">1326 DataNode</span><br><span class="line">1535 SecondaryNameNode</span><br><span class="line"></span><br><span class="line">root@brave-post-2:~<span class="comment"># cat $HADOOP_HOME/etc/hadoop/core-site.xml  </span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://localhost:8020&lt;/value&gt;</span><br><span class="line">        <span class="comment">#将localhost改为公网IP地址！！！！实测不能为0.0.0.0，写文件时会报异常,下面的异常和这里配置错误有关</span></span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/root/app/tmp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">root@brave-post-2:~<span class="comment"># $HADOOP_HOME/sbin/stop-all.sh  </span></span><br><span class="line">This script is Deprecated. Instead use stop-dfs.sh and stop-yarn.sh</span><br><span class="line">20/06/12 03:14:37 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Stopping namenodes on [localhost]</span><br><span class="line">localhost: stopping namenode</span><br><span class="line">localhost: stopping datanode</span><br><span class="line">Stopping secondary namenodes [0.0.0.0]</span><br><span class="line">0.0.0.0: stopping secondarynamenode</span><br><span class="line">20/06/12 03:14:59 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">stopping yarn daemons</span><br><span class="line">no resourcemanager to stop</span><br><span class="line">localhost: no nodemanager to stop</span><br><span class="line">no proxyserver to stop</span><br><span class="line"></span><br><span class="line">root@brave-post-2:~<span class="comment"># vi $HADOOP_HOME/etc/hadoop/core-site.xml</span></span><br><span class="line">root@brave-post-2:~<span class="comment"># cat $HADOOP_HOME/etc/hadoop/core-site.xml</span></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;?xml-stylesheet <span class="built_in">type</span>=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span>?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the <span class="string">"License"</span>);</span><br><span class="line">  you may not use this file except <span class="keyword">in</span> compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to <span class="keyword">in</span> writing, software</span><br><span class="line">  distributed under the License is distributed on an <span class="string">"AS IS"</span> BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License <span class="keyword">for</span> the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides <span class="keyword">in</span> this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://ip:8020&lt;/value&gt; <span class="comment">#这里得填公网IP地址，不能为0.0.0.0</span></span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/root/app/tmp&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">root@brave-post-2:~<span class="comment"># $HADOOP_HOME/sbin/start-dfs.sh</span></span><br><span class="line">20/06/12 03:16:35 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Starting namenodes on [0.0.0.0]</span><br><span class="line">0.0.0.0: starting namenode, logging to /root/app/hadoop-2.6.0-cdh5.7.0/logs/hadoop-root-namenode-brave-post-2.localdomain.out</span><br><span class="line">localhost: starting datanode, logging to /root/app/hadoop-2.6.0-cdh5.7.0/logs/hadoop-root-datanode-brave-post-2.localdomain.out</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">0.0.0.0: starting secondarynamenode, logging to /root/app/hadoop-2.6.0-cdh5.7.0/logs/hadoop-root-secondarynamenode-brave-post-2.localdomain.out</span><br><span class="line">20/06/12 03:16:55 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><hr><ul><li>访问控制权限异常：<code>org.apache.hadoop.security.AccessControlException: Permission denied: user=yan, access=WRITE, inode=&quot;/&quot;:root:supergroup:drwxr-xr-x</code><ul><li>解决方法：使用<code>FileSystem.get</code> 的重载方法，给出user参数值为root</li></ul></li></ul><h3 id="2-2-调用FileSystem-create方法创建文件"><a href="#2-2-调用FileSystem-create方法创建文件" class="headerlink" title="2.2. 调用FileSystem.create方法创建文件"></a>2.2. 调用<code>FileSystem.create</code>方法创建文件</h3><p>测试代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    FSDataOutputStream fsDataOutputStream = fileSystem.create(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/a.txt"</span>));</span><br><span class="line">    fsDataOutputStream.write(<span class="string">"Hello hadoop字节数组"</span>.getBytes());</span><br><span class="line">    fsDataOutputStream.flush();</span><br><span class="line">    fsDataOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><h4 id="2-2-1-异常处理"><a href="#2-2-1-异常处理" class="headerlink" title="2.2.1. 异常处理"></a>2.2.1. 异常处理</h4><p>运行上面方法，hdfs无法写入内容，出现以下异常</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">org.apache.hadoop.ipc.RemoteException(java.io.IOException): File /hdfsapi/test/a.txt could only be replicated to <span class="number">0</span> <span class="function">nodes instead of <span class="title">minReplication</span> <span class="params">(=<span class="number">1</span>)</span>.  There are 1 <span class="title">datanode</span><span class="params">(s)</span> running and 1 <span class="title">node</span><span class="params">(s)</span> are excluded in <span class="keyword">this</span> operation.</span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.server.blockmanagement.BlockManager.<span class="title">chooseTarget4NewBlock</span><span class="params">(BlockManager.java:<span class="number">1595</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.<span class="title">getAdditionalBlock</span><span class="params">(FSNamesystem.java:<span class="number">3287</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.server.namenode.NameNodeRpcServer.<span class="title">addBlock</span><span class="params">(NameNodeRpcServer.java:<span class="number">677</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.server.namenode.AuthorizationProviderProxyClientProtocol.<span class="title">addBlock</span><span class="params">(AuthorizationProviderProxyClientProtocol.java:<span class="number">213</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolServerSideTranslatorPB.<span class="title">addBlock</span><span class="params">(ClientNamenodeProtocolServerSideTranslatorPB.java:<span class="number">485</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.protocol.proto.ClientNamenodeProtocolProtos$ClientNamenodeProtocol$2.<span class="title">callBlockingMethod</span><span class="params">(ClientNamenodeProtocolProtos.java)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.ipc.ProtobufRpcEngine$Server$ProtoBufRpcInvoker.<span class="title">call</span><span class="params">(ProtobufRpcEngine.java:<span class="number">617</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.ipc.RPC$Server.<span class="title">call</span><span class="params">(RPC.java:<span class="number">1073</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.ipc.Server$Handler$1.<span class="title">run</span><span class="params">(Server.java:<span class="number">2086</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.ipc.Server$Handler$1.<span class="title">run</span><span class="params">(Server.java:<span class="number">2082</span>)</span></span></span><br><span class="line"><span class="function"> at java.security.AccessController.<span class="title">doPrivileged</span><span class="params">(Native Method)</span></span></span><br><span class="line"><span class="function"> at javax.security.auth.Subject.<span class="title">doAs</span><span class="params">(Subject.java:<span class="number">422</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.security.UserGroupInformation.<span class="title">doAs</span><span class="params">(UserGroupInformation.java:<span class="number">1693</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.ipc.Server$Handler.<span class="title">run</span><span class="params">(Server.java:<span class="number">2080</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.ipc.Client.<span class="title">call</span><span class="params">(Client.java:<span class="number">1471</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.ipc.Client.<span class="title">call</span><span class="params">(Client.java:<span class="number">1408</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.<span class="title">invoke</span><span class="params">(ProtobufRpcEngine.java:<span class="number">230</span>)</span></span></span><br><span class="line"><span class="function"> at com.sun.proxy.$Proxy15.<span class="title">addBlock</span><span class="params">(Unknown Source)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.<span class="title">addBlock</span><span class="params">(ClientNamenodeProtocolTranslatorPB.java:<span class="number">404</span>)</span></span></span><br><span class="line"><span class="function"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.<span class="title">invoke0</span><span class="params">(Native Method)</span></span></span><br><span class="line"><span class="function"> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.<span class="title">invoke</span><span class="params">(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span></span></span><br><span class="line"><span class="function"> at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.<span class="title">invoke</span><span class="params">(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span></span></span><br><span class="line"><span class="function"> at java.base/java.lang.reflect.Method.<span class="title">invoke</span><span class="params">(Method.java:<span class="number">567</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.io.retry.RetryInvocationHandler.<span class="title">invokeMethod</span><span class="params">(RetryInvocationHandler.java:<span class="number">256</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.io.retry.RetryInvocationHandler.<span class="title">invoke</span><span class="params">(RetryInvocationHandler.java:<span class="number">104</span>)</span></span></span><br><span class="line"><span class="function"> at com.sun.proxy.$Proxy16.<span class="title">addBlock</span><span class="params">(Unknown Source)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.DFSOutputStream$DataStreamer.<span class="title">locateFollowingBlock</span><span class="params">(DFSOutputStream.java:<span class="number">1704</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.DFSOutputStream$DataStreamer.<span class="title">nextBlockOutputStream</span><span class="params">(DFSOutputStream.java:<span class="number">1500</span>)</span></span></span><br><span class="line"><span class="function"> at org.apache.hadoop.hdfs.DFSOutputStream$DataStreamer.<span class="title">run</span><span class="params">(DFSOutputStream.java:<span class="number">668</span>)</span></span></span><br></pre></td></tr></table></figure></div><hr><p>出现上面异常的原因有很多，具体信息可以查看日志文件<code>hadoop-root-datanode-brave-post-2.localdomain.log</code>：<br>经过一番盘查试错，终，之前在<code>core-site.xml</code>文件中，将localhost改为0.0.0.0，导致了这个问题。<br><strong>正确配置</strong>应为  </p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://公网ip:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/root/app/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><hr><p>重新启动HDFS之后，打开浏览器查看DataNode info：  </p><p><img src="/2020/06/18/Hadoop-HDFS-JAVA-API%E6%93%8D%E4%BD%9C/datanode_ip.png" alt="正确配置时DataNode信息"><br>此时DN节点显示的是公网ip+端口，客户端重新运行测试类<code>createFile</code>方法，成功创建并写入文本文件内容。Hadoop运行在公网服务器时，想要Java客户端能够通过Java API操作HDFS，必须通过配置让节点在 Datanode Information 中显示的是正在使用公网ip地址。</p><ul><li>试错期间还遇到了clusterID不一致的问题，查看datanode节点的日志输出异常<code>java.io.IOException: Incompatible clusterIDs</code>：</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">2020-06-12 07:16:54,343 WARN org.apache.hadoop.hdfs.server.common.Storage: java.io.IOException: Incompatible clusterIDs in &#x2F;home&#x2F;root&#x2F;app&#x2F;tmp&#x2F;dfs&#x2F;data: namenode clusterID &#x3D; CID-401a9f8e-e699-4aa9-9f8c-0ef5bd016863; datanode clusterID &#x3D; CID-42b312a4-8c81-4582-8d33-d8dafa23fe4e</span><br><span class="line">2020-06-12 07:16:54,344 FATAL org.apache.hadoop.hdfs.server.datanode.DataNode: Initialization failed for Block pool &lt;registering&gt; (Datanode Uuid unassigned) service to &#x2F;0.0.0.0:8020. Exiting.</span><br><span class="line">java.io.IOException: All specified directories are failed to load.</span><br><span class="line"> at org.apache.hadoop.hdfs.server.datanode.DataStorage.recoverTransitionRead(DataStorage.java:478)</span><br><span class="line"> at org.apache.hadoop.hdfs.server.datanode.DataNode.initStorage(DataNode.java:1394)</span><br><span class="line"> at org.apache.hadoop.hdfs.server.datanode.DataNode.initBlockPool(DataNode.java:1355)</span><br><span class="line"> at org.apache.hadoop.hdfs.server.datanode.BPOfferService.verifyAndSetNamespaceInfo(BPOfferService.java:317)</span><br><span class="line"> at org.apache.hadoop.hdfs.server.datanode.BPServiceActor.connectToNNAndHandshake(BPServiceActor.java:228)</span><br><span class="line"> at org.apache.hadoop.hdfs.server.datanode.BPServiceActor.run(BPServiceActor.java:829)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">2020-06-12 07:16:54,349 WARN org.apache.hadoop.hdfs.server.datanode.DataNode: Ending block pool service for: Block pool &lt;registering&gt; (Datanode Uuid unassigned) service to &#x2F;0.0.0.0:8020</span><br><span class="line">2020-06-12 07:16:54,352 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: Removed Block pool &lt;registering&gt; (Datanode Uuid unassigned)</span><br><span class="line">2020-06-12 07:16:56,352 WARN org.apache.hadoop.hdfs.server.datanode.DataNode: Exiting Datanode</span><br><span class="line">2020-06-12 07:16:56,354 INFO org.apache.hadoop.util.ExitUtil: Exiting with status 0</span><br><span class="line">2020-06-12 07:16:56,355 INFO org.apache.hadoop.hdfs.server.datanode.DataNode: SHUTDOWN_MSG:</span><br><span class="line">&#x2F;************************************************************</span><br><span class="line">SHUTDOWN_MSG: Shutting down DataNode at localhost&#x2F;127.0.0.1</span><br></pre></td></tr></table></figure></div><hr><p>找到<a href="https://blog.csdn.net/u011630575/article/details/61191443" target="_blank" rel="noopener">解决方法</a>：<br>出现该问题的原因：在第一次格式化dfs后，启动并使用了hadoop，后来又重新执行了格式化命令（hdfs namenode -format)，这时namenode的clusterID会重新生成，而datanode的clusterID 保持不变。<br>解决方法：将datanode的clusterID改成和上面日志中的namenode的clusterID一样。</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:/home/root/app/tmp/dfs/data/current<span class="comment"># cat VERSION</span></span><br><span class="line"><span class="comment">#Fri Jun 12 06:46:01 EDT 2020</span></span><br><span class="line">storageID=DS-af0a3f1e-d5a0-4141-95c2-a4615c461743</span><br><span class="line">clusterID=CID-42b312a4-8c81-4582-8d33-d8dafa23fe4e</span><br><span class="line">cTime=0</span><br><span class="line">datanodeUuid=17c0f342-bbc3-45d1-b3c7-54e3fca3cda5</span><br><span class="line">storageType=DATA_NODE</span><br><span class="line">layoutVersion=-56</span><br><span class="line"></span><br><span class="line">root@brave-post-2:/home/root/app/tmp/dfs/data/current<span class="comment"># vi VERSION</span></span><br><span class="line"></span><br><span class="line">root@brave-post-2:/home/root/app/tmp/dfs/data/current<span class="comment"># cat VERSION</span></span><br><span class="line"><span class="comment">#Fri Jun 12 07:30:43 EDT 2020</span></span><br><span class="line">storageID=DS-af0a3f1e-d5a0-4141-95c2-a4615c461743</span><br><span class="line">clusterID=CID-401a9f8e-e699-4aa9-9f8c-0ef5bd016863</span><br><span class="line">cTime=0</span><br><span class="line">datanodeUuid=17c0f342-bbc3-45d1-b3c7-54e3fca3cda5</span><br><span class="line">storageType=DATA_NODE</span><br><span class="line">layoutVersion=-56</span><br><span class="line"></span><br><span class="line">root@brave-post-2:/home/root/app/tmp/dfs/data/current<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><h3 id="2-3-副本系数-replication-factor"><a href="#2-3-副本系数-replication-factor" class="headerlink" title="2.3. 副本系数 replication factor"></a>2.3. 副本系数 replication factor</h3><p><strong>问题</strong>:我们已经在hdfs-site.xmL中设置了副本系数为1,为什么此时查询文件看到的是3呢?  </p><p>如果你是通过hdfs shell的方式put上去的，那么才采用xml配置中的副本系数1；<br>如果我们是java api上传上去的，在本地我们并没有手工设置副本系数，所以采用的是hadoop默认的副本系数3.</p><p>测试代码：</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.Progressable;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hadoop HDFS Java API 操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String HDFS_PATH = <span class="string">"hdfs://23.105.206.170:8020"</span>;</span><br><span class="line"></span><br><span class="line">    FileSystem fileSystem = <span class="keyword">null</span>;</span><br><span class="line">    Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看文件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cat</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FSDataInputStream in = fileSystem.open(<span class="keyword">new</span> Path(<span class="string">"/f.txt"</span>));</span><br><span class="line">        IOUtils.copyBytes(in, System.out, <span class="number">1024</span>);</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listFiles</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileStatus[] fileStatuses = fileSystem.listStatus(<span class="keyword">new</span> Path(<span class="string">"/"</span>));</span><br><span class="line">        <span class="keyword">for</span> (FileStatus fileStatus:</span><br><span class="line">             fileStatuses) &#123;</span><br><span class="line">            System.out.println(fileStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> delete = fileSystem.delete(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test/e.txt"</span>),</span><br><span class="line">                <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(delete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rename</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> rename = fileSystem.rename(<span class="keyword">new</span> Path(<span class="string">"/f.txt"</span>), <span class="keyword">new</span> Path(<span class="string">"/f2"</span> +</span><br><span class="line">                <span class="string">".txt"</span>));</span><br><span class="line">        System.out.println(rename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyToLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        fileSystem.copyToLocalFile(<span class="keyword">new</span> Path(<span class="string">"/check.sh"</span>),</span><br><span class="line">                <span class="keyword">new</span> Path(<span class="string">"/Users/yan/testShell/check1.sh"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFromLocalFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        fileSystem.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">"/Users/yan/testShell/check.sh"</span>),</span><br><span class="line">                <span class="keyword">new</span> Path(<span class="string">"/check.sh"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFromLocalFileWithProgress</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String src = <span class="string">"/Users/yan/Downloads/考试安排表.xlsx"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Integer[] i = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        InputStream in =</span><br><span class="line">                <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(src)));</span><br><span class="line">        FSDataOutputStream output = fileSystem.create(<span class="keyword">new</span> Path(<span class="string">"/wechat.dmg"</span>), <span class="keyword">new</span> Progressable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">progress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> size = i[<span class="number">0</span>]++;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"上传进度"</span> + size +<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        IOUtils.copyBytes(in,output,<span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mkdir</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        fileSystem.mkdirs(<span class="keyword">new</span> Path(<span class="string">"/hdfsapi/test"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FSDataOutputStream fsDataOutputStream = fileSystem.create(<span class="keyword">new</span> Path(</span><br><span class="line">                <span class="string">"/f.txt"</span>));</span><br><span class="line">        fsDataOutputStream.write(<span class="string">"Hello  hadoop字节数组"</span>.getBytes());</span><br><span class="line">        fsDataOutputStream.flush();</span><br><span class="line">        fsDataOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HDFSApp.setUp"</span>);</span><br><span class="line">        configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">        fileSystem = FileSystem.get(<span class="keyword">new</span> URI(HDFS_PATH), configuration, <span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        configuration = <span class="keyword">null</span>;</span><br><span class="line">        fileSystem = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"HDFSApp.tearDown"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-环境搭建&quot;&gt;&lt;a href=&quot;#1-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;1. 环境搭建&quot;&gt;&lt;/a&gt;1. 环境搭建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;IntelliJ IDEA 新建 Maven 项目&lt;ul&gt;
&lt;li&gt;勾选 &lt;code&gt;Create from archetype&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择 &lt;code&gt;org.apache.maven.archetypes:maven-archetype-quickstart&lt;/code&gt;,点击&lt;code&gt;Next&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Maven home directory可以默认，也可以选择自己安装的Maven目录&lt;/li&gt;
&lt;li&gt;User settings file勾选&lt;code&gt;Override&lt;/code&gt;，选择用户自定义的&lt;code&gt;~/.m2/settings.xml&lt;/code&gt;文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pom.xml&lt;/code&gt; 配置&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Hadoop" scheme="https://xiaoyan94.github.io/tags/Hadoop/"/>
    
    <category term="HDFS" scheme="https://xiaoyan94.github.io/tags/HDFS/"/>
    
    <category term="大数据" scheme="https://xiaoyan94.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>CDH Hadoop安装过程</title>
    <link href="https://xiaoyan94.github.io/2020/06/08/CDH-Hadoop%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/"/>
    <id>https://xiaoyan94.github.io/2020/06/08/CDH-Hadoop%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</id>
    <published>2020-06-08T10:56:47.000Z</published>
    <updated>2022-08-26T08:30:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1. 安装环境"></a>1. 安装环境</h2><ul><li>操作系统：Ubuntu 18.04 64位</li><li><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html" target="_blank" rel="noopener">Hadoop</a>版本：hadoop-2.6.0-cdh5.7.0.tar.gz</li><li>JDK版本：jdk-8u241-linux-x64.tar.gz</li></ul><h2 id="2-Hadoop伪分布式安装"><a href="#2-Hadoop伪分布式安装" class="headerlink" title="2. Hadoop伪分布式安装"></a>2. <a href="https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="noopener">Hadoop伪分布式安装</a></h2><p>操作环境：macOS终端 <code>ssh</code> 远程连接Ubuntu  </p><h3 id="2-1-下载地址"><a href="#2-1-下载地址" class="headerlink" title="2.1. 下载地址"></a>2.1. 下载地址</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0.tar.gz <span class="comment">#Hadoop安装包</span></span><br><span class="line">wget http://enos.itcollege.ee/~jpoial/allalaadimised/jdk8/jdk-8u241-linux-x64.tar.gz <span class="comment">#JDK安装包</span></span><br></pre></td></tr></table></figure></div><a id="more"></a><h3 id="2-2-JDK安装"><a href="#2-2-JDK安装" class="headerlink" title="2.2. JDK安装"></a>2.2. JDK安装</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf jdk-8u241-linux-x64.tar.gz -C ~/app <span class="comment">#解压到~/app目录下</span></span><br><span class="line">vi ~/.bash_profile <span class="comment">#设置系统环境变量</span></span><br></pre></td></tr></table></figure></div><p>vi编辑器添加以下内容</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/app/jdk1.8.0_241</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></div><p>生效环境变量</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></div><h3 id="2-3-Hadoop安装"><a href="#2-3-Hadoop安装" class="headerlink" title="2.3. Hadoop安装"></a>2.3. Hadoop安装</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt install rsync</span><br><span class="line">apt install ssh</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys</span><br><span class="line">ssh localhost -p 26885 <span class="comment">#不用输入密码就能连接上了</span></span><br><span class="line">tar -zxvf hadoop-2.6.0-cdh5.7.0.tar.gz -C ~/app/ <span class="comment">#解压hadoop</span></span><br></pre></td></tr></table></figure></div><h3 id="2-4-Hadoop配置"><a href="#2-4-Hadoop配置" class="headerlink" title="2.4. Hadoop配置"></a>2.4. Hadoop配置</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi app/hadoop-2.6.0-cdh5.7.0/etc/hadoop/hadoop-env.sh</span><br></pre></td></tr></table></figure></div><p>配置<code>hadoop-env.sh</code>文件，修改JAVA_HOME；如果ssh端口不是默认的22则设置ssh端口</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/root/app/jdk1.8.0_241</span><br><span class="line"><span class="built_in">export</span> HADOOP_SSH_OPTS=<span class="string">"-p 26885"</span></span><br></pre></td></tr></table></figure></div><blockquote><p>如果控制台出现错误提示：Hadoop: connect to host localhost port 22: Connection refused when running start-dfs.sh<br>那么可能的原因是ssh端口不是默认的22。需要在<code>hadoop安装目录</code>&#x2F;etc&#x2F;hadoop&#x2F;hadoop-env.sh中添加<code>export HADOOP_SSH_OPTS=&quot;-p 26885&quot;</code>，其中-p后面的参数是当前ssh使用的端口号  </p></blockquote><p>配置<code>core-site.xml</code>,端口改为8020,配置<code>hadoop.tmp.dir</code>临时文件目录，因为默认为Linux临时目录每次重启都会清空</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://ip:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/root/app/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>上面的配置中，需要通过JavaAPI远程操作则ip不能配置为localhost，需要公网ip。</p><p>配置<code>hdfs-site.xml</code></p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></div><hr><h3 id="2-5-启动HDFS"><a href="#2-5-启动HDFS" class="headerlink" title="2.5. 启动HDFS"></a>2.5. 启动HDFS</h3><p>格式化文件系统（仅仅第一次需要执行格式化）</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/hdfs namenode -format</span><br></pre></td></tr></table></figure></div><p>启动hdfs</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/start-dfs.sh</span><br></pre></td></tr></table></figure></div><p>验证是否启动成功</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure></div><p>如果有以下java进程，说明启动成功</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/app/hadoop-2.6.0-cdh5.7.0<span class="comment"># jps</span></span><br><span class="line">5745 Jps</span><br><span class="line">5330 NameNode</span><br><span class="line">5641 SecondaryNameNode</span><br><span class="line">5439 DataNode</span><br></pre></td></tr></table></figure></div><blockquote><ul><li>也可以通过浏览器访问 <a href="http://localhost:50070/" target="_blank" rel="noopener">http://localhost:50070</a>（本地服务器），<a href="http://ip:50070/" target="_blank" rel="noopener">http://ip:50070/</a>（远程服务器）  <ul><li>如果浏览器打不开 HADOOP WEB 页面，请配置防火墙开放 <strong>50070</strong> 端口。Ubuntu可以使用 <code>ufw</code> 命令配置防火墙。</li></ul></li><li><code>jps</code> 命令是JDK 1.5之后自带的查看Java进程的指令。</li></ul></blockquote><h3 id="2-6-停止HDFS"><a href="#2-6-停止HDFS" class="headerlink" title="2.6. 停止HDFS"></a>2.6. 停止HDFS</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/app/hadoop-2.6.0-cdh5.7.0<span class="comment"># sbin/stop-dfs.sh</span></span><br><span class="line">20/06/08 09:18:17 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Stopping namenodes on [localhost]</span><br><span class="line">localhost: stopping namenode</span><br><span class="line">localhost: stopping datanode</span><br><span class="line">Stopping secondary namenodes [0.0.0.0]</span><br><span class="line">0.0.0.0: stopping secondarynamenode</span><br><span class="line">20/06/08 09:18:39 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/app/hadoop-2.6.0-cdh5.7.0<span class="comment">#</span></span><br><span class="line">root@brave-post-2:~/app/hadoop-2.6.0-cdh5.7.0<span class="comment"># jps # 再次输入jps查看Java进程，hdfs已经停止</span></span><br><span class="line">6943 Jps</span><br><span class="line">root@brave-post-2:~/app/hadoop-2.6.0-cdh5.7.0<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><hr><h2 id="3-HDFS-SHELL-常用命令"><a href="#3-HDFS-SHELL-常用命令" class="headerlink" title="3. HDFS SHELL 常用命令"></a>3. HDFS SHELL 常用命令</h2><h3 id="3-1-将Hadoop-bin目录添加到环境变量"><a href="#3-1-将Hadoop-bin目录添加到环境变量" class="headerlink" title="3.1. 将Hadoop bin目录添加到环境变量"></a>3.1. 将Hadoop bin目录添加到环境变量</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile <span class="comment">#设置系统环境变量</span></span><br></pre></td></tr></table></figure></div><p>vi 编辑器添加以下内容</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HOME=/root/app/hadoop-2.6.0-cdh5.7.0</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HADOOP_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></div><p>生效环境变量</p><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/app/hadoop-2.6.0-cdh5.7.0<span class="comment"># vi ~/.bash_profile</span></span><br><span class="line">root@brave-post-2:~/app/hadoop-2.6.0-cdh5.7.0<span class="comment"># source ~/.bash_profile</span></span><br></pre></td></tr></table></figure></div><p>终端键入<code>hdfs</code>，若有输出hdfs命令的用法提示则环境变量配置成功。</p><h3 id="3-2-HDFS-SHELL-命令用法"><a href="#3-2-HDFS-SHELL-命令用法" class="headerlink" title="3.2. HDFS SHELL 命令用法"></a>3.2. HDFS SHELL 命令用法</h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/app/hadoop-2.6.0-cdh5.7.0<span class="comment"># hdfs</span></span><br><span class="line">   Usage: hdfs [--config confdir] COMMAND</span><br><span class="line">      <span class="built_in">where</span> COMMAND is one of:</span><br><span class="line">   dfs                  run a filesystem <span class="built_in">command</span> on the file systems supported <span class="keyword">in</span> Hadoop.</span><br><span class="line">   namenode -format     format the DFS filesystem</span><br><span class="line">   secondarynamenode    run the DFS secondary namenode</span><br><span class="line">   namenode             run the DFS namenode</span><br><span class="line">   journalnode          run the DFS journalnode</span><br><span class="line">   zkfc                 run the ZK Failover Controller daemon</span><br><span class="line">   datanode             run a DFS datanode</span><br><span class="line">   dfsadmin             run a DFS admin client</span><br><span class="line">   haadmin              run a DFS HA admin client</span><br><span class="line">   fsck                 run a DFS filesystem checking utility</span><br><span class="line">   balancer             run a cluster balancing utility</span><br><span class="line">   jmxget               get JMX exported values from NameNode or DataNode.</span><br><span class="line">   mover                run a utility to move block replicas across</span><br><span class="line">                     storage types</span><br><span class="line">   oiv                  apply the offline fsimage viewer to an fsimage</span><br><span class="line">   oiv_legacy           apply the offline fsimage viewer to an legacy fsimage</span><br><span class="line">   oev                  apply the offline edits viewer to an edits file</span><br><span class="line">   fetchdt              fetch a delegation token from the NameNode</span><br><span class="line">   getconf              get config values from configuration</span><br><span class="line">   groups               get the groups <span class="built_in">which</span> users belong to</span><br><span class="line">   snapshotDiff         diff two snapshots of a directory or diff the</span><br><span class="line">                     current directory contents with a snapshot</span><br><span class="line">   lsSnapshottableDir   list all snapshottable <span class="built_in">dirs</span> owned by the current user</span><br><span class="line">                     Use -<span class="built_in">help</span> to see options</span><br><span class="line">   portmap              run a portmap service</span><br><span class="line">   nfs3                 run an NFS version 3 gateway</span><br><span class="line">   cacheadmin           configure the HDFS cache</span><br><span class="line">   crypto               configure HDFS encryption zones</span><br><span class="line">   storagepolicies      list/get/<span class="built_in">set</span> block storage policies</span><br><span class="line">   version              <span class="built_in">print</span> the version</span><br><span class="line"></span><br><span class="line">   Most commands <span class="built_in">print</span> <span class="built_in">help</span> when invoked w/o parameters.</span><br><span class="line">root@brave-post-2:~/app/hadoop-2.6.0-cdh5.7.0<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">root@brave-post-2:~<span class="comment"># hdfs dfs</span></span><br><span class="line">Usage: hadoop fs [generic options]  <span class="comment">#也可以使用Hadoop fs命令</span></span><br><span class="line">   [-appendToFile &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">   [-cat [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">   [-checksum &lt;src&gt; ...]</span><br><span class="line">   [-chgrp [-R] GROUP PATH...]</span><br><span class="line">   [-chmod [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; PATH...]</span><br><span class="line">   [-chown [-R] [OWNER][:[GROUP]] PATH...]</span><br><span class="line">   [-copyFromLocal [-f] [-p] [-l] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">   [-copyToLocal [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]</span><br><span class="line">   [-count [-q] [-h] [-v] &lt;path&gt; ...]</span><br><span class="line">   [-cp [-f] [-p | -p[topax]] &lt;src&gt; ... &lt;dst&gt;]</span><br><span class="line">   [-createSnapshot &lt;snapshotDir&gt; [&lt;snapshotName&gt;]]</span><br><span class="line">   [-deleteSnapshot &lt;snapshotDir&gt; &lt;snapshotName&gt;]</span><br><span class="line">   [-df [-h] [&lt;path&gt; ...]]</span><br><span class="line">   [-du [-s] [-h] &lt;path&gt; ...]</span><br><span class="line">   [-expunge]</span><br><span class="line">   [-find &lt;path&gt; ... &lt;expression&gt; ...]</span><br><span class="line">   [-get [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;]</span><br><span class="line">   [-getfacl [-R] &lt;path&gt;]</span><br><span class="line">   [-getfattr [-R] &#123;-n name | -d&#125; [-e en] &lt;path&gt;]</span><br><span class="line">   [-getmerge [-nl] &lt;src&gt; &lt;localdst&gt;]</span><br><span class="line">   [-<span class="built_in">help</span> [cmd ...]]</span><br><span class="line">   [-ls [-d] [-h] [-R] [&lt;path&gt; ...]]</span><br><span class="line">   [-mkdir [-p] &lt;path&gt; ...]</span><br><span class="line">   [-moveFromLocal &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">   [-moveToLocal &lt;src&gt; &lt;localdst&gt;]</span><br><span class="line">   [-mv &lt;src&gt; ... &lt;dst&gt;]</span><br><span class="line">   [-put [-f] [-p] [-l] &lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">   [-renameSnapshot &lt;snapshotDir&gt; &lt;oldName&gt; &lt;newName&gt;]</span><br><span class="line">   [-rm [-f] [-r|-R] [-skipTrash] &lt;src&gt; ...]</span><br><span class="line">   [-rmdir [--ignore-fail-on-non-empty] &lt;dir&gt; ...]</span><br><span class="line">   [-setfacl [-R] [&#123;-b|-k&#125; &#123;-m|-x &lt;acl_spec&gt;&#125; &lt;path&gt;]|[--<span class="built_in">set</span> &lt;acl_spec&gt; &lt;path&gt;]]</span><br><span class="line">   [-setfattr &#123;-n name [-v value] | -x name&#125; &lt;path&gt;]</span><br><span class="line">   [-setrep [-R] [-w] &lt;rep&gt; &lt;path&gt; ...]</span><br><span class="line">   [-<span class="built_in">stat</span> [format] &lt;path&gt; ...]</span><br><span class="line">   [-tail [-f] &lt;file&gt;]</span><br><span class="line">   [-<span class="built_in">test</span> -[defsz] &lt;path&gt;]</span><br><span class="line">   [-text [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">   [-touchz &lt;path&gt; ...]</span><br><span class="line">   [-usage [cmd ...]]</span><br><span class="line"></span><br><span class="line">Generic options supported are</span><br><span class="line">-conf &lt;configuration file&gt;     specify an application configuration file</span><br><span class="line">-D &lt;property=value&gt;            use value <span class="keyword">for</span> given property</span><br><span class="line">-fs &lt;<span class="built_in">local</span>|namenode:port&gt;      specify a namenode</span><br><span class="line">-jt &lt;<span class="built_in">local</span>|resourcemanager:port&gt;    specify a ResourceManager</span><br><span class="line">-files &lt;comma separated list of files&gt;    specify comma separated files to be copied to the map reduce cluster</span><br><span class="line">-libjars &lt;comma separated list of jars&gt;    specify comma separated jar files to include <span class="keyword">in</span> the classpath.</span><br><span class="line">-archives &lt;comma separated list of archives&gt;    specify comma separated archives to be unarchived on the compute machines.</span><br><span class="line"></span><br><span class="line">The general <span class="built_in">command</span> line syntax is</span><br><span class="line">bin/hadoop <span class="built_in">command</span> [genericOptions] [commandOptions]</span><br><span class="line"></span><br><span class="line">root@brave-post-2:~<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><hr><h3 id="3-3-ls、put命令"><a href="#3-3-ls、put命令" class="headerlink" title="3.3. ls、put命令"></a>3.3. <code>ls</code>、<code>put</code>命令</h3><ul><li>查看目录列表 <code>ls</code>  </li><li>将本地文件保存到HDFS中 <code>put</code></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~<span class="comment"># mkdir ~/data</span></span><br><span class="line">root@brave-post-2:~<span class="comment"># cd ~/data</span></span><br><span class="line">root@brave-post-2:~/data<span class="comment"># ls</span></span><br><span class="line">root@brave-post-2:~/data<span class="comment"># vi hello.txt</span></span><br><span class="line">root@brave-post-2:~/data<span class="comment"># cat hello.txt</span></span><br><span class="line">hadoop welcome</span><br><span class="line">hadoop hdfs</span><br><span class="line">hadoop hello</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -ls /</span></span><br><span class="line">20/06/08 21:59:27 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">ls: Call From localhost/127.0.0.1 to localhost:8020 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># $HADOOP_HOME/sbin/start-dfs.sh</span></span><br><span class="line">20/06/08 22:02:12 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Starting namenodes on [localhost]</span><br><span class="line">localhost: starting namenode, logging to /root/app/hadoop-2.6.0-cdh5.7.0/logs/hadoop-root-namenode-brave-post-2.localdomain.out</span><br><span class="line">localhost: starting datanode, logging to /root/app/hadoop-2.6.0-cdh5.7.0/logs/hadoop-root-datanode-brave-post-2.localdomain.out</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">0.0.0.0: starting secondarynamenode, logging to /root/app/hadoop-2.6.0-cdh5.7.0/logs/hadoop-root-secondarynamenode-brave-post-2.localdomain.out</span><br><span class="line">20/06/08 22:02:31 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -ls /  #没有文件</span></span><br><span class="line">20/06/08 22:02:36 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -put hello.txt /</span></span><br><span class="line">20/06/08 22:03:08 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -ls /  #有了hello.txt</span></span><br><span class="line">20/06/08 22:03:30 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Found 1 items</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:03 /hello.txt</span><br></pre></td></tr></table></figure></div><hr><h3 id="3-4-查看文件内容-text、cat"><a href="#3-4-查看文件内容-text、cat" class="headerlink" title="3.4. 查看文件内容  text、cat"></a>3.4. 查看文件内容  <code>text</code>、<code>cat</code></h3><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -text /hello.txt</span></span><br><span class="line">20/06/08 22:08:59 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">hadoop welcome</span><br><span class="line">hadoop hdfs</span><br><span class="line">hadoop hello</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -cat /hello.txt</span></span><br><span class="line">20/06/08 22:09:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">hadoop welcome</span><br><span class="line">hadoop hdfs</span><br><span class="line">hadoop hello</span><br><span class="line">root@brave-post-2:~/data<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><hr><h3 id="3-5-mkdir、rmdir、get、copyFromLocal、rm"><a href="#3-5-mkdir、rmdir、get、copyFromLocal、rm" class="headerlink" title="3.5. mkdir、rmdir、get、copyFromLocal、rm"></a>3.5. <code>mkdir、rmdir、get、copyFromLocal、rm</code></h3><ul><li>创建目录 <code>mkdir</code></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -mkdir /testdir</span></span><br><span class="line">20/06/08 22:13:56 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs  -ls /testdir</span></span><br><span class="line">20/06/08 22:14:24 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs  -ls /</span></span><br><span class="line">20/06/08 22:14:32 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Found 2 items</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:03 /hello.txt</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:13 /testdir</span><br><span class="line">root@brave-post-2:~/data<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><ul><li>递归创建目录 <code>-p</code> 参数</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -mkdir /a/b</span></span><br><span class="line">20/06/08 22:17:12 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">mkdir: `/a/b<span class="string">': No such file or directory</span></span><br><span class="line"><span class="string">root@brave-post-2:~/data# hadoop fs -mkdir -p /a/b</span></span><br><span class="line"><span class="string">20/06/08 22:17:26 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span></span><br><span class="line"><span class="string">root@brave-post-2:~/data# hadoop fs  -ls /</span></span><br><span class="line"><span class="string">20/06/08 22:17:53 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span></span><br><span class="line"><span class="string">Found 3 items</span></span><br><span class="line"><span class="string">drwxr-xr-x   - root supergroup          0 2020-06-08 22:17 /a</span></span><br><span class="line"><span class="string">-rw-r--r--   1 root supergroup         40 2020-06-08 22:03 /hello.txt</span></span><br><span class="line"><span class="string">drwxr-xr-x   - root supergroup          0 2020-06-08 22:13 /testdir</span></span><br></pre></td></tr></table></figure></div><ul><li>递归列出所有目录和文件 <code>-R</code> 参数</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs  -ls -R /</span></span><br><span class="line">20/06/08 22:18:18 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:17 /a</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:17 /a/b</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:03 /hello.txt</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:13 /testdir</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs  -lsr /  #或者lsr命令</span></span><br><span class="line">lsr: DEPRECATED: Please use <span class="string">'ls -R'</span> instead.</span><br><span class="line">20/06/08 22:18:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:17 /a</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:17 /a/b</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:03 /hello.txt</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:13 /testdir</span><br><span class="line">root@brave-post-2:~/data<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><ul><li>从本地拷贝 <code>copyFromLocal</code></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -copyFromLocal hello.txt /a/b/h.txt</span></span><br><span class="line">20/06/08 22:25:06 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs  -ls -R /</span></span><br><span class="line">20/06/08 22:25:18 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:17 /a</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:25 /a/b</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:25 /a/b/h.txt</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:03 /hello.txt</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:13 /testdir</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -cat /a/b/h.txt</span></span><br><span class="line">20/06/08 22:26:07 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">hadoop welcome</span><br><span class="line">hadoop hdfs</span><br><span class="line">hadoop hello</span><br></pre></td></tr></table></figure></div><ul><li>从HDFS获取文件 <code>get</code></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># ls</span></span><br><span class="line">hello.txt</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -get /a/b/h.txt</span></span><br><span class="line">20/06/08 22:27:09 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># ls</span></span><br><span class="line">hello.txt  h.txt</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># cat h.txt</span></span><br><span class="line">hadoop welcome</span><br><span class="line">hadoop hdfs</span><br><span class="line">hadoop hello</span><br></pre></td></tr></table></figure></div><ul><li>删除文件 <code>rm</code></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -rm /hello.txt</span></span><br><span class="line">20/06/08 22:28:16 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Deleted /hello.txt</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -ls /</span></span><br><span class="line">20/06/08 22:28:37 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">Found 2 items</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:17 /a</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:13 /testdir</span><br></pre></td></tr></table></figure></div><ul><li>从本地 <code>put</code> 文件至HDFS</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -put hello.txt /</span></span><br><span class="line">20/06/08 22:29:36 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># ls -lh /root/software/hadoop-2.6.0-cdh5.7.0.tar.gz</span></span><br><span class="line">-rw-r--r-- 1 root root 298M Feb 20  2018 /root/software/hadoop-2.6.0-cdh5.7.0.tar.gz</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -put /root/software/hadoop-2.6.0-cdh5.7.0.tar.gz /</span></span><br><span class="line">20/06/08 22:33:27 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -ls -R /</span></span><br><span class="line">20/06/08 22:33:59 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:17 /a</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:25 /a/b</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:25 /a/b/h.txt</span><br><span class="line">-rw-r--r--   1 root supergroup  311585484 2020-06-08 22:33 /hadoop-2.6.0-cdh5.7.0.tar.gz</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:29 /hello.txt</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:13 /testdir</span><br></pre></td></tr></table></figure></div><ul><li>文件大小以GB、MB为单位显示而不是直接显示字节数 <code>-h</code> 参数</li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -ls -R -h /</span></span><br><span class="line">20/06/08 22:51:11 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:17 /a</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:25 /a/b</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:25 /a/b/h.txt</span><br><span class="line">-rw-r--r--   1 root supergroup    297.2 M 2020-06-08 22:33 /hadoop-2.6.0-cdh5.7.0.tar.gz</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:29 /hello.txt</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 22:13 /testdir</span><br><span class="line">root@brave-post-2:~/data<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><ul><li>删除文件夹 <code>rmdir</code></li></ul><div class="highlight-box"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -mkdir -p /a/b/c</span></span><br><span class="line">20/06/08 23:27:22 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -ls -R -h /a/</span></span><br><span class="line">20/06/08 23:27:40 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 23:27 /a/b</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 23:27 /a/b/c</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:25 /a/b/h.txt</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -rmdir /a/b/c</span></span><br><span class="line">20/06/08 23:27:51 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">root@brave-post-2:~/data<span class="comment"># hadoop fs -ls -R -h /a/</span></span><br><span class="line">20/06/08 23:27:58 WARN util.NativeCodeLoader: Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2020-06-08 23:27 /a/b</span><br><span class="line">-rw-r--r--   1 root supergroup         40 2020-06-08 22:25 /a/b/h.txt</span><br><span class="line">root@brave-post-2:~/data<span class="comment">#</span></span><br></pre></td></tr></table></figure></div><hr><h3 id="3-6-HDFS-Web-管理页面"><a href="#3-6-HDFS-Web-管理页面" class="headerlink" title="3.6. HDFS Web 管理页面"></a>3.6. HDFS Web 管理页面</h3><p>URL：<a href="http://23.105.206.170:50070/explorer.html#/" target="_blank" rel="noopener">http://23.105.206.170:50070/explorer.html#/</a></p><ul><li>浏览HDFS文件系统目录，查看文件信息</li></ul><p><img src="/2020/06/08/CDH-Hadoop%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/hdfs01.png" alt="浏览HDFS文件系统目录"></p><hr><ul><li>查看block信息</li></ul><p><img src="/2020/06/08/CDH-Hadoop%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/hdfs02.png" alt="查看文件block信息"></p><hr><h2 id="4-参考文档"><a href="#4-参考文档" class="headerlink" title="4. 参考文档"></a>4. 参考文档</h2><ul><li><a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html" target="_blank" rel="noopener">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html</a></li><li><a href="https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="noopener">https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html</a></li><li><a href="https://www.youtube.com/watch?v=k3Bb0fVVTZk&amp;list=PLhXu26RzZZTzveyPX8XgTBKf3tjxjA1tW&amp;index=3" target="_blank" rel="noopener">https://www.youtube.com/watch?v=k3Bb0fVVTZk&amp;list=PLhXu26RzZZTzveyPX8XgTBKf3tjxjA1tW&amp;index=3</a></li></ul><hr>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-安装环境&quot;&gt;&lt;a href=&quot;#1-安装环境&quot; class=&quot;headerlink&quot; title=&quot;1. 安装环境&quot;&gt;&lt;/a&gt;1. 安装环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;操作系统：Ubuntu 18.04 64位&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hadoop&lt;/a&gt;版本：hadoop-2.6.0-cdh5.7.0.tar.gz&lt;/li&gt;
&lt;li&gt;JDK版本：jdk-8u241-linux-x64.tar.gz&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-Hadoop伪分布式安装&quot;&gt;&lt;a href=&quot;#2-Hadoop伪分布式安装&quot; class=&quot;headerlink&quot; title=&quot;2. Hadoop伪分布式安装&quot;&gt;&lt;/a&gt;2. &lt;a href=&quot;https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0/hadoop-project-dist/hadoop-common/SingleCluster.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hadoop伪分布式安装&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;操作环境：macOS终端 &lt;code&gt;ssh&lt;/code&gt; 远程连接Ubuntu  &lt;/p&gt;
&lt;h3 id=&quot;2-1-下载地址&quot;&gt;&lt;a href=&quot;#2-1-下载地址&quot; class=&quot;headerlink&quot; title=&quot;2.1. 下载地址&quot;&gt;&lt;/a&gt;2.1. 下载地址&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://archive.cloudera.com/cdh5/cdh/5/hadoop-2.6.0-cdh5.7.0.tar.gz &lt;span class=&quot;comment&quot;&gt;#Hadoop安装包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget http://enos.itcollege.ee/~jpoial/allalaadimised/jdk8/jdk-8u241-linux-x64.tar.gz &lt;span class=&quot;comment&quot;&gt;#JDK安装包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Hadoop" scheme="https://xiaoyan94.github.io/tags/Hadoop/"/>
    
    <category term="安装教程" scheme="https://xiaoyan94.github.io/tags/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
